# graphql/Root.graphql
# Main Schema File
type Query {
    listPartnerStores(listPartnerStoresInput: ListPartnerStoresInput!): PartnerStoreResponse @aws_cognito_user_pools
    getPartnerStore(id: String!): PartnerStoreResponse @aws_cognito_user_pools
    listFAQs(listFAQInput: ListFAQInput!): FAQResponse @aws_cognito_user_pools
    getStorage(getStorageInput: GetStorageInput!): StorageResponse @aws_cognito_user_pools
    getAccountLink(id: String!): AccountLinkResponse @aws_cognito_user_pools
    listAccounts(filter: ListAccountsInput!): AccountResponse @aws_cognito_user_pools
    getReferral(id: String!): ReferralResponse @aws_cognito_user_pools
    listReferrals(filter: ListReferralInput!): ReferralResponse @aws_cognito_user_pools
}

type Mutation {
    createPartnerStore(createPartnerStoreInput: CreatePartnerStoreInput!): PartnerStoreResponse @aws_cognito_user_pools
    createFAQ(createFAQInput: CreateFAQInput!): FAQResponse @aws_cognito_user_pools
    createAccountLink(createAccountLinkInput: CreateAccountLinkInput!): AccountLinkResponse @aws_cognito_user_pools
    updateAccountLink(updateAccountLinkInput: UpdateAccountLinkInput!): AccountLinkResponse @aws_cognito_user_pools
    deleteAccount(deleteAccountInput: DeleteAccountInput!): AccountResponse @aws_cognito_user_pools
    createReferral(createReferralInput: CreateReferralInput!): ReferralResponse @aws_cognito_user_pools
    updateReferral(updateReferralInput: UpdateReferralInput!): ReferralResponse @aws_cognito_user_pools
}
# graphql/AccountLinkSchema.graphql
# Account Linking Schema File
enum LinkLogLevel {
    DEBUG
    INFO
    WARN
    ERROR
}

enum AccountType {
    CHECKING
    SAVINGS,
    UNKNOWN
}

enum AccountVerificationStatus {
    PENDING,
    VERIFIED,
    EXPIRED,
    FAILED,
    UNKNOWN
}

enum LinkErrorType {
    NONE_OR_ABSENT
    VALIDATION_ERROR
    UNEXPECTED_ERROR
}

type FinancialInstitution @aws_cognito_user_pools {
    name: String!
    id: String!
}

type Account @aws_cognito_user_pools {
    id: String!
    name: String!
    mask: String!
    type: AccountType!
    verificationStatus: AccountVerificationStatus!
}

type AccountLinkError @aws_cognito_user_pools {
    errorMessage: String!
    errorType: String!
}

type AccountLinkDetails @aws_cognito_user_pools {
    accounts: [Account]
    linkToken: String!
    publicToken: String
    accessToken: String
    itemId: String
    linkSessionId: String
    exitStatus: String
    accountLinkError: AccountLinkError
    requestId: String!
    institution: FinancialInstitution
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
}

type AccountLink @aws_cognito_user_pools {
    id: ID!
    userName: String
    userEmail: String
    links: [AccountLinkDetails]!
}

type AccountLinkResponse @aws_cognito_user_pools {
    data: AccountLink
    errorType: LinkErrorType
    errorMessage: String
}

type AccountDetails @aws_cognito_user_pools {
    id: String!
    name: String!
    mask: String!
    type: AccountType!
    verificationStatus: AccountVerificationStatus!
    institution: FinancialInstitution!
    linkToken: String!
}

type AccountResponse @aws_cognito_user_pools {
    data: [AccountDetails]
    errorType: LinkErrorType
    errorMessage: String
}

input AccountDetailsInput {
    id: String!
    name: String!
    mask: String!
    type: AccountType!
    verificationStatus: AccountVerificationStatus!
    institution: FinancialInstitutionInput!
    linkToken: String!
}

input AccountLinkErrorInput {
    errorMessage: String!
    errorType: String!
}

input FinancialInstitutionInput {
    name: String!
    id: String!
}

input AccountInput {
    id: String!
    name: String!
    mask: String!
    type: AccountType!
    verificationStatus: AccountVerificationStatus!
}

input AccountLinkDetailsInput {
    accounts: [AccountInput]
    linkToken: String!
    publicToken: String
    accessToken: String
    itemId: String
    linkSessionId: String
    exitStatus: String
    accountLinkError: AccountLinkErrorInput
    requestId: String
    institution: FinancialInstitutionInput
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

input CreateAccountLinkInput {
    id: ID!
    userName: String!
    userEmail: String!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

input UpdateAccountLinkInput {
    id: ID!
    accountLinkDetails: AccountLinkDetailsInput!
    updatedAt: AWSDateTime
}

input ListAccountsInput {
    id: ID!
    status: AccountVerificationStatus
}

input DeleteAccountInput {
    id: ID!
    linkToken: String!
    accounts: [AccountDetailsInput]!
    updatedAt: AWSDateTime
}
# graphql/ReferralSchema.graphql
# Amplify Referral Schema File
enum ReferralStatus {
    REDEEMED,
    NOT_REDEEMED,
    INITIATED,
    INVALID
}

enum OfferType {
    WELCOME_REFERRAL_BONUS
}

enum ReferralErrorType {
    NONE_OR_ABSENT
    VALIDATION_ERROR
    UNEXPECTED_ERROR
}

type Referral @aws_cognito_user_pools {
    id: ID!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    status: ReferralStatus!
    offerType: OfferType!
    inviteeEmail: String!
    inviterEmail: String!
    inviterName: String!
    statusInviter: ReferralStatus!
    statusInvitee: ReferralStatus!
}

type ReferralResponse @aws_cognito_user_pools {
    data: [Referral]
    errorType: ReferralErrorType
    errorMessage: String
}

input ListReferralInput {
    inviteeEmail: String,
    inviterEmail: String,
    statusInviter: ReferralStatus,
    statusInvitee: ReferralStatus
    status: ReferralStatus!
}

input CreateReferralInput {
    id: ID!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    status: ReferralStatus!
    offerType: OfferType!
    inviteeEmail: String!
    inviterEmail: String!
    inviterName: String!
    statusInviter: ReferralStatus!
    statusInvitee: ReferralStatus!
}

input UpdateReferralInput {
    id: ID!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    status: ReferralStatus
    offerType: OfferType
    inviteeEmail: String
    inviterEmail: String
    inviterName: String
    statusInviter: ReferralStatus
    statusInvitee: ReferralStatus
}
# graphql/AccountLinkSchema.graphql
# Storage Schema File
enum StorageErrorType {
    NONE_OR_ABSENT
    VALIDATION_ERROR
    UNEXPECTED_ERROR
    RESTRICTED_ACCESS
}

# Defines the types of file access levels available, implemented in line with what
# Amplify storage does.
#
# For more information, refer to:
# https://docs.amplify.aws/lib/storage/configureaccess/q/platform/js/
#
# For now just considering the public and private access levels, not protected.
enum FileAccessLevel {
    PUBLIC
    PRIVATE
    PROTECTED
}

# Defines the type of file to retrieve, which then, in turn determines the bucket that we
# read from, and implicitly, the CloudFront distribution that we read from.
enum FileType {
    MAIN
    # TBD on more file types, depending on whether we want to have additional buckets or not
}

type File @aws_cognito_user_pools {
    url: String!
}

type StorageResponse @aws_cognito_user_pools {
    data: File
    errorType: StorageErrorType
    errorMessage: String
}

input GetStorageInput {
    level: FileAccessLevel!,
    type: FileType!,
    name: String!,
    expires: Boolean
}
# graphql/FAQSchema.graphql
# FAQ Schema File
enum FAQErrorType {
    VALIDATION_ERROR
    UNEXPECTED_ERROR
}

enum FAQType {
    LINKABLE
    NON_LINKABLE
}

type Fact @aws_cognito_user_pools {
    title: String!
    description: String!
    linkTitle: String
    link: String
}

type FAQ @aws_cognito_user_pools {
    id: ID!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    title: String!
    type: FAQType!
    facts: [Fact]
    applicationLink: String
}

type FAQResponse @aws_cognito_user_pools {
    data:  [FAQ]
    errorType: FAQErrorType
    errorMessage: String
}

input FactInput {
    title: String!
    description: String!
    linkTitle: String
    link: String
}

input CreateFAQInput {
    id: ID!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    title: String!
    type: FAQType!
    facts: [FactInput]
    applicationLink: String
}

input ListFAQInput {
    type: FAQType
}
# graphql/MarketplaceSchema.graphql
# Marketplace Schema File
enum MarketplaceErrorType {
    NONE_OR_ABSENT
    VALIDATION_ERROR
    UNEXPECTED_ERROR
}

enum PartnerMerchantType {
    FEATURED
    NON_FEATURED
}

type PartnerStore @aws_cognito_user_pools {
    id: ID!
    name: String!
    type: PartnerMerchantType!
    description: String
    logo: String!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    websiteURL: String!
    discountPercentage: Int!
    pointsMultiplier: String!
}

type PartnerStoreResponse @aws_cognito_user_pools {
    data: [PartnerStore]
    errorType: MarketplaceErrorType
    errorMessage: String
}

input PartnerStoreInput {
    id: ID!
    name: String!
    type: PartnerMerchantType!
    description: String
    logo: String!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    websiteURL: String!
    discountPercentage: Int!
    pointsMultiplier: String!
}

input CreatePartnerStoreInput {
    id: ID!
    name: String!
    type: PartnerMerchantType!
    description: String
    logo: String!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    websiteURL: String!
    discountPercentage: Int!
    pointsMultiplier: String!
}

input ListPartnerStoresInput {
    type: PartnerMerchantType
}
