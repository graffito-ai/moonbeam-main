"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const GetFidelisPartnersResolver_1 = require("./resolvers/GetFidelisPartnersResolver");
const GetOffersResolver_1 = require("./resolvers/GetOffersResolver");
const GetPremierOffersResolver_1 = require("./resolvers/GetPremierOffersResolver");
const GetSeasonalOffersResolver_1 = require("./resolvers/GetSeasonalOffersResolver");
const SearchOffersResolver_1 = require("./resolvers/SearchOffersResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 * @returns a {@link Promise} containing a {@link OffersResponse} or {@link FidelisPartnerResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new offers event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "searchOffers":
            return await (0, SearchOffersResolver_1.searchOffers)(event.info.fieldName, event.arguments.searchOffersInput);
        case "getOffers":
            return await (0, GetOffersResolver_1.getOffers)(event.info.fieldName, event.arguments.getOffersInput);
        case "getFidelisPartners":
            return await (0, GetFidelisPartnersResolver_1.getFidelisPartners)(event.info.fieldName);
        case "getPremierOffers":
            return await (0, GetPremierOffersResolver_1.getPremierOffers)(event.info.fieldName, event.arguments.getOffersInput);
        case "getSeasonalOffers":
            return await (0, GetSeasonalOffersResolver_1.getSeasonalOffers)(event.info.fieldName, event.arguments.getOffersInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.OffersErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUttQztBQUNuQyx1RkFBNEU7QUFDNUUscUVBQTBEO0FBQzFELG1GQUFzRTtBQUN0RSxxRkFBMEU7QUFDMUUsMkVBQWdFO0FBbUJoRTs7Ozs7O0dBTUc7QUFDSCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFtQixFQUFvRCxFQUFFO0lBQzlGLE9BQU8sQ0FBQyxHQUFHLENBQUMsNENBQTRDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BJLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDMUIsS0FBSyxjQUFjO1lBQ2YsT0FBTyxNQUFNLElBQUEsbUNBQVksRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDdkYsS0FBSyxXQUFXO1lBQ1osT0FBTyxNQUFNLElBQUEsNkJBQVMsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2pGLEtBQUssb0JBQW9CO1lBQ3JCLE9BQU8sTUFBTSxJQUFBLCtDQUFrQixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUQsS0FBSyxrQkFBa0I7WUFDbkIsT0FBTyxNQUFNLElBQUEsMkNBQWdCLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN4RixLQUFLLG1CQUFtQjtZQUNwQixPQUFPLE1BQU0sSUFBQSw2Q0FBaUIsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3pGO1lBQ0ksTUFBTSxZQUFZLEdBQUcsMEJBQTBCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxQixPQUFPO2dCQUNILFlBQVksRUFBRSxZQUFZO2dCQUMxQixTQUFTLEVBQUUsaUNBQWUsQ0FBQyxlQUFlO2FBQzdDLENBQUM7S0FDVDtBQUNMLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRmlkZWxpc1BhcnRuZXJSZXNwb25zZSxcbiAgICBHZXRPZmZlcnNJbnB1dCxcbiAgICBPZmZlcnNFcnJvclR5cGUsXG4gICAgT2ZmZXJzUmVzcG9uc2UsIFNlYXJjaE9mZmVyc0lucHV0XG59IGZyb20gXCJAbW9vbmJlYW0vbW9vbmJlYW0tbW9kZWxzXCI7XG5pbXBvcnQgeyBnZXRGaWRlbGlzUGFydG5lcnMgfSBmcm9tIFwiLi9yZXNvbHZlcnMvR2V0RmlkZWxpc1BhcnRuZXJzUmVzb2x2ZXJcIjtcbmltcG9ydCB7IGdldE9mZmVycyB9IGZyb20gXCIuL3Jlc29sdmVycy9HZXRPZmZlcnNSZXNvbHZlclwiO1xuaW1wb3J0IHtnZXRQcmVtaWVyT2ZmZXJzfSBmcm9tIFwiLi9yZXNvbHZlcnMvR2V0UHJlbWllck9mZmVyc1Jlc29sdmVyXCI7XG5pbXBvcnQgeyBnZXRTZWFzb25hbE9mZmVycyB9IGZyb20gXCIuL3Jlc29sdmVycy9HZXRTZWFzb25hbE9mZmVyc1Jlc29sdmVyXCI7XG5pbXBvcnQgeyBzZWFyY2hPZmZlcnMgfSBmcm9tIFwiLi9yZXNvbHZlcnMvU2VhcmNoT2ZmZXJzUmVzb2x2ZXJcIjtcblxuLyoqXG4gKiBNYXBwaW5nIG91dCB0aGUgQXBwIFN5bmMgZXZlbnQgdHlwZSwgc28gd2UgY2FuIHVzZSBpdCBhcyBhIHR5cGUgaW4gdGhlIExhbWJkYSBIYW5kbGVyXG4gKi9cbnR5cGUgQXBwU3luY0V2ZW50ID0ge1xuICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmdcbiAgICB9LFxuICAgIGFyZ3VtZW50czoge1xuICAgICAgICBnZXRPZmZlcnNJbnB1dDogR2V0T2ZmZXJzSW5wdXQsXG4gICAgICAgIHNlYXJjaE9mZmVyc0lucHV0OiBTZWFyY2hPZmZlcnNJbnB1dFxuICAgIH0sXG4gICAgaWRlbnRpdHk6IHtcbiAgICAgICAgc3ViOiBzdHJpbmc7XG4gICAgICAgIHVzZXJuYW1lOiBzdHJpbmc7XG4gICAgfVxufVxuXG4vKipcbiAqIExhbWJkYSBGdW5jdGlvbiBoYW5kbGVyLCBoYW5kbGluZyBpbmNvbWluZyBldmVudHMsXG4gKiBkZXBlbmRpbmcgb24gdGhlIEFwcFN5bmMgZmllbGQgbmFtZS5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgQXBwU3luYyBldmVudCB0byBiZSBwYXNzZWQgaW4gdGhlIGhhbmRsZXJcbiAqIEByZXR1cm5zIGEge0BsaW5rIFByb21pc2V9IGNvbnRhaW5pbmcgYSB7QGxpbmsgT2ZmZXJzUmVzcG9uc2V9IG9yIHtAbGluayBGaWRlbGlzUGFydG5lclJlc3BvbnNlfVxuICovXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFwcFN5bmNFdmVudCk6IFByb21pc2U8T2ZmZXJzUmVzcG9uc2UgfCBGaWRlbGlzUGFydG5lclJlc3BvbnNlPiA9PiB7XG4gICAgY29uc29sZS5sb2coYFJlY2VpdmVkIG5ldyBvZmZlcnMgZXZlbnQgZm9yIG9wZXJhdGlvbiBbJHtldmVudC5pbmZvLmZpZWxkTmFtZX1dLCB3aXRoIGFyZ3VtZW50cyAke0pTT04uc3RyaW5naWZ5KGV2ZW50LmFyZ3VtZW50cyl9YCk7XG4gICAgc3dpdGNoIChldmVudC5pbmZvLmZpZWxkTmFtZSkge1xuICAgICAgICBjYXNlIFwic2VhcmNoT2ZmZXJzXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgc2VhcmNoT2ZmZXJzKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMuc2VhcmNoT2ZmZXJzSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0T2ZmZXJzXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0T2ZmZXJzKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMuZ2V0T2ZmZXJzSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0RmlkZWxpc1BhcnRuZXJzXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0RmlkZWxpc1BhcnRuZXJzKGV2ZW50LmluZm8uZmllbGROYW1lKTtcbiAgICAgICAgY2FzZSBcImdldFByZW1pZXJPZmZlcnNcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRQcmVtaWVyT2ZmZXJzKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMuZ2V0T2ZmZXJzSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0U2Vhc29uYWxPZmZlcnNcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRTZWFzb25hbE9mZmVycyhldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmdldE9mZmVyc0lucHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6ICR7ZXZlbnQuaW5mby5maWVsZE5hbWV9YDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgIGVycm9yVHlwZTogT2ZmZXJzRXJyb3JUeXBlLlVuZXhwZWN0ZWRFcnJvclxuICAgICAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=