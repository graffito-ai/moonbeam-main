"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const GetFidelisPartnersResolver_1 = require("./resolvers/GetFidelisPartnersResolver");
const GetOffersResolver_1 = require("./resolvers/GetOffersResolver");
const GetPremierOffersResolver_1 = require("./resolvers/GetPremierOffersResolver");
const GetSeasonalOffersResolver_1 = require("./resolvers/GetSeasonalOffersResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 * @returns a {@link Promise} containing a {@link OffersResponse} or {@link FidelisPartnerResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new offers event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getOffers":
            return await (0, GetOffersResolver_1.getOffers)(event.info.fieldName, event.arguments.getOffersInput);
        case "getFidelisPartners":
            return await (0, GetFidelisPartnersResolver_1.getFidelisPartners)(event.info.fieldName);
        case "getPremierOffers":
            return await (0, GetPremierOffersResolver_1.getPremierOffers)(event.info.fieldName, event.arguments.getOffersInput);
        case "getSeasonalOffers":
            return await (0, GetSeasonalOffersResolver_1.getSeasonalOffers)(event.info.fieldName, event.arguments.getOffersInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.OffersErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUttQztBQUNuQyx1RkFBNEU7QUFDNUUscUVBQTBEO0FBQzFELG1GQUFzRTtBQUN0RSxxRkFBMEU7QUFtQjFFOzs7Ozs7R0FNRztBQUNILE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQW1CLEVBQW9ELEVBQUU7SUFDOUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0Q0FBNEMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEksUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUMxQixLQUFLLFdBQVc7WUFDWixPQUFPLE1BQU0sSUFBQSw2QkFBUyxFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDakYsS0FBSyxvQkFBb0I7WUFDckIsT0FBTyxNQUFNLElBQUEsK0NBQWtCLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxRCxLQUFLLGtCQUFrQjtZQUNuQixPQUFPLE1BQU0sSUFBQSwyQ0FBZ0IsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3hGLEtBQUssbUJBQW1CO1lBQ3BCLE9BQU8sTUFBTSxJQUFBLDZDQUFpQixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDekY7WUFDSSxNQUFNLFlBQVksR0FBRywwQkFBMEIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN0RSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE9BQU87Z0JBQ0gsWUFBWSxFQUFFLFlBQVk7Z0JBQzFCLFNBQVMsRUFBRSxpQ0FBZSxDQUFDLGVBQWU7YUFDN0MsQ0FBQztLQUNUO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBGaWRlbGlzUGFydG5lclJlc3BvbnNlLFxuICAgIEdldE9mZmVyc0lucHV0LFxuICAgIE9mZmVyc0Vycm9yVHlwZSxcbiAgICBPZmZlcnNSZXNwb25zZVxufSBmcm9tIFwiQG1vb25iZWFtL21vb25iZWFtLW1vZGVsc1wiO1xuaW1wb3J0IHsgZ2V0RmlkZWxpc1BhcnRuZXJzIH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldEZpZGVsaXNQYXJ0bmVyc1Jlc29sdmVyXCI7XG5pbXBvcnQgeyBnZXRPZmZlcnMgfSBmcm9tIFwiLi9yZXNvbHZlcnMvR2V0T2ZmZXJzUmVzb2x2ZXJcIjtcbmltcG9ydCB7Z2V0UHJlbWllck9mZmVyc30gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldFByZW1pZXJPZmZlcnNSZXNvbHZlclwiO1xuaW1wb3J0IHsgZ2V0U2Vhc29uYWxPZmZlcnMgfSBmcm9tIFwiLi9yZXNvbHZlcnMvR2V0U2Vhc29uYWxPZmZlcnNSZXNvbHZlclwiO1xuXG4vKipcbiAqIE1hcHBpbmcgb3V0IHRoZSBBcHAgU3luYyBldmVudCB0eXBlLCBzbyB3ZSBjYW4gdXNlIGl0IGFzIGEgdHlwZSBpbiB0aGUgTGFtYmRhIEhhbmRsZXJcbiAqL1xudHlwZSBBcHBTeW5jRXZlbnQgPSB7XG4gICAgaW5mbzoge1xuICAgICAgICBmaWVsZE5hbWU6IHN0cmluZ1xuICAgIH0sXG4gICAgYXJndW1lbnRzOiB7XG4gICAgICAgIGdldE9mZmVyc0lucHV0OiBHZXRPZmZlcnNJbnB1dFxuICAgIH0sXG4gICAgaWRlbnRpdHk6IHtcbiAgICAgICAgc3ViOiBzdHJpbmc7XG4gICAgICAgIHVzZXJuYW1lOiBzdHJpbmc7XG4gICAgfVxufVxuXG5cbi8qKlxuICogTGFtYmRhIEZ1bmN0aW9uIGhhbmRsZXIsIGhhbmRsaW5nIGluY29taW5nIGV2ZW50cyxcbiAqIGRlcGVuZGluZyBvbiB0aGUgQXBwU3luYyBmaWVsZCBuYW1lLlxuICpcbiAqIEBwYXJhbSBldmVudCBBcHBTeW5jIGV2ZW50IHRvIGJlIHBhc3NlZCBpbiB0aGUgaGFuZGxlclxuICogQHJldHVybnMgYSB7QGxpbmsgUHJvbWlzZX0gY29udGFpbmluZyBhIHtAbGluayBPZmZlcnNSZXNwb25zZX0gb3Ige0BsaW5rIEZpZGVsaXNQYXJ0bmVyUmVzcG9uc2V9XG4gKi9cbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudDogQXBwU3luY0V2ZW50KTogUHJvbWlzZTxPZmZlcnNSZXNwb25zZSB8IEZpZGVsaXNQYXJ0bmVyUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgbmV3IG9mZmVycyBldmVudCBmb3Igb3BlcmF0aW9uIFske2V2ZW50LmluZm8uZmllbGROYW1lfV0sIHdpdGggYXJndW1lbnRzICR7SlNPTi5zdHJpbmdpZnkoZXZlbnQuYXJndW1lbnRzKX1gKTtcbiAgICBzd2l0Y2ggKGV2ZW50LmluZm8uZmllbGROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJnZXRPZmZlcnNcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRPZmZlcnMoZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5nZXRPZmZlcnNJbnB1dCk7XG4gICAgICAgIGNhc2UgXCJnZXRGaWRlbGlzUGFydG5lcnNcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRGaWRlbGlzUGFydG5lcnMoZXZlbnQuaW5mby5maWVsZE5hbWUpO1xuICAgICAgICBjYXNlIFwiZ2V0UHJlbWllck9mZmVyc1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldFByZW1pZXJPZmZlcnMoZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5nZXRPZmZlcnNJbnB1dCk7XG4gICAgICAgIGNhc2UgXCJnZXRTZWFzb25hbE9mZmVyc1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldFNlYXNvbmFsT2ZmZXJzKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMuZ2V0T2ZmZXJzSW5wdXQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYFVuZXhwZWN0ZWQgZmllbGQgbmFtZTogJHtldmVudC5pbmZvLmZpZWxkTmFtZX1gO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgZXJyb3JUeXBlOiBPZmZlcnNFcnJvclR5cGUuVW5leHBlY3RlZEVycm9yXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==