"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const GetFidelisPartnersResolver_1 = require("./resolvers/GetFidelisPartnersResolver");
const GetOffersResolver_1 = require("./resolvers/GetOffersResolver");
const GetPremierOffersResolver_1 = require("./resolvers/GetPremierOffersResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 * @returns a {@link Promise} containing a {@link OffersResponse} or {@link FidelisPartnerResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new offers event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getOffers":
            return await (0, GetOffersResolver_1.getOffers)(event.info.fieldName, event.arguments.getOffersInput);
        case "getFidelisPartners":
            return await (0, GetFidelisPartnersResolver_1.getFidelisPartners)(event.info.fieldName);
        case "getPremierOffers":
            return await (0, GetPremierOffersResolver_1.getPremierOffers)(event.info.fieldName, event.arguments.getOffersInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.OffersErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUFrSDtBQUNsSCx1RkFBNEU7QUFDNUUscUVBQTBEO0FBQzFELG1GQUFzRTtBQW1CdEU7Ozs7OztHQU1HO0FBQ0gsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBbUIsRUFBb0QsRUFBRTtJQUM5RixPQUFPLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwSSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQzFCLEtBQUssV0FBVztZQUNaLE9BQU8sTUFBTSxJQUFBLDZCQUFTLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNqRixLQUFLLG9CQUFvQjtZQUNyQixPQUFPLE1BQU0sSUFBQSwrQ0FBa0IsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFELEtBQUssa0JBQWtCO1lBQ25CLE9BQU8sTUFBTSxJQUFBLDJDQUFnQixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDeEY7WUFDSSxNQUFNLFlBQVksR0FBRywwQkFBMEIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN0RSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE9BQU87Z0JBQ0gsWUFBWSxFQUFFLFlBQVk7Z0JBQzFCLFNBQVMsRUFBRSxpQ0FBZSxDQUFDLGVBQWU7YUFDN0MsQ0FBQztLQUNUO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGaWRlbGlzUGFydG5lclJlc3BvbnNlLCBHZXRPZmZlcnNJbnB1dCwgT2ZmZXJzRXJyb3JUeXBlLCBPZmZlcnNSZXNwb25zZX0gZnJvbSBcIkBtb29uYmVhbS9tb29uYmVhbS1tb2RlbHNcIjtcbmltcG9ydCB7IGdldEZpZGVsaXNQYXJ0bmVycyB9IGZyb20gXCIuL3Jlc29sdmVycy9HZXRGaWRlbGlzUGFydG5lcnNSZXNvbHZlclwiO1xuaW1wb3J0IHsgZ2V0T2ZmZXJzIH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldE9mZmVyc1Jlc29sdmVyXCI7XG5pbXBvcnQge2dldFByZW1pZXJPZmZlcnN9IGZyb20gXCIuL3Jlc29sdmVycy9HZXRQcmVtaWVyT2ZmZXJzUmVzb2x2ZXJcIjtcblxuLyoqXG4gKiBNYXBwaW5nIG91dCB0aGUgQXBwIFN5bmMgZXZlbnQgdHlwZSwgc28gd2UgY2FuIHVzZSBpdCBhcyBhIHR5cGUgaW4gdGhlIExhbWJkYSBIYW5kbGVyXG4gKi9cbnR5cGUgQXBwU3luY0V2ZW50ID0ge1xuICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmdcbiAgICB9LFxuICAgIGFyZ3VtZW50czoge1xuICAgICAgICBnZXRPZmZlcnNJbnB1dDogR2V0T2ZmZXJzSW5wdXRcbiAgICB9LFxuICAgIGlkZW50aXR5OiB7XG4gICAgICAgIHN1Yjogc3RyaW5nO1xuICAgICAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgIH1cbn1cblxuXG4vKipcbiAqIExhbWJkYSBGdW5jdGlvbiBoYW5kbGVyLCBoYW5kbGluZyBpbmNvbWluZyBldmVudHMsXG4gKiBkZXBlbmRpbmcgb24gdGhlIEFwcFN5bmMgZmllbGQgbmFtZS5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgQXBwU3luYyBldmVudCB0byBiZSBwYXNzZWQgaW4gdGhlIGhhbmRsZXJcbiAqIEByZXR1cm5zIGEge0BsaW5rIFByb21pc2V9IGNvbnRhaW5pbmcgYSB7QGxpbmsgT2ZmZXJzUmVzcG9uc2V9IG9yIHtAbGluayBGaWRlbGlzUGFydG5lclJlc3BvbnNlfVxuICovXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFwcFN5bmNFdmVudCk6IFByb21pc2U8T2ZmZXJzUmVzcG9uc2UgfCBGaWRlbGlzUGFydG5lclJlc3BvbnNlPiA9PiB7XG4gICAgY29uc29sZS5sb2coYFJlY2VpdmVkIG5ldyBvZmZlcnMgZXZlbnQgZm9yIG9wZXJhdGlvbiBbJHtldmVudC5pbmZvLmZpZWxkTmFtZX1dLCB3aXRoIGFyZ3VtZW50cyAke0pTT04uc3RyaW5naWZ5KGV2ZW50LmFyZ3VtZW50cyl9YCk7XG4gICAgc3dpdGNoIChldmVudC5pbmZvLmZpZWxkTmFtZSkge1xuICAgICAgICBjYXNlIFwiZ2V0T2ZmZXJzXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0T2ZmZXJzKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMuZ2V0T2ZmZXJzSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0RmlkZWxpc1BhcnRuZXJzXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0RmlkZWxpc1BhcnRuZXJzKGV2ZW50LmluZm8uZmllbGROYW1lKTtcbiAgICAgICAgY2FzZSBcImdldFByZW1pZXJPZmZlcnNcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRQcmVtaWVyT2ZmZXJzKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMuZ2V0T2ZmZXJzSW5wdXQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYFVuZXhwZWN0ZWQgZmllbGQgbmFtZTogJHtldmVudC5pbmZvLmZpZWxkTmFtZX1gO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgZXJyb3JUeXBlOiBPZmZlcnNFcnJvclR5cGUuVW5leHBlY3RlZEVycm9yXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==