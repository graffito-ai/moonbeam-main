"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateTransactionResolver_1 = require("./resolvers/CreateTransactionResolver");
const GetTransactionResolver_1 = require("./resolvers/GetTransactionResolver");
const GetTransactionByStatusResolver_1 = require("./resolvers/GetTransactionByStatusResolver");
const UpdateTransactionResolver_1 = require("./resolvers/UpdateTransactionResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 * @returns a {@link Promise} containing a {@link MoonbeamTransactionResponse}, {@link MoonbeamTransactionsResponse}, {@link MoonbeamTransactionsByStatusResponse} or {@link MoonbeamUpdatedTransactionResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new transaction event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "createTransaction":
            return await (0, CreateTransactionResolver_1.createTransaction)(event.info.fieldName, event.arguments.createTransactionInput);
        case "updateTransaction":
            return await (0, UpdateTransactionResolver_1.updateTransaction)(event.info.fieldName, event.arguments.updateTransactionInput);
        case "getTransaction":
            return await (0, GetTransactionResolver_1.getTransaction)(event.info.fieldName, event.arguments.getTransactionInput);
        case "getTransactionByStatus":
            return await (0, GetTransactionByStatusResolver_1.getTransactionByStatus)(event.info.fieldName, event.arguments.getTransactionByStatusInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.TransactionsErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQVNtQztBQUNuQyxxRkFBd0U7QUFDeEUsK0VBQWtFO0FBQ2xFLCtGQUFrRjtBQUNsRixxRkFBd0U7QUFxQnhFOzs7Ozs7R0FNRztBQUNILE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQW1CLEVBQW1KLEVBQUU7SUFDN0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpREFBaUQsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekksUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUMxQixLQUFLLG1CQUFtQjtZQUNwQixPQUFPLE1BQU0sSUFBQSw2Q0FBaUIsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDakcsS0FBSyxtQkFBbUI7WUFDcEIsT0FBTyxNQUFNLElBQUEsNkNBQWlCLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ2pHLEtBQUssZ0JBQWdCO1lBQ2pCLE9BQU8sTUFBTSxJQUFBLHVDQUFjLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzNGLEtBQUssd0JBQXdCO1lBQ3pCLE9BQU8sTUFBTSxJQUFBLHVEQUFzQixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUMzRztZQUNJLE1BQU0sWUFBWSxHQUFHLDBCQUEwQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTztnQkFDSCxZQUFZLEVBQUUsWUFBWTtnQkFDMUIsU0FBUyxFQUFFLHVDQUFxQixDQUFDLGVBQWU7YUFDbkQsQ0FBQztLQUNUO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDcmVhdGVUcmFuc2FjdGlvbklucHV0LFxuICAgIEdldFRyYW5zYWN0aW9uQnlTdGF0dXNJbnB1dCxcbiAgICBHZXRUcmFuc2FjdGlvbklucHV0LFxuICAgIE1vb25iZWFtVHJhbnNhY3Rpb25SZXNwb25zZSxcbiAgICBNb29uYmVhbVRyYW5zYWN0aW9uc0J5U3RhdHVzUmVzcG9uc2UsXG4gICAgTW9vbmJlYW1UcmFuc2FjdGlvbnNSZXNwb25zZSwgTW9vbmJlYW1VcGRhdGVkVHJhbnNhY3Rpb25SZXNwb25zZSxcbiAgICBUcmFuc2FjdGlvbnNFcnJvclR5cGUsXG4gICAgVXBkYXRlVHJhbnNhY3Rpb25JbnB1dFxufSBmcm9tIFwiQG1vb25iZWFtL21vb25iZWFtLW1vZGVsc1wiO1xuaW1wb3J0IHtjcmVhdGVUcmFuc2FjdGlvbn0gZnJvbSBcIi4vcmVzb2x2ZXJzL0NyZWF0ZVRyYW5zYWN0aW9uUmVzb2x2ZXJcIjtcbmltcG9ydCB7Z2V0VHJhbnNhY3Rpb259IGZyb20gXCIuL3Jlc29sdmVycy9HZXRUcmFuc2FjdGlvblJlc29sdmVyXCI7XG5pbXBvcnQge2dldFRyYW5zYWN0aW9uQnlTdGF0dXN9IGZyb20gXCIuL3Jlc29sdmVycy9HZXRUcmFuc2FjdGlvbkJ5U3RhdHVzUmVzb2x2ZXJcIjtcbmltcG9ydCB7dXBkYXRlVHJhbnNhY3Rpb259IGZyb20gXCIuL3Jlc29sdmVycy9VcGRhdGVUcmFuc2FjdGlvblJlc29sdmVyXCI7XG5cbi8qKlxuICogTWFwcGluZyBvdXQgdGhlIEFwcCBTeW5jIGV2ZW50IHR5cGUsIHNvIHdlIGNhbiB1c2UgaXQgYXMgYSB0eXBlIGluIHRoZSBMYW1iZGEgSGFuZGxlclxuICovXG50eXBlIEFwcFN5bmNFdmVudCA9IHtcbiAgICBpbmZvOiB7XG4gICAgICAgIGZpZWxkTmFtZTogc3RyaW5nXG4gICAgfSxcbiAgICBhcmd1bWVudHM6IHtcbiAgICAgICAgY3JlYXRlVHJhbnNhY3Rpb25JbnB1dDogQ3JlYXRlVHJhbnNhY3Rpb25JbnB1dCxcbiAgICAgICAgdXBkYXRlVHJhbnNhY3Rpb25JbnB1dDogVXBkYXRlVHJhbnNhY3Rpb25JbnB1dCxcbiAgICAgICAgZ2V0VHJhbnNhY3Rpb25JbnB1dDogR2V0VHJhbnNhY3Rpb25JbnB1dCxcbiAgICAgICAgZ2V0VHJhbnNhY3Rpb25CeVN0YXR1c0lucHV0OiBHZXRUcmFuc2FjdGlvbkJ5U3RhdHVzSW5wdXRcbiAgICB9LFxuICAgIGlkZW50aXR5OiB7XG4gICAgICAgIHN1Yjogc3RyaW5nO1xuICAgICAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgIH1cbn1cblxuLyoqXG4gKiBMYW1iZGEgRnVuY3Rpb24gaGFuZGxlciwgaGFuZGxpbmcgaW5jb21pbmcgZXZlbnRzLFxuICogZGVwZW5kaW5nIG9uIHRoZSBBcHBTeW5jIGZpZWxkIG5hbWUuXG4gKlxuICogQHBhcmFtIGV2ZW50IEFwcFN5bmMgZXZlbnQgdG8gYmUgcGFzc2VkIGluIHRoZSBoYW5kbGVyXG4gKiBAcmV0dXJucyBhIHtAbGluayBQcm9taXNlfSBjb250YWluaW5nIGEge0BsaW5rIE1vb25iZWFtVHJhbnNhY3Rpb25SZXNwb25zZX0sIHtAbGluayBNb29uYmVhbVRyYW5zYWN0aW9uc1Jlc3BvbnNlfSwge0BsaW5rIE1vb25iZWFtVHJhbnNhY3Rpb25zQnlTdGF0dXNSZXNwb25zZX0gb3Ige0BsaW5rIE1vb25iZWFtVXBkYXRlZFRyYW5zYWN0aW9uUmVzcG9uc2V9XG4gKi9cbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudDogQXBwU3luY0V2ZW50KTogUHJvbWlzZTxNb29uYmVhbVRyYW5zYWN0aW9uUmVzcG9uc2UgfCBNb29uYmVhbVRyYW5zYWN0aW9uc1Jlc3BvbnNlIHwgTW9vbmJlYW1UcmFuc2FjdGlvbnNCeVN0YXR1c1Jlc3BvbnNlIHwgTW9vbmJlYW1VcGRhdGVkVHJhbnNhY3Rpb25SZXNwb25zZT4gPT4ge1xuICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCBuZXcgdHJhbnNhY3Rpb24gZXZlbnQgZm9yIG9wZXJhdGlvbiBbJHtldmVudC5pbmZvLmZpZWxkTmFtZX1dLCB3aXRoIGFyZ3VtZW50cyAke0pTT04uc3RyaW5naWZ5KGV2ZW50LmFyZ3VtZW50cyl9YCk7XG4gICAgc3dpdGNoIChldmVudC5pbmZvLmZpZWxkTmFtZSkge1xuICAgICAgICBjYXNlIFwiY3JlYXRlVHJhbnNhY3Rpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVUcmFuc2FjdGlvbihldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmNyZWF0ZVRyYW5zYWN0aW9uSW5wdXQpO1xuICAgICAgICBjYXNlIFwidXBkYXRlVHJhbnNhY3Rpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB1cGRhdGVUcmFuc2FjdGlvbihldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLnVwZGF0ZVRyYW5zYWN0aW9uSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0VHJhbnNhY3Rpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRUcmFuc2FjdGlvbihldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmdldFRyYW5zYWN0aW9uSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0VHJhbnNhY3Rpb25CeVN0YXR1c1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldFRyYW5zYWN0aW9uQnlTdGF0dXMoZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5nZXRUcmFuc2FjdGlvbkJ5U3RhdHVzSW5wdXQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYFVuZXhwZWN0ZWQgZmllbGQgbmFtZTogJHtldmVudC5pbmZvLmZpZWxkTmFtZX1gO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgZXJyb3JUeXBlOiBUcmFuc2FjdGlvbnNFcnJvclR5cGUuVW5leHBlY3RlZEVycm9yXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cblxuIl19