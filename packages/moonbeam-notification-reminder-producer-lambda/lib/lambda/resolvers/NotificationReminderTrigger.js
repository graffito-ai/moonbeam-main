"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.triggerNotificationReminder = void 0;
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const client_sns_1 = require("@aws-sdk/client-sns");
/**
 * Function used to handle the daily notification reminder trigger, by first
 * determining whether a notification reminder needs to be sent out, and by
 * kick-starting that process for any applicable users, accordingly.
 */
const triggerNotificationReminder = async () => {
    try {
        // retrieving the current function region
        const region = process.env.AWS_REGION;
        /**
         * The overall notification reminder cron triggering, will be made up of the following steps:
         *
         * 1) Call the getNotificationReminders AppSync Query API in order to:
         *    - get any ACTIVE REMINDERS
         *    - for any ACTIVE reminders, sort through the ones that need to get triggered
         *
         * 2) For the reminders that are of:
         *    - CARD_LINKING_REMINDER type, call the getUsersWithNoCards
         *    AppSync Query API, in order to get all users to send notification reminders to.
         *
         *    - NEW_MAP_FEATURE_REMINDER type, call the getAllUsersForNotificationReminders AppSync Query
         *    API, in order to get all the users to send notification reminders to.
         *
         *    - VETERANS_DAY_TEMPLATE_1_REMINDER, 2 and 3 Template types, call the getAllUsersForNotificationReminders
         *    AppSync Query API, in order to get all the users to send notification reminders to.
         *
         * 3) For each applicable user from step 2) drop a message into the appropriate SNS topic.
         *
         * 4) Once all users have been notified, then update the card linking reminder accordingly,
         * by calling the updateNotificationReminder AppSync Mutation API.
         *
         */
        const moonbeamClient = new moonbeam_models_1.MoonbeamClient(process.env.ENV_NAME, region);
        // 1) Call the getNotificationReminders Moonbeam AppSync Query API endpoint.
        const notificationReminders = await moonbeamClient.getNotificationReminders();
        // check to see if the get notification reminders call was successful or not.
        if (notificationReminders !== null && notificationReminders !== undefined && !notificationReminders.errorMessage &&
            !notificationReminders.errorType && notificationReminders.data !== null && notificationReminders.data !== undefined &&
            notificationReminders.data.length !== 0) {
            // filter through each ACTIVE notification reminder
            let activeReminderCount = 0;
            for (const reminder of notificationReminders.data) {
                if (reminder.notificationReminderStatus == moonbeam_models_1.NotificationReminderStatus.Active) {
                    //  sort through the ones that need to get triggered
                    const nextTriggerDate = new Date(Date.parse(reminder.nextTriggerAt));
                    const currentDate = new Date(Date.now());
                    if (nextTriggerDate.getDate() === currentDate.getDate() && nextTriggerDate.getMonth() === currentDate.getMonth() &&
                        nextTriggerDate.getFullYear() === currentDate.getFullYear()) {
                        // depending on the type of notifications that we're sending, act accordingly
                        switch (reminder.notificationReminderType) {
                            case moonbeam_models_1.NotificationReminderType.CardLinkingReminder:
                                console.log(`__________________________________________________________________________________________________________________________________`);
                                console.log(`Found new ACTIVE notification reminder ${reminder.id} of type ${moonbeam_models_1.NotificationReminderType.CardLinkingReminder}`);
                                // 2) For any ACTIVE reminders of type CARD_LINKING_REMINDER, call the getUsersWithNoCards Moonbeam AppSync Query API endpoint.
                                const usersWithNoCards = await moonbeamClient.getUsersWithNoCards();
                                // check if the get users with no card call was successful or not.
                                if (usersWithNoCards !== null && usersWithNoCards !== undefined && !usersWithNoCards.errorMessage &&
                                    !usersWithNoCards.errorType && usersWithNoCards.data !== null && usersWithNoCards.data !== undefined &&
                                    usersWithNoCards.data.length !== 0) {
                                    // 3) For each applicable user from step 2) drop a message into the appropriate SNS topic.
                                    let successfulUserMessagesSent = 0;
                                    for (const ineligibleUser of usersWithNoCards.data) {
                                        // initializing the SNS Client
                                        const snsClient = new client_sns_1.SNSClient({ region: region });
                                        /**
                                         * drop the ineligible user input as a message to the notification reminder processing topic
                                         */
                                        const userDetailsForNotifications = {
                                            id: ineligibleUser.id,
                                            email: ineligibleUser.email,
                                            firstName: ineligibleUser.firstName,
                                            lastName: ineligibleUser.lastName,
                                            notificationChannelType: reminder.notificationChannelType,
                                            notificationType: moonbeam_models_1.NotificationType.CardLinkingReminder
                                        };
                                        const notificationReminderReceipt = await snsClient.send(new client_sns_1.PublishCommand({
                                            TopicArn: process.env.NOTIFICATION_REMINDER_PROCESSING_TOPIC_ARN,
                                            Message: JSON.stringify(userDetailsForNotifications),
                                            /**
                                             * the message group id, will be represented by the Moonbeam internal user id, so that we can group the notification reminder update messages for a particular
                                             * user id, and sort them in the FIFO processing topic accordingly.
                                             */
                                            MessageGroupId: ineligibleUser.id
                                        }));
                                        // ensure that the notification reminder message was properly sent to the appropriate processing topic
                                        if (notificationReminderReceipt !== null && notificationReminderReceipt !== undefined && notificationReminderReceipt.MessageId &&
                                            notificationReminderReceipt.MessageId.length !== 0 && notificationReminderReceipt.SequenceNumber && notificationReminderReceipt.SequenceNumber.length !== 0) {
                                            // the notification reminder message has been successfully dropped into the topic, and will be picked up by the notification reminder consumer
                                            console.log(`Notification reminder successfully sent to topic for processing with receipt information: ${notificationReminderReceipt.MessageId} ${notificationReminderReceipt.SequenceNumber}`);
                                            // increase the number of messages sent to the topic
                                            successfulUserMessagesSent += 1;
                                        }
                                        else {
                                            /**
                                             * no need for further actions, since this error will be logged and nothing will execute further.
                                             * in the future we might need some alerts and metrics emitting here
                                             */
                                            console.log(`Unexpected error while sending the notification reminder for user ${ineligibleUser.id}`);
                                        }
                                    }
                                    // check if all applicable users have had successful messages dropped in the notification reminder topic
                                    if (successfulUserMessagesSent === usersWithNoCards.data.length) {
                                        console.log(`__________________________________________________________________________________________________________________________________`);
                                        console.log(`Notification reminder successfully sent for users:\n${JSON.stringify(usersWithNoCards.data)}`);
                                        /**
                                         * 4) Once all users have been notified, then update the card linking reminder accordingly,
                                         * by calling the updateNotificationReminder AppSync Mutation API.
                                         */
                                        const updateNotificationReminderResponse = await moonbeamClient.updateNotificationReminder({
                                            id: reminder.id,
                                            notificationReminderStatus: moonbeam_models_1.NotificationReminderStatus.Active
                                        });
                                        // check if the update notification reminder call was successful or not.
                                        if (updateNotificationReminderResponse !== null && updateNotificationReminderResponse !== undefined &&
                                            !updateNotificationReminderResponse.errorMessage && !updateNotificationReminderResponse.errorType &&
                                            updateNotificationReminderResponse.data !== undefined && updateNotificationReminderResponse.data !== null &&
                                            updateNotificationReminderResponse.data.length !== 0) {
                                            console.log(`Notification reminder ${reminder.id} successfully updated`);
                                        }
                                        else {
                                            /**
                                             * no need for further actions, since this error will be logged and nothing will execute further.
                                             * in the future we might need some alerts and metrics emitting here
                                             */
                                            console.log(`Update notification reminder through UPDATE notification reminder call failed`);
                                        }
                                    }
                                    else {
                                        /**
                                         * no need for further actions, since this error will be logged and nothing will execute further.
                                         * in the future we might need some alerts and metrics emitting here
                                         */
                                        console.log(`Not all applicable users have had notification events dropped in the appropriate topic. Re-process these failed messages accordingly.`);
                                    }
                                }
                                else {
                                    /**
                                     * no need for further actions, since this error will be logged and nothing will execute further.
                                     * in the future we might need some alerts and metrics emitting here
                                     */
                                    console.log(`Users with no cards retrieval through GET users with no cards call failed`);
                                }
                                break;
                            case moonbeam_models_1.NotificationReminderType.VeteransDayTemplate_1Reminder:
                                console.log(`__________________________________________________________________________________________________________________________________`);
                                console.log(`Found new ACTIVE notification reminder ${reminder.id} of type ${moonbeam_models_1.NotificationReminderType.VeteransDayTemplate_1Reminder}`);
                                // 2) For any ACTIVE reminders of type VETERANS_DAY_TEMPLATE_1_REMINDER, call the getAllUsersForNotificationReminders Moonbeam AppSync Query API endpoint.
                                const allUsersForNotificationReminderVeteransDay1 = await moonbeamClient.getAllUsersForNotificationReminders();
                                // check if the get all users for notification reminders call was successful or not.
                                if (allUsersForNotificationReminderVeteransDay1 !== null && allUsersForNotificationReminderVeteransDay1 !== undefined && !allUsersForNotificationReminderVeteransDay1.errorMessage &&
                                    !allUsersForNotificationReminderVeteransDay1.errorType && allUsersForNotificationReminderVeteransDay1.data !== null && allUsersForNotificationReminderVeteransDay1.data !== undefined &&
                                    allUsersForNotificationReminderVeteransDay1.data.length !== 0) {
                                    // 3) For each applicable user from step 2) drop a message into the appropriate SNS topic.
                                    let successfulUserMessagesSent = 0;
                                    for (const user of allUsersForNotificationReminderVeteransDay1.data) {
                                        // initializing the SNS Client
                                        const snsClient = new client_sns_1.SNSClient({ region: region });
                                        /**
                                         * drop the ineligible user input as a message to the notification reminder processing topic
                                         */
                                        const userDetailsForNotifications = {
                                            id: user.id,
                                            email: user.email,
                                            firstName: user.firstName,
                                            lastName: user.lastName,
                                            notificationChannelType: reminder.notificationChannelType,
                                            notificationType: moonbeam_models_1.NotificationType.VeteransDayTemplate_1Reminder
                                        };
                                        const notificationReminderReceipt = await snsClient.send(new client_sns_1.PublishCommand({
                                            TopicArn: process.env.NOTIFICATION_REMINDER_PROCESSING_TOPIC_ARN,
                                            Message: JSON.stringify(userDetailsForNotifications),
                                            /**
                                             * the message group id, will be represented by the Moonbeam internal user id, so that we can group the notification reminder update messages for a particular
                                             * user id, and sort them in the FIFO processing topic accordingly.
                                             */
                                            MessageGroupId: user.id
                                        }));
                                        // ensure that the notification reminder message was properly sent to the appropriate processing topic
                                        if (notificationReminderReceipt !== null && notificationReminderReceipt !== undefined && notificationReminderReceipt.MessageId &&
                                            notificationReminderReceipt.MessageId.length !== 0 && notificationReminderReceipt.SequenceNumber && notificationReminderReceipt.SequenceNumber.length !== 0) {
                                            // the notification reminder message has been successfully dropped into the topic, and will be picked up by the notification reminder consumer
                                            console.log(`Notification reminder successfully sent to topic for processing with receipt information: ${notificationReminderReceipt.MessageId} ${notificationReminderReceipt.SequenceNumber}`);
                                            // increase the number of messages sent to the topic
                                            successfulUserMessagesSent += 1;
                                        }
                                        else {
                                            /**
                                             * no need for further actions, since this error will be logged and nothing will execute further.
                                             * in the future we might need some alerts and metrics emitting here
                                             */
                                            console.log(`Unexpected error while sending the notification reminder for user ${user.id}`);
                                        }
                                    }
                                    // check if all applicable users have had successful messages dropped in the notification reminder topic
                                    if (successfulUserMessagesSent === allUsersForNotificationReminderVeteransDay1.data.length) {
                                        console.log(`__________________________________________________________________________________________________________________________________`);
                                        console.log(`Notification reminder successfully sent for users:\n${JSON.stringify(allUsersForNotificationReminderVeteransDay1.data)}`);
                                        /**
                                         * 4) Once all users have been notified, then update the card linking reminder accordingly,
                                         * by calling the updateNotificationReminder AppSync Mutation API.
                                         */
                                        const updateNotificationReminderResponse = await moonbeamClient.updateNotificationReminder({
                                            id: reminder.id,
                                            notificationReminderStatus: moonbeam_models_1.NotificationReminderStatus.Active
                                        });
                                        // check if the update notification reminder call was successful or not.
                                        if (updateNotificationReminderResponse !== null && updateNotificationReminderResponse !== undefined &&
                                            !updateNotificationReminderResponse.errorMessage && !updateNotificationReminderResponse.errorType &&
                                            updateNotificationReminderResponse.data !== undefined && updateNotificationReminderResponse.data !== null &&
                                            updateNotificationReminderResponse.data.length !== 0) {
                                            console.log(`Notification reminder ${reminder.id} successfully updated`);
                                        }
                                        else {
                                            /**
                                             * no need for further actions, since this error will be logged and nothing will execute further.
                                             * in the future we might need some alerts and metrics emitting here
                                             */
                                            console.log(`Update notification reminder through UPDATE notification reminder call failed`);
                                        }
                                    }
                                    else {
                                        /**
                                         * no need for further actions, since this error will be logged and nothing will execute further.
                                         * in the future we might need some alerts and metrics emitting here
                                         */
                                        console.log(`Not all applicable users have had notification events dropped in the appropriate topic. Re-process these failed messages accordingly.`);
                                    }
                                }
                                else {
                                    /**
                                     * no need for further actions, since this error will be logged and nothing will execute further.
                                     * in the future we might need some alerts and metrics emitting here
                                     */
                                    console.log(`Users for notification reminders retrieval through GET all users for notification reminders call failed`);
                                }
                                break;
                            case moonbeam_models_1.NotificationReminderType.VeteransDayTemplate_2Reminder:
                                console.log(`__________________________________________________________________________________________________________________________________`);
                                console.log(`Found new ACTIVE notification reminder ${reminder.id} of type ${moonbeam_models_1.NotificationReminderType.VeteransDayTemplate_2Reminder}`);
                                // 2) For any ACTIVE reminders of type VETERANS_DAY_TEMPLATE_2_REMINDER, call the getAllUsersForNotificationReminders Moonbeam AppSync Query API endpoint.
                                const allUsersForNotificationReminderVeteransDay2 = await moonbeamClient.getAllUsersForNotificationReminders();
                                // check if the get all users for notification reminders call was successful or not.
                                if (allUsersForNotificationReminderVeteransDay2 !== null && allUsersForNotificationReminderVeteransDay2 !== undefined && !allUsersForNotificationReminderVeteransDay2.errorMessage &&
                                    !allUsersForNotificationReminderVeteransDay2.errorType && allUsersForNotificationReminderVeteransDay2.data !== null && allUsersForNotificationReminderVeteransDay2.data !== undefined &&
                                    allUsersForNotificationReminderVeteransDay2.data.length !== 0) {
                                    // 3) For each applicable user from step 2) drop a message into the appropriate SNS topic.
                                    let successfulUserMessagesSent = 0;
                                    for (const user of allUsersForNotificationReminderVeteransDay2.data) {
                                        // initializing the SNS Client
                                        const snsClient = new client_sns_1.SNSClient({ region: region });
                                        /**
                                         * drop the ineligible user input as a message to the notification reminder processing topic
                                         */
                                        const userDetailsForNotifications = {
                                            id: user.id,
                                            email: user.email,
                                            firstName: user.firstName,
                                            lastName: user.lastName,
                                            notificationChannelType: reminder.notificationChannelType,
                                            notificationType: moonbeam_models_1.NotificationType.VeteransDayTemplate_2Reminder
                                        };
                                        const notificationReminderReceipt = await snsClient.send(new client_sns_1.PublishCommand({
                                            TopicArn: process.env.NOTIFICATION_REMINDER_PROCESSING_TOPIC_ARN,
                                            Message: JSON.stringify(userDetailsForNotifications),
                                            /**
                                             * the message group id, will be represented by the Moonbeam internal user id, so that we can group the notification reminder update messages for a particular
                                             * user id, and sort them in the FIFO processing topic accordingly.
                                             */
                                            MessageGroupId: user.id
                                        }));
                                        // ensure that the notification reminder message was properly sent to the appropriate processing topic
                                        if (notificationReminderReceipt !== null && notificationReminderReceipt !== undefined && notificationReminderReceipt.MessageId &&
                                            notificationReminderReceipt.MessageId.length !== 0 && notificationReminderReceipt.SequenceNumber && notificationReminderReceipt.SequenceNumber.length !== 0) {
                                            // the notification reminder message has been successfully dropped into the topic, and will be picked up by the notification reminder consumer
                                            console.log(`Notification reminder successfully sent to topic for processing with receipt information: ${notificationReminderReceipt.MessageId} ${notificationReminderReceipt.SequenceNumber}`);
                                            // increase the number of messages sent to the topic
                                            successfulUserMessagesSent += 1;
                                        }
                                        else {
                                            /**
                                             * no need for further actions, since this error will be logged and nothing will execute further.
                                             * in the future we might need some alerts and metrics emitting here
                                             */
                                            console.log(`Unexpected error while sending the notification reminder for user ${user.id}`);
                                        }
                                    }
                                    // check if all applicable users have had successful messages dropped in the notification reminder topic
                                    if (successfulUserMessagesSent === allUsersForNotificationReminderVeteransDay2.data.length) {
                                        console.log(`__________________________________________________________________________________________________________________________________`);
                                        console.log(`Notification reminder successfully sent for users:\n${JSON.stringify(allUsersForNotificationReminderVeteransDay2.data)}`);
                                        /**
                                         * 4) Once all users have been notified, then update the card linking reminder accordingly,
                                         * by calling the updateNotificationReminder AppSync Mutation API.
                                         */
                                        const updateNotificationReminderResponse = await moonbeamClient.updateNotificationReminder({
                                            id: reminder.id,
                                            notificationReminderStatus: moonbeam_models_1.NotificationReminderStatus.Active
                                        });
                                        // check if the update notification reminder call was successful or not.
                                        if (updateNotificationReminderResponse !== null && updateNotificationReminderResponse !== undefined &&
                                            !updateNotificationReminderResponse.errorMessage && !updateNotificationReminderResponse.errorType &&
                                            updateNotificationReminderResponse.data !== undefined && updateNotificationReminderResponse.data !== null &&
                                            updateNotificationReminderResponse.data.length !== 0) {
                                            console.log(`Notification reminder ${reminder.id} successfully updated`);
                                        }
                                        else {
                                            /**
                                             * no need for further actions, since this error will be logged and nothing will execute further.
                                             * in the future we might need some alerts and metrics emitting here
                                             */
                                            console.log(`Update notification reminder through UPDATE notification reminder call failed`);
                                        }
                                    }
                                    else {
                                        /**
                                         * no need for further actions, since this error will be logged and nothing will execute further.
                                         * in the future we might need some alerts and metrics emitting here
                                         */
                                        console.log(`Not all applicable users have had notification events dropped in the appropriate topic. Re-process these failed messages accordingly.`);
                                    }
                                }
                                else {
                                    /**
                                     * no need for further actions, since this error will be logged and nothing will execute further.
                                     * in the future we might need some alerts and metrics emitting here
                                     */
                                    console.log(`Users for notification reminders retrieval through GET all users for notification reminders call failed`);
                                }
                                break;
                            case moonbeam_models_1.NotificationReminderType.VeteransDayTemplate_3Reminder:
                                console.log(`__________________________________________________________________________________________________________________________________`);
                                console.log(`Found new ACTIVE notification reminder ${reminder.id} of type ${moonbeam_models_1.NotificationReminderType.VeteransDayTemplate_3Reminder}`);
                                // 2) For any ACTIVE reminders of type VETERANS_DAY_TEMPLATE_3_REMINDER, call the getAllUsersForNotificationReminders Moonbeam AppSync Query API endpoint.
                                const allUsersForNotificationReminderVeteransDay3 = await moonbeamClient.getAllUsersForNotificationReminders();
                                // check if the get all users for notification reminders call was successful or not.
                                if (allUsersForNotificationReminderVeteransDay3 !== null && allUsersForNotificationReminderVeteransDay3 !== undefined && !allUsersForNotificationReminderVeteransDay3.errorMessage &&
                                    !allUsersForNotificationReminderVeteransDay3.errorType && allUsersForNotificationReminderVeteransDay3.data !== null && allUsersForNotificationReminderVeteransDay3.data !== undefined &&
                                    allUsersForNotificationReminderVeteransDay3.data.length !== 0) {
                                    // 3) For each applicable user from step 2) drop a message into the appropriate SNS topic.
                                    let successfulUserMessagesSent = 0;
                                    for (const user of allUsersForNotificationReminderVeteransDay3.data) {
                                        // initializing the SNS Client
                                        const snsClient = new client_sns_1.SNSClient({ region: region });
                                        /**
                                         * drop the ineligible user input as a message to the notification reminder processing topic
                                         */
                                        const userDetailsForNotifications = {
                                            id: user.id,
                                            email: user.email,
                                            firstName: user.firstName,
                                            lastName: user.lastName,
                                            notificationChannelType: reminder.notificationChannelType,
                                            notificationType: moonbeam_models_1.NotificationType.VeteransDayTemplate_3Reminder
                                        };
                                        const notificationReminderReceipt = await snsClient.send(new client_sns_1.PublishCommand({
                                            TopicArn: process.env.NOTIFICATION_REMINDER_PROCESSING_TOPIC_ARN,
                                            Message: JSON.stringify(userDetailsForNotifications),
                                            /**
                                             * the message group id, will be represented by the Moonbeam internal user id, so that we can group the notification reminder update messages for a particular
                                             * user id, and sort them in the FIFO processing topic accordingly.
                                             */
                                            MessageGroupId: user.id
                                        }));
                                        // ensure that the notification reminder message was properly sent to the appropriate processing topic
                                        if (notificationReminderReceipt !== null && notificationReminderReceipt !== undefined && notificationReminderReceipt.MessageId &&
                                            notificationReminderReceipt.MessageId.length !== 0 && notificationReminderReceipt.SequenceNumber && notificationReminderReceipt.SequenceNumber.length !== 0) {
                                            // the notification reminder message has been successfully dropped into the topic, and will be picked up by the notification reminder consumer
                                            console.log(`Notification reminder successfully sent to topic for processing with receipt information: ${notificationReminderReceipt.MessageId} ${notificationReminderReceipt.SequenceNumber}`);
                                            // increase the number of messages sent to the topic
                                            successfulUserMessagesSent += 1;
                                        }
                                        else {
                                            /**
                                             * no need for further actions, since this error will be logged and nothing will execute further.
                                             * in the future we might need some alerts and metrics emitting here
                                             */
                                            console.log(`Unexpected error while sending the notification reminder for user ${user.id}`);
                                        }
                                    }
                                    // check if all applicable users have had successful messages dropped in the notification reminder topic
                                    if (successfulUserMessagesSent === allUsersForNotificationReminderVeteransDay3.data.length) {
                                        console.log(`__________________________________________________________________________________________________________________________________`);
                                        console.log(`Notification reminder successfully sent for users:\n${JSON.stringify(allUsersForNotificationReminderVeteransDay3.data)}`);
                                        /**
                                         * 4) Once all users have been notified, then update the card linking reminder accordingly,
                                         * by calling the updateNotificationReminder AppSync Mutation API.
                                         */
                                        const updateNotificationReminderResponse = await moonbeamClient.updateNotificationReminder({
                                            id: reminder.id,
                                            notificationReminderStatus: moonbeam_models_1.NotificationReminderStatus.Active
                                        });
                                        // check if the update notification reminder call was successful or not.
                                        if (updateNotificationReminderResponse !== null && updateNotificationReminderResponse !== undefined &&
                                            !updateNotificationReminderResponse.errorMessage && !updateNotificationReminderResponse.errorType &&
                                            updateNotificationReminderResponse.data !== undefined && updateNotificationReminderResponse.data !== null &&
                                            updateNotificationReminderResponse.data.length !== 0) {
                                            console.log(`Notification reminder ${reminder.id} successfully updated`);
                                        }
                                        else {
                                            /**
                                             * no need for further actions, since this error will be logged and nothing will execute further.
                                             * in the future we might need some alerts and metrics emitting here
                                             */
                                            console.log(`Update notification reminder through UPDATE notification reminder call failed`);
                                        }
                                    }
                                    else {
                                        /**
                                         * no need for further actions, since this error will be logged and nothing will execute further.
                                         * in the future we might need some alerts and metrics emitting here
                                         */
                                        console.log(`Not all applicable users have had notification events dropped in the appropriate topic. Re-process these failed messages accordingly.`);
                                    }
                                }
                                else {
                                    /**
                                     * no need for further actions, since this error will be logged and nothing will execute further.
                                     * in the future we might need some alerts and metrics emitting here
                                     */
                                    console.log(`Users for notification reminders retrieval through GET all users for notification reminders call failed`);
                                }
                                break;
                            case moonbeam_models_1.NotificationReminderType.NewMapFeatureReminder:
                                console.log(`__________________________________________________________________________________________________________________________________`);
                                console.log(`Found new ACTIVE notification reminder ${reminder.id} of type ${moonbeam_models_1.NotificationReminderType.NewMapFeatureReminder}`);
                                // 2) For any ACTIVE reminders of type NEW_MAP_FEATURE_REMINDER, call the getAllUsersForNotificationReminders Moonbeam AppSync Query API endpoint.
                                const allUsersForNotificationReminder = await moonbeamClient.getAllUsersForNotificationReminders();
                                // check if the get all users for notification reminders call was successful or not.
                                if (allUsersForNotificationReminder !== null && allUsersForNotificationReminder !== undefined && !allUsersForNotificationReminder.errorMessage &&
                                    !allUsersForNotificationReminder.errorType && allUsersForNotificationReminder.data !== null && allUsersForNotificationReminder.data !== undefined &&
                                    allUsersForNotificationReminder.data.length !== 0) {
                                    // 3) For each applicable user from step 2) drop a message into the appropriate SNS topic.
                                    let successfulUserMessagesSent = 0;
                                    for (const user of allUsersForNotificationReminder.data) {
                                        // initializing the SNS Client
                                        const snsClient = new client_sns_1.SNSClient({ region: region });
                                        /**
                                         * drop the ineligible user input as a message to the notification reminder processing topic
                                         */
                                        const userDetailsForNotifications = {
                                            id: user.id,
                                            email: user.email,
                                            firstName: user.firstName,
                                            lastName: user.lastName,
                                            notificationChannelType: reminder.notificationChannelType,
                                            notificationType: moonbeam_models_1.NotificationType.NewMapFeatureReminder
                                        };
                                        const notificationReminderReceipt = await snsClient.send(new client_sns_1.PublishCommand({
                                            TopicArn: process.env.NOTIFICATION_REMINDER_PROCESSING_TOPIC_ARN,
                                            Message: JSON.stringify(userDetailsForNotifications),
                                            /**
                                             * the message group id, will be represented by the Moonbeam internal user id, so that we can group the notification reminder update messages for a particular
                                             * user id, and sort them in the FIFO processing topic accordingly.
                                             */
                                            MessageGroupId: user.id
                                        }));
                                        // ensure that the notification reminder message was properly sent to the appropriate processing topic
                                        if (notificationReminderReceipt !== null && notificationReminderReceipt !== undefined && notificationReminderReceipt.MessageId &&
                                            notificationReminderReceipt.MessageId.length !== 0 && notificationReminderReceipt.SequenceNumber && notificationReminderReceipt.SequenceNumber.length !== 0) {
                                            // the notification reminder message has been successfully dropped into the topic, and will be picked up by the notification reminder consumer
                                            console.log(`Notification reminder successfully sent to topic for processing with receipt information: ${notificationReminderReceipt.MessageId} ${notificationReminderReceipt.SequenceNumber}`);
                                            // increase the number of messages sent to the topic
                                            successfulUserMessagesSent += 1;
                                        }
                                        else {
                                            /**
                                             * no need for further actions, since this error will be logged and nothing will execute further.
                                             * in the future we might need some alerts and metrics emitting here
                                             */
                                            console.log(`Unexpected error while sending the notification reminder for user ${user.id}`);
                                        }
                                    }
                                    // check if all applicable users have had successful messages dropped in the notification reminder topic
                                    if (successfulUserMessagesSent === allUsersForNotificationReminder.data.length) {
                                        console.log(`__________________________________________________________________________________________________________________________________`);
                                        console.log(`Notification reminder successfully sent for users:\n${JSON.stringify(allUsersForNotificationReminder.data)}`);
                                        /**
                                         * 4) Once all users have been notified, then update the card linking reminder accordingly,
                                         * by calling the updateNotificationReminder AppSync Mutation API.
                                         */
                                        const updateNotificationReminderResponse = await moonbeamClient.updateNotificationReminder({
                                            id: reminder.id,
                                            notificationReminderStatus: moonbeam_models_1.NotificationReminderStatus.Active
                                        });
                                        // check if the update notification reminder call was successful or not.
                                        if (updateNotificationReminderResponse !== null && updateNotificationReminderResponse !== undefined &&
                                            !updateNotificationReminderResponse.errorMessage && !updateNotificationReminderResponse.errorType &&
                                            updateNotificationReminderResponse.data !== undefined && updateNotificationReminderResponse.data !== null &&
                                            updateNotificationReminderResponse.data.length !== 0) {
                                            console.log(`Notification reminder ${reminder.id} successfully updated`);
                                        }
                                        else {
                                            /**
                                             * no need for further actions, since this error will be logged and nothing will execute further.
                                             * in the future we might need some alerts and metrics emitting here
                                             */
                                            console.log(`Update notification reminder through UPDATE notification reminder call failed`);
                                        }
                                    }
                                    else {
                                        /**
                                         * no need for further actions, since this error will be logged and nothing will execute further.
                                         * in the future we might need some alerts and metrics emitting here
                                         */
                                        console.log(`Not all applicable users have had notification events dropped in the appropriate topic. Re-process these failed messages accordingly.`);
                                    }
                                }
                                else {
                                    /**
                                     * no need for further actions, since this error will be logged and nothing will execute further.
                                     * in the future we might need some alerts and metrics emitting here
                                     */
                                    console.log(`Users for notification reminders retrieval through GET all users for notification reminders call failed`);
                                }
                                break;
                            default:
                                console.log(`Unknown notification reminder type passed in for ACTIVE reminder ${reminder.notificationReminderType}`);
                        }
                        activeReminderCount += 1;
                    }
                }
            }
            console.log(`__________________________________________________________________________________________________________________________________`);
            console.log(`Ran trigger for Notification Reminders at ${new Date(Date.now()).toISOString()}, and found ${activeReminderCount} ACTIVE reminders`);
        }
        else {
            /**
             * no need for further actions, since this error will be logged and nothing will execute further.
             * in the future we might need some alerts and metrics emitting here
             */
            console.log(`Notification Reminder retrieval through GET notification reminders call failed`);
        }
    }
    catch (error) {
        /**
         * no need for further actions, since this error will be logged and nothing will execute further.
         * in the future we might need some alerts and metrics emitting here
         */
        console.log(`Unexpected error while processing the notification reminder cron event ${error}`);
    }
};
exports.triggerNotificationReminder = triggerNotificationReminder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm90aWZpY2F0aW9uUmVtaW5kZXJUcmlnZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xhbWJkYS9yZXNvbHZlcnMvTm90aWZpY2F0aW9uUmVtaW5kZXJUcmlnZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLCtEQVNtQztBQUNuQyxvREFBOEQ7QUFFOUQ7Ozs7R0FJRztBQUNJLE1BQU0sMkJBQTJCLEdBQUcsS0FBSyxJQUFtQixFQUFFO0lBQ2pFLElBQUk7UUFDQSx5Q0FBeUM7UUFDekMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFXLENBQUM7UUFFdkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FzQkc7UUFDSCxNQUFNLGNBQWMsR0FBRyxJQUFJLGdDQUFjLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFekUsNEVBQTRFO1FBQzVFLE1BQU0scUJBQXFCLEdBQWlDLE1BQU0sY0FBYyxDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFFNUcsNkVBQTZFO1FBQzdFLElBQUkscUJBQXFCLEtBQUssSUFBSSxJQUFJLHFCQUFxQixLQUFLLFNBQVMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVk7WUFDNUcsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLElBQUkscUJBQXFCLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLEtBQUssU0FBUztZQUNuSCxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN6QyxtREFBbUQ7WUFDbkQsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLENBQUM7WUFDNUIsS0FBSyxNQUFNLFFBQVEsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLEVBQUU7Z0JBQy9DLElBQUksUUFBUyxDQUFDLDBCQUEwQixJQUFJLDRDQUEwQixDQUFDLE1BQU0sRUFBRTtvQkFDM0Usb0RBQW9EO29C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Q0FBQyx1SUFBdUksQ0FBQyxDQUFDO3FDQUN4SjtpQ0FDSjtxQ0FBTTtvQ0FDSDs7O3VDQUdHO29DQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMseUdBQXlHLENBQUMsQ0FBQztpQ0FDMUg7Z0NBQ0QsTUFBTTs0QkFDVjtnQ0FDSSxPQUFPLENBQUMsR0FBRyxDQUFDLG9FQUFvRSxRQUFTLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDO3lCQUM3SDt3QkFDRCxtQkFBbUIsSUFBSSxDQUFDLENBQUM7cUJBQzVCO2lCQUNKO2FBQ0o7WUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLG9JQUFvSSxDQUFDLENBQUM7WUFDbEosT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLGVBQWUsbUJBQW1CLG1CQUFtQixDQUFDLENBQUM7U0FDcko7YUFBTTtZQUNIOzs7ZUFHRztZQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0ZBQWdGLENBQUMsQ0FBQztTQUNqRztLQUNKO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDWjs7O1dBR0c7UUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLDBFQUEwRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQ2xHO0FBQ0wsQ0FBQyxDQUFBO0FBamlCWSxRQUFBLDJCQUEyQiwrQkFpaUJ2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgSW5lbGlnaWJsZUxpbmtlZFVzZXJzUmVzcG9uc2UsXG4gICAgTW9vbmJlYW1DbGllbnQsXG4gICAgTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSxcbiAgICBOb3RpZmljYXRpb25SZW1pbmRlclN0YXR1cyxcbiAgICBOb3RpZmljYXRpb25SZW1pbmRlclR5cGUsXG4gICAgTm90aWZpY2F0aW9uVHlwZSxcbiAgICBVc2VyRGV0YWlsc0Zvck5vdGlmaWNhdGlvbnMsXG4gICAgVXNlckZvck5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2Vcbn0gZnJvbSBcIkBtb29uYmVhbS9tb29uYmVhbS1tb2RlbHNcIjtcbmltcG9ydCB7UHVibGlzaENvbW1hbmQsIFNOU0NsaWVudH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zbnNcIjtcblxuLyoqXG4gKiBGdW5jdGlvbiB1c2VkIHRvIGhhbmRsZSB0aGUgZGFpbHkgbm90aWZpY2F0aW9uIHJlbWluZGVyIHRyaWdnZXIsIGJ5IGZpcnN0XG4gKiBkZXRlcm1pbmluZyB3aGV0aGVyIGEgbm90aWZpY2F0aW9uIHJlbWluZGVyIG5lZWRzIHRvIGJlIHNlbnQgb3V0LCBhbmQgYnlcbiAqIGtpY2stc3RhcnRpbmcgdGhhdCBwcm9jZXNzIGZvciBhbnkgYXBwbGljYWJsZSB1c2VycywgYWNjb3JkaW5nbHkuXG4gKi9cbmV4cG9ydCBjb25zdCB0cmlnZ2VyTm90aWZpY2F0aW9uUmVtaW5kZXIgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gcmV0cmlldmluZyB0aGUgY3VycmVudCBmdW5jdGlvbiByZWdpb25cbiAgICAgICAgY29uc3QgcmVnaW9uID0gcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTiE7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBvdmVyYWxsIG5vdGlmaWNhdGlvbiByZW1pbmRlciBjcm9uIHRyaWdnZXJpbmcsIHdpbGwgYmUgbWFkZSB1cCBvZiB0aGUgZm9sbG93aW5nIHN0ZXBzOlxuICAgICAgICAgKlxuICAgICAgICAgKiAxKSBDYWxsIHRoZSBnZXROb3RpZmljYXRpb25SZW1pbmRlcnMgQXBwU3luYyBRdWVyeSBBUEkgaW4gb3JkZXIgdG86XG4gICAgICAgICAqICAgIC0gZ2V0IGFueSBBQ1RJVkUgUkVNSU5ERVJTXG4gICAgICAgICAqICAgIC0gZm9yIGFueSBBQ1RJVkUgcmVtaW5kZXJzLCBzb3J0IHRocm91Z2ggdGhlIG9uZXMgdGhhdCBuZWVkIHRvIGdldCB0cmlnZ2VyZWRcbiAgICAgICAgICpcbiAgICAgICAgICogMikgRm9yIHRoZSByZW1pbmRlcnMgdGhhdCBhcmUgb2Y6XG4gICAgICAgICAqICAgIC0gQ0FSRF9MSU5LSU5HX1JFTUlOREVSIHR5cGUsIGNhbGwgdGhlIGdldFVzZXJzV2l0aE5vQ2FyZHNcbiAgICAgICAgICogICAgQXBwU3luYyBRdWVyeSBBUEksIGluIG9yZGVyIHRvIGdldCBhbGwgdXNlcnMgdG8gc2VuZCBub3RpZmljYXRpb24gcmVtaW5kZXJzIHRvLlxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAtIE5FV19NQVBfRkVBVFVSRV9SRU1JTkRFUiB0eXBlLCBjYWxsIHRoZSBnZXRBbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVycyBBcHBTeW5jIFF1ZXJ5XG4gICAgICAgICAqICAgIEFQSSwgaW4gb3JkZXIgdG8gZ2V0IGFsbCB0aGUgdXNlcnMgdG8gc2VuZCBub3RpZmljYXRpb24gcmVtaW5kZXJzIHRvLlxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAtIFZFVEVSQU5TX0RBWV9URU1QTEFURV8xX1JFTUlOREVSLCAyIGFuZCAzIFRlbXBsYXRlIHR5cGVzLCBjYWxsIHRoZSBnZXRBbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyc1xuICAgICAgICAgKiAgICBBcHBTeW5jIFF1ZXJ5IEFQSSwgaW4gb3JkZXIgdG8gZ2V0IGFsbCB0aGUgdXNlcnMgdG8gc2VuZCBub3RpZmljYXRpb24gcmVtaW5kZXJzIHRvLlxuICAgICAgICAgKlxuICAgICAgICAgKiAzKSBGb3IgZWFjaCBhcHBsaWNhYmxlIHVzZXIgZnJvbSBzdGVwIDIpIGRyb3AgYSBtZXNzYWdlIGludG8gdGhlIGFwcHJvcHJpYXRlIFNOUyB0b3BpYy5cbiAgICAgICAgICpcbiAgICAgICAgICogNCkgT25jZSBhbGwgdXNlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLCB0aGVuIHVwZGF0ZSB0aGUgY2FyZCBsaW5raW5nIHJlbWluZGVyIGFjY29yZGluZ2x5LFxuICAgICAgICAgKiBieSBjYWxsaW5nIHRoZSB1cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlciBBcHBTeW5jIE11dGF0aW9uIEFQSS5cbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IG1vb25iZWFtQ2xpZW50ID0gbmV3IE1vb25iZWFtQ2xpZW50KHByb2Nlc3MuZW52LkVOVl9OQU1FISwgcmVnaW9uKTtcblxuICAgICAgICAvLyAxKSBDYWxsIHRoZSBnZXROb3RpZmljYXRpb25SZW1pbmRlcnMgTW9vbmJlYW0gQXBwU3luYyBRdWVyeSBBUEkgZW5kcG9pbnQuXG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvblJlbWluZGVyczogTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSA9IGF3YWl0IG1vb25iZWFtQ2xpZW50LmdldE5vdGlmaWNhdGlvblJlbWluZGVycygpO1xuXG4gICAgICAgIC8vIGNoZWNrIHRvIHNlZSBpZiB0aGUgZ2V0IG5vdGlmaWNhdGlvbiByZW1pbmRlcnMgY2FsbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuXG4gICAgICAgIGlmIChub3RpZmljYXRpb25SZW1pbmRlcnMgIT09IG51bGwgJiYgbm90aWZpY2F0aW9uUmVtaW5kZXJzICE9PSB1bmRlZmluZWQgJiYgIW5vdGlmaWNhdGlvblJlbWluZGVycy5lcnJvck1lc3NhZ2UgJiZcbiAgICAgICAgICAgICFub3RpZmljYXRpb25SZW1pbmRlcnMuZXJyb3JUeXBlICYmIG5vdGlmaWNhdGlvblJlbWluZGVycy5kYXRhICE9PSBudWxsICYmIG5vdGlmaWNhdGlvblJlbWluZGVycy5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvblJlbWluZGVycy5kYXRhLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgLy8gZmlsdGVyIHRocm91Z2ggZWFjaCBBQ1RJVkUgbm90aWZpY2F0aW9uIHJlbWluZGVyXG4gICAgICAgICAgICBsZXQgYWN0aXZlUmVtaW5kZXJDb3VudCA9IDA7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlbWluZGVyIG9mIG5vdGlmaWNhdGlvblJlbWluZGVycy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlbWluZGVyIS5ub3RpZmljYXRpb25SZW1pbmRlclN0YXR1cyA9PSBOb3RpZmljYXRpb25SZW1pbmRlclN0YXR1cy5BY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gIHNvcnQgdGhyb3VnaCB0aGUgb25lcyB0aGF0IG5lZWQgdG8gZ2V0IHRyaWdnZXJlZFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0VHJpZ2dlckRhdGU6IERhdGUgPSBuZXcgRGF0ZShEYXRlLnBhcnNlKHJlbWluZGVyIS5uZXh0VHJpZ2dlckF0KSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXRlOiBEYXRlID0gbmV3IERhdGUoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0VHJpZ2dlckRhdGUuZ2V0RGF0ZSgpID09PSBjdXJyZW50RGF0ZS5nZXREYXRlKCkgJiYgbmV4dFRyaWdnZXJEYXRlLmdldE1vbnRoKCkgPT09IGN1cnJlbnREYXRlLmdldE1vbnRoKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUcmlnZ2VyRGF0ZS5nZXRGdWxsWWVhcigpID09PSBjdXJyZW50RGF0ZS5nZXRGdWxsWWVhcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2Ygbm90aWZpY2F0aW9ucyB0aGF0IHdlJ3JlIHNlbmRpbmcsIGFjdCBhY2NvcmRpbmdseVxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChyZW1pbmRlciEubm90aWZpY2F0aW9uUmVtaW5kZXJUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25SZW1pbmRlclR5cGUuQ2FyZExpbmtpbmdSZW1pbmRlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEZvdW5kIG5ldyBBQ1RJVkUgbm90aWZpY2F0aW9uIHJlbWluZGVyICR7cmVtaW5kZXIhLmlkfSBvZiB0eXBlICR7Tm90aWZpY2F0aW9uUmVtaW5kZXJUeXBlLkNhcmRMaW5raW5nUmVtaW5kZXJ9YCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMikgRm9yIGFueSBBQ1RJVkUgcmVtaW5kZXJzIG9mIHR5cGUgQ0FSRF9MSU5LSU5HX1JFTUlOREVSLCBjYWxsIHRoZSBnZXRVc2Vyc1dpdGhOb0NhcmRzIE1vb25iZWFtIEFwcFN5bmMgUXVlcnkgQVBJIGVuZHBvaW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2Vyc1dpdGhOb0NhcmRzOiBJbmVsaWdpYmxlTGlua2VkVXNlcnNSZXNwb25zZSA9IGF3YWl0IG1vb25iZWFtQ2xpZW50LmdldFVzZXJzV2l0aE5vQ2FyZHMoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgZ2V0IHVzZXJzIHdpdGggbm8gY2FyZCBjYWxsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJzV2l0aE5vQ2FyZHMgIT09IG51bGwgJiYgdXNlcnNXaXRoTm9DYXJkcyAhPT0gdW5kZWZpbmVkICYmICF1c2Vyc1dpdGhOb0NhcmRzLmVycm9yTWVzc2FnZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIXVzZXJzV2l0aE5vQ2FyZHMuZXJyb3JUeXBlICYmIHVzZXJzV2l0aE5vQ2FyZHMuZGF0YSAhPT0gbnVsbCAmJiB1c2Vyc1dpdGhOb0NhcmRzLmRhdGEgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnNXaXRoTm9DYXJkcy5kYXRhLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMykgRm9yIGVhY2ggYXBwbGljYWJsZSB1c2VyIGZyb20gc3RlcCAyKSBkcm9wIGEgbWVzc2FnZSBpbnRvIHRoZSBhcHByb3ByaWF0ZSBTTlMgdG9waWMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3VjY2Vzc2Z1bFVzZXJNZXNzYWdlc1NlbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpbmVsaWdpYmxlVXNlciBvZiB1c2Vyc1dpdGhOb0NhcmRzLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXppbmcgdGhlIFNOUyBDbGllbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbnNDbGllbnQgPSBuZXcgU05TQ2xpZW50KHtyZWdpb246IHJlZ2lvbn0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogZHJvcCB0aGUgaW5lbGlnaWJsZSB1c2VyIGlucHV0IGFzIGEgbWVzc2FnZSB0byB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIHByb2Nlc3NpbmcgdG9waWNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VyRGV0YWlsc0Zvck5vdGlmaWNhdGlvbnM6IFVzZXJEZXRhaWxzRm9yTm90aWZpY2F0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGluZWxpZ2libGVVc2VyIS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGluZWxpZ2libGVVc2VyIS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROYW1lOiBpbmVsaWdpYmxlVXNlciEuZmlyc3ROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TmFtZTogaW5lbGlnaWJsZVVzZXIhLmxhc3ROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25DaGFubmVsVHlwZTogcmVtaW5kZXIhLm5vdGlmaWNhdGlvbkNoYW5uZWxUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25UeXBlOiBOb3RpZmljYXRpb25UeXBlLkNhcmRMaW5raW5nUmVtaW5kZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0ID0gYXdhaXQgc25zQ2xpZW50LnNlbmQobmV3IFB1Ymxpc2hDb21tYW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG9waWNBcm46IHByb2Nlc3MuZW52Lk5PVElGSUNBVElPTl9SRU1JTkRFUl9QUk9DRVNTSU5HX1RPUElDX0FSTiEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2U6IEpTT04uc3RyaW5naWZ5KHVzZXJEZXRhaWxzRm9yTm90aWZpY2F0aW9ucyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiB0aGUgbWVzc2FnZSBncm91cCBpZCwgd2lsbCBiZSByZXByZXNlbnRlZCBieSB0aGUgTW9vbmJlYW0gaW50ZXJuYWwgdXNlciBpZCwgc28gdGhhdCB3ZSBjYW4gZ3JvdXAgdGhlIG5vdGlmaWNhdGlvbiByZW1pbmRlciB1cGRhdGUgbWVzc2FnZXMgZm9yIGEgcGFydGljdWxhclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiB1c2VyIGlkLCBhbmQgc29ydCB0aGVtIGluIHRoZSBGSUZPIHByb2Nlc3NpbmcgdG9waWMgYWNjb3JkaW5nbHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlR3JvdXBJZDogaW5lbGlnaWJsZVVzZXIhLmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIHRoYXQgdGhlIG5vdGlmaWNhdGlvbiByZW1pbmRlciBtZXNzYWdlIHdhcyBwcm9wZXJseSBzZW50IHRvIHRoZSBhcHByb3ByaWF0ZSBwcm9jZXNzaW5nIHRvcGljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvblJlbWluZGVyUmVjZWlwdCAhPT0gbnVsbCAmJiBub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQgIT09IHVuZGVmaW5lZCAmJiBub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQuTWVzc2FnZUlkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblJlbWluZGVyUmVjZWlwdC5NZXNzYWdlSWQubGVuZ3RoICE9PSAwICYmIG5vdGlmaWNhdGlvblJlbWluZGVyUmVjZWlwdC5TZXF1ZW5jZU51bWJlciAmJiBub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQuU2VxdWVuY2VOdW1iZXIubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBub3RpZmljYXRpb24gcmVtaW5kZXIgbWVzc2FnZSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgZHJvcHBlZCBpbnRvIHRoZSB0b3BpYywgYW5kIHdpbGwgYmUgcGlja2VkIHVwIGJ5IHRoZSBub3RpZmljYXRpb24gcmVtaW5kZXIgY29uc3VtZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE5vdGlmaWNhdGlvbiByZW1pbmRlciBzdWNjZXNzZnVsbHkgc2VudCB0byB0b3BpYyBmb3IgcHJvY2Vzc2luZyB3aXRoIHJlY2VpcHQgaW5mb3JtYXRpb246ICR7bm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0Lk1lc3NhZ2VJZH0gJHtub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQuU2VxdWVuY2VOdW1iZXJ9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluY3JlYXNlIHRoZSBudW1iZXIgb2YgbWVzc2FnZXMgc2VudCB0byB0aGUgdG9waWNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bFVzZXJNZXNzYWdlc1NlbnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbm8gbmVlZCBmb3IgZnVydGhlciBhY3Rpb25zLCBzaW5jZSB0aGlzIGVycm9yIHdpbGwgYmUgbG9nZ2VkIGFuZCBub3RoaW5nIHdpbGwgZXhlY3V0ZSBmdXJ0aGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBpbiB0aGUgZnV0dXJlIHdlIG1pZ2h0IG5lZWQgc29tZSBhbGVydHMgYW5kIG1ldHJpY3MgZW1pdHRpbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFVuZXhwZWN0ZWQgZXJyb3Igd2hpbGUgc2VuZGluZyB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIGZvciB1c2VyICR7aW5lbGlnaWJsZVVzZXIhLmlkfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFsbCBhcHBsaWNhYmxlIHVzZXJzIGhhdmUgaGFkIHN1Y2Nlc3NmdWwgbWVzc2FnZXMgZHJvcHBlZCBpbiB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIHRvcGljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc2Z1bFVzZXJNZXNzYWdlc1NlbnQgPT09IHVzZXJzV2l0aE5vQ2FyZHMuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBOb3RpZmljYXRpb24gcmVtaW5kZXIgc3VjY2Vzc2Z1bGx5IHNlbnQgZm9yIHVzZXJzOlxcbiR7SlNPTi5zdHJpbmdpZnkodXNlcnNXaXRoTm9DYXJkcy5kYXRhKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiA0KSBPbmNlIGFsbCB1c2VycyBoYXZlIGJlZW4gbm90aWZpZWQsIHRoZW4gdXBkYXRlIHRoZSBjYXJkIGxpbmtpbmcgcmVtaW5kZXIgYWNjb3JkaW5nbHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogYnkgY2FsbGluZyB0aGUgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXIgQXBwU3luYyBNdXRhdGlvbiBBUEkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZTogTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSA9IGF3YWl0IG1vb25iZWFtQ2xpZW50LnVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHJlbWluZGVyIS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uUmVtaW5kZXJTdGF0dXM6IE5vdGlmaWNhdGlvblJlbWluZGVyU3RhdHVzLkFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHVwZGF0ZSBub3RpZmljYXRpb24gcmVtaW5kZXIgY2FsbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UgIT09IG51bGwgJiYgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICF1cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlLmVycm9yTWVzc2FnZSAmJiAhdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5lcnJvclR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5kYXRhICE9PSB1bmRlZmluZWQgJiYgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5kYXRhICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UuZGF0YS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE5vdGlmaWNhdGlvbiByZW1pbmRlciAke3JlbWluZGVyIS5pZH0gc3VjY2Vzc2Z1bGx5IHVwZGF0ZWRgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbm8gbmVlZCBmb3IgZnVydGhlciBhY3Rpb25zLCBzaW5jZSB0aGlzIGVycm9yIHdpbGwgYmUgbG9nZ2VkIGFuZCBub3RoaW5nIHdpbGwgZXhlY3V0ZSBmdXJ0aGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBpbiB0aGUgZnV0dXJlIHdlIG1pZ2h0IG5lZWQgc29tZSBhbGVydHMgYW5kIG1ldHJpY3MgZW1pdHRpbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFVwZGF0ZSBub3RpZmljYXRpb24gcmVtaW5kZXIgdGhyb3VnaCBVUERBVEUgbm90aWZpY2F0aW9uIHJlbWluZGVyIGNhbGwgZmFpbGVkYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBubyBuZWVkIGZvciBmdXJ0aGVyIGFjdGlvbnMsIHNpbmNlIHRoaXMgZXJyb3Igd2lsbCBiZSBsb2dnZWQgYW5kIG5vdGhpbmcgd2lsbCBleGVjdXRlIGZ1cnRoZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCBuZWVkIHNvbWUgYWxlcnRzIGFuZCBtZXRyaWNzIGVtaXR0aW5nIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTm90IGFsbCBhcHBsaWNhYmxlIHVzZXJzIGhhdmUgaGFkIG5vdGlmaWNhdGlvbiBldmVudHMgZHJvcHBlZCBpbiB0aGUgYXBwcm9wcmlhdGUgdG9waWMuIFJlLXByb2Nlc3MgdGhlc2UgZmFpbGVkIG1lc3NhZ2VzIGFjY29yZGluZ2x5LmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBubyBuZWVkIGZvciBmdXJ0aGVyIGFjdGlvbnMsIHNpbmNlIHRoaXMgZXJyb3Igd2lsbCBiZSBsb2dnZWQgYW5kIG5vdGhpbmcgd2lsbCBleGVjdXRlIGZ1cnRoZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBpbiB0aGUgZnV0dXJlIHdlIG1pZ2h0IG5lZWQgc29tZSBhbGVydHMgYW5kIG1ldHJpY3MgZW1pdHRpbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVXNlcnMgd2l0aCBubyBjYXJkcyByZXRyaWV2YWwgdGhyb3VnaCBHRVQgdXNlcnMgd2l0aCBubyBjYXJkcyBjYWxsIGZhaWxlZGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uUmVtaW5kZXJUeXBlLlZldGVyYW5zRGF5VGVtcGxhdGVfMVJlbWluZGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgRm91bmQgbmV3IEFDVElWRSBub3RpZmljYXRpb24gcmVtaW5kZXIgJHtyZW1pbmRlciEuaWR9IG9mIHR5cGUgJHtOb3RpZmljYXRpb25SZW1pbmRlclR5cGUuVmV0ZXJhbnNEYXlUZW1wbGF0ZV8xUmVtaW5kZXJ9YCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMikgRm9yIGFueSBBQ1RJVkUgcmVtaW5kZXJzIG9mIHR5cGUgVkVURVJBTlNfREFZX1RFTVBMQVRFXzFfUkVNSU5ERVIsIGNhbGwgdGhlIGdldEFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJzIE1vb25iZWFtIEFwcFN5bmMgUXVlcnkgQVBJIGVuZHBvaW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyVmV0ZXJhbnNEYXkxOiBVc2VyRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSA9IGF3YWl0IG1vb25iZWFtQ2xpZW50LmdldEFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGdldCBhbGwgdXNlcnMgZm9yIG5vdGlmaWNhdGlvbiByZW1pbmRlcnMgY2FsbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyVmV0ZXJhbnNEYXkxICE9PSBudWxsICYmIGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJWZXRlcmFuc0RheTEgIT09IHVuZGVmaW5lZCAmJiAhYWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlclZldGVyYW5zRGF5MS5lcnJvck1lc3NhZ2UgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyVmV0ZXJhbnNEYXkxLmVycm9yVHlwZSAmJiBhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyVmV0ZXJhbnNEYXkxLmRhdGEgIT09IG51bGwgJiYgYWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlclZldGVyYW5zRGF5MS5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJWZXRlcmFuc0RheTEuZGF0YS5sZW5ndGggIT09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMykgRm9yIGVhY2ggYXBwbGljYWJsZSB1c2VyIGZyb20gc3RlcCAyKSBkcm9wIGEgbWVzc2FnZSBpbnRvIHRoZSBhcHByb3ByaWF0ZSBTTlMgdG9waWMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3VjY2Vzc2Z1bFVzZXJNZXNzYWdlc1NlbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB1c2VyIG9mIGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJWZXRlcmFuc0RheTEuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemluZyB0aGUgU05TIENsaWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuc0NsaWVudCA9IG5ldyBTTlNDbGllbnQoe3JlZ2lvbjogcmVnaW9ufSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBkcm9wIHRoZSBpbmVsaWdpYmxlIHVzZXIgaW5wdXQgYXMgYSBtZXNzYWdlIHRvIHRoZSBub3RpZmljYXRpb24gcmVtaW5kZXIgcHJvY2Vzc2luZyB0b3BpY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJEZXRhaWxzRm9yTm90aWZpY2F0aW9uczogVXNlckRldGFpbHNGb3JOb3RpZmljYXRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdXNlciEuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VyIS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROYW1lOiB1c2VyIS5maXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lOiB1c2VyIS5sYXN0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uQ2hhbm5lbFR5cGU6IHJlbWluZGVyIS5ub3RpZmljYXRpb25DaGFubmVsVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uVHlwZTogTm90aWZpY2F0aW9uVHlwZS5WZXRlcmFuc0RheVRlbXBsYXRlXzFSZW1pbmRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQgPSBhd2FpdCBzbnNDbGllbnQuc2VuZChuZXcgUHVibGlzaENvbW1hbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb3BpY0FybjogcHJvY2Vzcy5lbnYuTk9USUZJQ0FUSU9OX1JFTUlOREVSX1BST0NFU1NJTkdfVE9QSUNfQVJOISxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZTogSlNPTi5zdHJpbmdpZnkodXNlckRldGFpbHNGb3JOb3RpZmljYXRpb25zKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHRoZSBtZXNzYWdlIGdyb3VwIGlkLCB3aWxsIGJlIHJlcHJlc2VudGVkIGJ5IHRoZSBNb29uYmVhbSBpbnRlcm5hbCB1c2VyIGlkLCBzbyB0aGF0IHdlIGNhbiBncm91cCB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIHVwZGF0ZSBtZXNzYWdlcyBmb3IgYSBwYXJ0aWN1bGFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHVzZXIgaWQsIGFuZCBzb3J0IHRoZW0gaW4gdGhlIEZJRk8gcHJvY2Vzc2luZyB0b3BpYyBhY2NvcmRpbmdseS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VHcm91cElkOiB1c2VyIS5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBub3RpZmljYXRpb24gcmVtaW5kZXIgbWVzc2FnZSB3YXMgcHJvcGVybHkgc2VudCB0byB0aGUgYXBwcm9wcmlhdGUgcHJvY2Vzc2luZyB0b3BpY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQgIT09IG51bGwgJiYgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0ICE9PSB1bmRlZmluZWQgJiYgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0Lk1lc3NhZ2VJZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQuTWVzc2FnZUlkLmxlbmd0aCAhPT0gMCAmJiBub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQuU2VxdWVuY2VOdW1iZXIgJiYgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0LlNlcXVlbmNlTnVtYmVyLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIG1lc3NhZ2UgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGRyb3BwZWQgaW50byB0aGUgdG9waWMsIGFuZCB3aWxsIGJlIHBpY2tlZCB1cCBieSB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIGNvbnN1bWVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBOb3RpZmljYXRpb24gcmVtaW5kZXIgc3VjY2Vzc2Z1bGx5IHNlbnQgdG8gdG9waWMgZm9yIHByb2Nlc3Npbmcgd2l0aCByZWNlaXB0IGluZm9ybWF0aW9uOiAke25vdGlmaWNhdGlvblJlbWluZGVyUmVjZWlwdC5NZXNzYWdlSWR9ICR7bm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0LlNlcXVlbmNlTnVtYmVyfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbnVtYmVyIG9mIG1lc3NhZ2VzIHNlbnQgdG8gdGhlIHRvcGljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxVc2VyTWVzc2FnZXNTZW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIG5vIG5lZWQgZm9yIGZ1cnRoZXIgYWN0aW9ucywgc2luY2UgdGhpcyBlcnJvciB3aWxsIGJlIGxvZ2dlZCBhbmQgbm90aGluZyB3aWxsIGV4ZWN1dGUgZnVydGhlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCBuZWVkIHNvbWUgYWxlcnRzIGFuZCBtZXRyaWNzIGVtaXR0aW5nIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVbmV4cGVjdGVkIGVycm9yIHdoaWxlIHNlbmRpbmcgdGhlIG5vdGlmaWNhdGlvbiByZW1pbmRlciBmb3IgdXNlciAke3VzZXIhLmlkfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFsbCBhcHBsaWNhYmxlIHVzZXJzIGhhdmUgaGFkIHN1Y2Nlc3NmdWwgbWVzc2FnZXMgZHJvcHBlZCBpbiB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIHRvcGljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc2Z1bFVzZXJNZXNzYWdlc1NlbnQgPT09IGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJWZXRlcmFuc0RheTEuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBOb3RpZmljYXRpb24gcmVtaW5kZXIgc3VjY2Vzc2Z1bGx5IHNlbnQgZm9yIHVzZXJzOlxcbiR7SlNPTi5zdHJpbmdpZnkoYWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlclZldGVyYW5zRGF5MS5kYXRhKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiA0KSBPbmNlIGFsbCB1c2VycyBoYXZlIGJlZW4gbm90aWZpZWQsIHRoZW4gdXBkYXRlIHRoZSBjYXJkIGxpbmtpbmcgcmVtaW5kZXIgYWNjb3JkaW5nbHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogYnkgY2FsbGluZyB0aGUgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXIgQXBwU3luYyBNdXRhdGlvbiBBUEkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZTogTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSA9IGF3YWl0IG1vb25iZWFtQ2xpZW50LnVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHJlbWluZGVyIS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uUmVtaW5kZXJTdGF0dXM6IE5vdGlmaWNhdGlvblJlbWluZGVyU3RhdHVzLkFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHVwZGF0ZSBub3RpZmljYXRpb24gcmVtaW5kZXIgY2FsbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UgIT09IG51bGwgJiYgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICF1cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlLmVycm9yTWVzc2FnZSAmJiAhdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5lcnJvclR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5kYXRhICE9PSB1bmRlZmluZWQgJiYgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5kYXRhICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UuZGF0YS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE5vdGlmaWNhdGlvbiByZW1pbmRlciAke3JlbWluZGVyIS5pZH0gc3VjY2Vzc2Z1bGx5IHVwZGF0ZWRgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbm8gbmVlZCBmb3IgZnVydGhlciBhY3Rpb25zLCBzaW5jZSB0aGlzIGVycm9yIHdpbGwgYmUgbG9nZ2VkIGFuZCBub3RoaW5nIHdpbGwgZXhlY3V0ZSBmdXJ0aGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBpbiB0aGUgZnV0dXJlIHdlIG1pZ2h0IG5lZWQgc29tZSBhbGVydHMgYW5kIG1ldHJpY3MgZW1pdHRpbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFVwZGF0ZSBub3RpZmljYXRpb24gcmVtaW5kZXIgdGhyb3VnaCBVUERBVEUgbm90aWZpY2F0aW9uIHJlbWluZGVyIGNhbGwgZmFpbGVkYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBubyBuZWVkIGZvciBmdXJ0aGVyIGFjdGlvbnMsIHNpbmNlIHRoaXMgZXJyb3Igd2lsbCBiZSBsb2dnZWQgYW5kIG5vdGhpbmcgd2lsbCBleGVjdXRlIGZ1cnRoZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCBuZWVkIHNvbWUgYWxlcnRzIGFuZCBtZXRyaWNzIGVtaXR0aW5nIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTm90IGFsbCBhcHBsaWNhYmxlIHVzZXJzIGhhdmUgaGFkIG5vdGlmaWNhdGlvbiBldmVudHMgZHJvcHBlZCBpbiB0aGUgYXBwcm9wcmlhdGUgdG9waWMuIFJlLXByb2Nlc3MgdGhlc2UgZmFpbGVkIG1lc3NhZ2VzIGFjY29yZGluZ2x5LmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBubyBuZWVkIGZvciBmdXJ0aGVyIGFjdGlvbnMsIHNpbmNlIHRoaXMgZXJyb3Igd2lsbCBiZSBsb2dnZWQgYW5kIG5vdGhpbmcgd2lsbCBleGVjdXRlIGZ1cnRoZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBpbiB0aGUgZnV0dXJlIHdlIG1pZ2h0IG5lZWQgc29tZSBhbGVydHMgYW5kIG1ldHJpY3MgZW1pdHRpbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVXNlcnMgZm9yIG5vdGlmaWNhdGlvbiByZW1pbmRlcnMgcmV0cmlldmFsIHRocm91Z2ggR0VUIGFsbCB1c2VycyBmb3Igbm90aWZpY2F0aW9uIHJlbWluZGVycyBjYWxsIGZhaWxlZGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uUmVtaW5kZXJUeXBlLlZldGVyYW5zRGF5VGVtcGxhdGVfMlJlbWluZGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgRm91bmQgbmV3IEFDVElWRSBub3RpZmljYXRpb24gcmVtaW5kZXIgJHtyZW1pbmRlciEuaWR9IG9mIHR5cGUgJHtOb3RpZmljYXRpb25SZW1pbmRlclR5cGUuVmV0ZXJhbnNEYXlUZW1wbGF0ZV8yUmVtaW5kZXJ9YCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMikgRm9yIGFueSBBQ1RJVkUgcmVtaW5kZXJzIG9mIHR5cGUgVkVURVJBTlNfREFZX1RFTVBMQVRFXzJfUkVNSU5ERVIsIGNhbGwgdGhlIGdldEFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJzIE1vb25iZWFtIEFwcFN5bmMgUXVlcnkgQVBJIGVuZHBvaW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyVmV0ZXJhbnNEYXkyOiBVc2VyRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSA9IGF3YWl0IG1vb25iZWFtQ2xpZW50LmdldEFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGdldCBhbGwgdXNlcnMgZm9yIG5vdGlmaWNhdGlvbiByZW1pbmRlcnMgY2FsbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyVmV0ZXJhbnNEYXkyICE9PSBudWxsICYmIGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJWZXRlcmFuc0RheTIgIT09IHVuZGVmaW5lZCAmJiAhYWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlclZldGVyYW5zRGF5Mi5lcnJvck1lc3NhZ2UgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyVmV0ZXJhbnNEYXkyLmVycm9yVHlwZSAmJiBhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyVmV0ZXJhbnNEYXkyLmRhdGEgIT09IG51bGwgJiYgYWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlclZldGVyYW5zRGF5Mi5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJWZXRlcmFuc0RheTIuZGF0YS5sZW5ndGggIT09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMykgRm9yIGVhY2ggYXBwbGljYWJsZSB1c2VyIGZyb20gc3RlcCAyKSBkcm9wIGEgbWVzc2FnZSBpbnRvIHRoZSBhcHByb3ByaWF0ZSBTTlMgdG9waWMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3VjY2Vzc2Z1bFVzZXJNZXNzYWdlc1NlbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB1c2VyIG9mIGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJWZXRlcmFuc0RheTIuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemluZyB0aGUgU05TIENsaWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuc0NsaWVudCA9IG5ldyBTTlNDbGllbnQoe3JlZ2lvbjogcmVnaW9ufSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBkcm9wIHRoZSBpbmVsaWdpYmxlIHVzZXIgaW5wdXQgYXMgYSBtZXNzYWdlIHRvIHRoZSBub3RpZmljYXRpb24gcmVtaW5kZXIgcHJvY2Vzc2luZyB0b3BpY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJEZXRhaWxzRm9yTm90aWZpY2F0aW9uczogVXNlckRldGFpbHNGb3JOb3RpZmljYXRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdXNlciEuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VyIS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROYW1lOiB1c2VyIS5maXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lOiB1c2VyIS5sYXN0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uQ2hhbm5lbFR5cGU6IHJlbWluZGVyIS5ub3RpZmljYXRpb25DaGFubmVsVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uVHlwZTogTm90aWZpY2F0aW9uVHlwZS5WZXRlcmFuc0RheVRlbXBsYXRlXzJSZW1pbmRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQgPSBhd2FpdCBzbnNDbGllbnQuc2VuZChuZXcgUHVibGlzaENvbW1hbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb3BpY0FybjogcHJvY2Vzcy5lbnYuTk9USUZJQ0FUSU9OX1JFTUlOREVSX1BST0NFU1NJTkdfVE9QSUNfQVJOISxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZTogSlNPTi5zdHJpbmdpZnkodXNlckRldGFpbHNGb3JOb3RpZmljYXRpb25zKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHRoZSBtZXNzYWdlIGdyb3VwIGlkLCB3aWxsIGJlIHJlcHJlc2VudGVkIGJ5IHRoZSBNb29uYmVhbSBpbnRlcm5hbCB1c2VyIGlkLCBzbyB0aGF0IHdlIGNhbiBncm91cCB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIHVwZGF0ZSBtZXNzYWdlcyBmb3IgYSBwYXJ0aWN1bGFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHVzZXIgaWQsIGFuZCBzb3J0IHRoZW0gaW4gdGhlIEZJRk8gcHJvY2Vzc2luZyB0b3BpYyBhY2NvcmRpbmdseS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VHcm91cElkOiB1c2VyIS5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBub3RpZmljYXRpb24gcmVtaW5kZXIgbWVzc2FnZSB3YXMgcHJvcGVybHkgc2VudCB0byB0aGUgYXBwcm9wcmlhdGUgcHJvY2Vzc2luZyB0b3BpY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQgIT09IG51bGwgJiYgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0ICE9PSB1bmRlZmluZWQgJiYgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0Lk1lc3NhZ2VJZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQuTWVzc2FnZUlkLmxlbmd0aCAhPT0gMCAmJiBub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQuU2VxdWVuY2VOdW1iZXIgJiYgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0LlNlcXVlbmNlTnVtYmVyLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIG1lc3NhZ2UgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGRyb3BwZWQgaW50byB0aGUgdG9waWMsIGFuZCB3aWxsIGJlIHBpY2tlZCB1cCBieSB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIGNvbnN1bWVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBOb3RpZmljYXRpb24gcmVtaW5kZXIgc3VjY2Vzc2Z1bGx5IHNlbnQgdG8gdG9waWMgZm9yIHByb2Nlc3Npbmcgd2l0aCByZWNlaXB0IGluZm9ybWF0aW9uOiAke25vdGlmaWNhdGlvblJlbWluZGVyUmVjZWlwdC5NZXNzYWdlSWR9ICR7bm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0LlNlcXVlbmNlTnVtYmVyfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbnVtYmVyIG9mIG1lc3NhZ2VzIHNlbnQgdG8gdGhlIHRvcGljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxVc2VyTWVzc2FnZXNTZW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIG5vIG5lZWQgZm9yIGZ1cnRoZXIgYWN0aW9ucywgc2luY2UgdGhpcyBlcnJvciB3aWxsIGJlIGxvZ2dlZCBhbmQgbm90aGluZyB3aWxsIGV4ZWN1dGUgZnVydGhlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCBuZWVkIHNvbWUgYWxlcnRzIGFuZCBtZXRyaWNzIGVtaXR0aW5nIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVbmV4cGVjdGVkIGVycm9yIHdoaWxlIHNlbmRpbmcgdGhlIG5vdGlmaWNhdGlvbiByZW1pbmRlciBmb3IgdXNlciAke3VzZXIhLmlkfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFsbCBhcHBsaWNhYmxlIHVzZXJzIGhhdmUgaGFkIHN1Y2Nlc3NmdWwgbWVzc2FnZXMgZHJvcHBlZCBpbiB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIHRvcGljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc2Z1bFVzZXJNZXNzYWdlc1NlbnQgPT09IGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJWZXRlcmFuc0RheTIuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBOb3RpZmljYXRpb24gcmVtaW5kZXIgc3VjY2Vzc2Z1bGx5IHNlbnQgZm9yIHVzZXJzOlxcbiR7SlNPTi5zdHJpbmdpZnkoYWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlclZldGVyYW5zRGF5Mi5kYXRhKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiA0KSBPbmNlIGFsbCB1c2VycyBoYXZlIGJlZW4gbm90aWZpZWQsIHRoZW4gdXBkYXRlIHRoZSBjYXJkIGxpbmtpbmcgcmVtaW5kZXIgYWNjb3JkaW5nbHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogYnkgY2FsbGluZyB0aGUgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXIgQXBwU3luYyBNdXRhdGlvbiBBUEkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZTogTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSA9IGF3YWl0IG1vb25iZWFtQ2xpZW50LnVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHJlbWluZGVyIS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uUmVtaW5kZXJTdGF0dXM6IE5vdGlmaWNhdGlvblJlbWluZGVyU3RhdHVzLkFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHVwZGF0ZSBub3RpZmljYXRpb24gcmVtaW5kZXIgY2FsbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UgIT09IG51bGwgJiYgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICF1cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlLmVycm9yTWVzc2FnZSAmJiAhdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5lcnJvclR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5kYXRhICE9PSB1bmRlZmluZWQgJiYgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5kYXRhICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UuZGF0YS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE5vdGlmaWNhdGlvbiByZW1pbmRlciAke3JlbWluZGVyIS5pZH0gc3VjY2Vzc2Z1bGx5IHVwZGF0ZWRgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbm8gbmVlZCBmb3IgZnVydGhlciBhY3Rpb25zLCBzaW5jZSB0aGlzIGVycm9yIHdpbGwgYmUgbG9nZ2VkIGFuZCBub3RoaW5nIHdpbGwgZXhlY3V0ZSBmdXJ0aGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBpbiB0aGUgZnV0dXJlIHdlIG1pZ2h0IG5lZWQgc29tZSBhbGVydHMgYW5kIG1ldHJpY3MgZW1pdHRpbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFVwZGF0ZSBub3RpZmljYXRpb24gcmVtaW5kZXIgdGhyb3VnaCBVUERBVEUgbm90aWZpY2F0aW9uIHJlbWluZGVyIGNhbGwgZmFpbGVkYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBubyBuZWVkIGZvciBmdXJ0aGVyIGFjdGlvbnMsIHNpbmNlIHRoaXMgZXJyb3Igd2lsbCBiZSBsb2dnZWQgYW5kIG5vdGhpbmcgd2lsbCBleGVjdXRlIGZ1cnRoZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCBuZWVkIHNvbWUgYWxlcnRzIGFuZCBtZXRyaWNzIGVtaXR0aW5nIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTm90IGFsbCBhcHBsaWNhYmxlIHVzZXJzIGhhdmUgaGFkIG5vdGlmaWNhdGlvbiBldmVudHMgZHJvcHBlZCBpbiB0aGUgYXBwcm9wcmlhdGUgdG9waWMuIFJlLXByb2Nlc3MgdGhlc2UgZmFpbGVkIG1lc3NhZ2VzIGFjY29yZGluZ2x5LmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBubyBuZWVkIGZvciBmdXJ0aGVyIGFjdGlvbnMsIHNpbmNlIHRoaXMgZXJyb3Igd2lsbCBiZSBsb2dnZWQgYW5kIG5vdGhpbmcgd2lsbCBleGVjdXRlIGZ1cnRoZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBpbiB0aGUgZnV0dXJlIHdlIG1pZ2h0IG5lZWQgc29tZSBhbGVydHMgYW5kIG1ldHJpY3MgZW1pdHRpbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVXNlcnMgZm9yIG5vdGlmaWNhdGlvbiByZW1pbmRlcnMgcmV0cmlldmFsIHRocm91Z2ggR0VUIGFsbCB1c2VycyBmb3Igbm90aWZpY2F0aW9uIHJlbWluZGVycyBjYWxsIGZhaWxlZGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uUmVtaW5kZXJUeXBlLlZldGVyYW5zRGF5VGVtcGxhdGVfM1JlbWluZGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgRm91bmQgbmV3IEFDVElWRSBub3RpZmljYXRpb24gcmVtaW5kZXIgJHtyZW1pbmRlciEuaWR9IG9mIHR5cGUgJHtOb3RpZmljYXRpb25SZW1pbmRlclR5cGUuVmV0ZXJhbnNEYXlUZW1wbGF0ZV8zUmVtaW5kZXJ9YCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMikgRm9yIGFueSBBQ1RJVkUgcmVtaW5kZXJzIG9mIHR5cGUgVkVURVJBTlNfREFZX1RFTVBMQVRFXzNfUkVNSU5ERVIsIGNhbGwgdGhlIGdldEFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJzIE1vb25iZWFtIEFwcFN5bmMgUXVlcnkgQVBJIGVuZHBvaW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyVmV0ZXJhbnNEYXkzOiBVc2VyRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSA9IGF3YWl0IG1vb25iZWFtQ2xpZW50LmdldEFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGdldCBhbGwgdXNlcnMgZm9yIG5vdGlmaWNhdGlvbiByZW1pbmRlcnMgY2FsbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyVmV0ZXJhbnNEYXkzICE9PSBudWxsICYmIGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJWZXRlcmFuc0RheTMgIT09IHVuZGVmaW5lZCAmJiAhYWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlclZldGVyYW5zRGF5My5lcnJvck1lc3NhZ2UgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyVmV0ZXJhbnNEYXkzLmVycm9yVHlwZSAmJiBhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyVmV0ZXJhbnNEYXkzLmRhdGEgIT09IG51bGwgJiYgYWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlclZldGVyYW5zRGF5My5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJWZXRlcmFuc0RheTMuZGF0YS5sZW5ndGggIT09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMykgRm9yIGVhY2ggYXBwbGljYWJsZSB1c2VyIGZyb20gc3RlcCAyKSBkcm9wIGEgbWVzc2FnZSBpbnRvIHRoZSBhcHByb3ByaWF0ZSBTTlMgdG9waWMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3VjY2Vzc2Z1bFVzZXJNZXNzYWdlc1NlbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB1c2VyIG9mIGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJWZXRlcmFuc0RheTMuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemluZyB0aGUgU05TIENsaWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuc0NsaWVudCA9IG5ldyBTTlNDbGllbnQoe3JlZ2lvbjogcmVnaW9ufSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBkcm9wIHRoZSBpbmVsaWdpYmxlIHVzZXIgaW5wdXQgYXMgYSBtZXNzYWdlIHRvIHRoZSBub3RpZmljYXRpb24gcmVtaW5kZXIgcHJvY2Vzc2luZyB0b3BpY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJEZXRhaWxzRm9yTm90aWZpY2F0aW9uczogVXNlckRldGFpbHNGb3JOb3RpZmljYXRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdXNlciEuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VyIS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROYW1lOiB1c2VyIS5maXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lOiB1c2VyIS5sYXN0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uQ2hhbm5lbFR5cGU6IHJlbWluZGVyIS5ub3RpZmljYXRpb25DaGFubmVsVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uVHlwZTogTm90aWZpY2F0aW9uVHlwZS5WZXRlcmFuc0RheVRlbXBsYXRlXzNSZW1pbmRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQgPSBhd2FpdCBzbnNDbGllbnQuc2VuZChuZXcgUHVibGlzaENvbW1hbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb3BpY0FybjogcHJvY2Vzcy5lbnYuTk9USUZJQ0FUSU9OX1JFTUlOREVSX1BST0NFU1NJTkdfVE9QSUNfQVJOISxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZTogSlNPTi5zdHJpbmdpZnkodXNlckRldGFpbHNGb3JOb3RpZmljYXRpb25zKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHRoZSBtZXNzYWdlIGdyb3VwIGlkLCB3aWxsIGJlIHJlcHJlc2VudGVkIGJ5IHRoZSBNb29uYmVhbSBpbnRlcm5hbCB1c2VyIGlkLCBzbyB0aGF0IHdlIGNhbiBncm91cCB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIHVwZGF0ZSBtZXNzYWdlcyBmb3IgYSBwYXJ0aWN1bGFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHVzZXIgaWQsIGFuZCBzb3J0IHRoZW0gaW4gdGhlIEZJRk8gcHJvY2Vzc2luZyB0b3BpYyBhY2NvcmRpbmdseS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VHcm91cElkOiB1c2VyIS5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBub3RpZmljYXRpb24gcmVtaW5kZXIgbWVzc2FnZSB3YXMgcHJvcGVybHkgc2VudCB0byB0aGUgYXBwcm9wcmlhdGUgcHJvY2Vzc2luZyB0b3BpY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQgIT09IG51bGwgJiYgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0ICE9PSB1bmRlZmluZWQgJiYgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0Lk1lc3NhZ2VJZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQuTWVzc2FnZUlkLmxlbmd0aCAhPT0gMCAmJiBub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQuU2VxdWVuY2VOdW1iZXIgJiYgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0LlNlcXVlbmNlTnVtYmVyLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIG1lc3NhZ2UgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGRyb3BwZWQgaW50byB0aGUgdG9waWMsIGFuZCB3aWxsIGJlIHBpY2tlZCB1cCBieSB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIGNvbnN1bWVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBOb3RpZmljYXRpb24gcmVtaW5kZXIgc3VjY2Vzc2Z1bGx5IHNlbnQgdG8gdG9waWMgZm9yIHByb2Nlc3Npbmcgd2l0aCByZWNlaXB0IGluZm9ybWF0aW9uOiAke25vdGlmaWNhdGlvblJlbWluZGVyUmVjZWlwdC5NZXNzYWdlSWR9ICR7bm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0LlNlcXVlbmNlTnVtYmVyfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbnVtYmVyIG9mIG1lc3NhZ2VzIHNlbnQgdG8gdGhlIHRvcGljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxVc2VyTWVzc2FnZXNTZW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIG5vIG5lZWQgZm9yIGZ1cnRoZXIgYWN0aW9ucywgc2luY2UgdGhpcyBlcnJvciB3aWxsIGJlIGxvZ2dlZCBhbmQgbm90aGluZyB3aWxsIGV4ZWN1dGUgZnVydGhlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCBuZWVkIHNvbWUgYWxlcnRzIGFuZCBtZXRyaWNzIGVtaXR0aW5nIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVbmV4cGVjdGVkIGVycm9yIHdoaWxlIHNlbmRpbmcgdGhlIG5vdGlmaWNhdGlvbiByZW1pbmRlciBmb3IgdXNlciAke3VzZXIhLmlkfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFsbCBhcHBsaWNhYmxlIHVzZXJzIGhhdmUgaGFkIHN1Y2Nlc3NmdWwgbWVzc2FnZXMgZHJvcHBlZCBpbiB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIHRvcGljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc2Z1bFVzZXJNZXNzYWdlc1NlbnQgPT09IGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJWZXRlcmFuc0RheTMuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBOb3RpZmljYXRpb24gcmVtaW5kZXIgc3VjY2Vzc2Z1bGx5IHNlbnQgZm9yIHVzZXJzOlxcbiR7SlNPTi5zdHJpbmdpZnkoYWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlclZldGVyYW5zRGF5My5kYXRhKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiA0KSBPbmNlIGFsbCB1c2VycyBoYXZlIGJlZW4gbm90aWZpZWQsIHRoZW4gdXBkYXRlIHRoZSBjYXJkIGxpbmtpbmcgcmVtaW5kZXIgYWNjb3JkaW5nbHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogYnkgY2FsbGluZyB0aGUgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXIgQXBwU3luYyBNdXRhdGlvbiBBUEkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZTogTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSA9IGF3YWl0IG1vb25iZWFtQ2xpZW50LnVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHJlbWluZGVyIS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uUmVtaW5kZXJTdGF0dXM6IE5vdGlmaWNhdGlvblJlbWluZGVyU3RhdHVzLkFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHVwZGF0ZSBub3RpZmljYXRpb24gcmVtaW5kZXIgY2FsbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UgIT09IG51bGwgJiYgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICF1cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlLmVycm9yTWVzc2FnZSAmJiAhdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5lcnJvclR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5kYXRhICE9PSB1bmRlZmluZWQgJiYgdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5kYXRhICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UuZGF0YS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE5vdGlmaWNhdGlvbiByZW1pbmRlciAke3JlbWluZGVyIS5pZH0gc3VjY2Vzc2Z1bGx5IHVwZGF0ZWRgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbm8gbmVlZCBmb3IgZnVydGhlciBhY3Rpb25zLCBzaW5jZSB0aGlzIGVycm9yIHdpbGwgYmUgbG9nZ2VkIGFuZCBub3RoaW5nIHdpbGwgZXhlY3V0ZSBmdXJ0aGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBpbiB0aGUgZnV0dXJlIHdlIG1pZ2h0IG5lZWQgc29tZSBhbGVydHMgYW5kIG1ldHJpY3MgZW1pdHRpbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFVwZGF0ZSBub3RpZmljYXRpb24gcmVtaW5kZXIgdGhyb3VnaCBVUERBVEUgbm90aWZpY2F0aW9uIHJlbWluZGVyIGNhbGwgZmFpbGVkYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBubyBuZWVkIGZvciBmdXJ0aGVyIGFjdGlvbnMsIHNpbmNlIHRoaXMgZXJyb3Igd2lsbCBiZSBsb2dnZWQgYW5kIG5vdGhpbmcgd2lsbCBleGVjdXRlIGZ1cnRoZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCBuZWVkIHNvbWUgYWxlcnRzIGFuZCBtZXRyaWNzIGVtaXR0aW5nIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTm90IGFsbCBhcHBsaWNhYmxlIHVzZXJzIGhhdmUgaGFkIG5vdGlmaWNhdGlvbiBldmVudHMgZHJvcHBlZCBpbiB0aGUgYXBwcm9wcmlhdGUgdG9waWMuIFJlLXByb2Nlc3MgdGhlc2UgZmFpbGVkIG1lc3NhZ2VzIGFjY29yZGluZ2x5LmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBubyBuZWVkIGZvciBmdXJ0aGVyIGFjdGlvbnMsIHNpbmNlIHRoaXMgZXJyb3Igd2lsbCBiZSBsb2dnZWQgYW5kIG5vdGhpbmcgd2lsbCBleGVjdXRlIGZ1cnRoZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBpbiB0aGUgZnV0dXJlIHdlIG1pZ2h0IG5lZWQgc29tZSBhbGVydHMgYW5kIG1ldHJpY3MgZW1pdHRpbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVXNlcnMgZm9yIG5vdGlmaWNhdGlvbiByZW1pbmRlcnMgcmV0cmlldmFsIHRocm91Z2ggR0VUIGFsbCB1c2VycyBmb3Igbm90aWZpY2F0aW9uIHJlbWluZGVycyBjYWxsIGZhaWxlZGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uUmVtaW5kZXJUeXBlLk5ld01hcEZlYXR1cmVSZW1pbmRlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEZvdW5kIG5ldyBBQ1RJVkUgbm90aWZpY2F0aW9uIHJlbWluZGVyICR7cmVtaW5kZXIhLmlkfSBvZiB0eXBlICR7Tm90aWZpY2F0aW9uUmVtaW5kZXJUeXBlLk5ld01hcEZlYXR1cmVSZW1pbmRlcn1gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAyKSBGb3IgYW55IEFDVElWRSByZW1pbmRlcnMgb2YgdHlwZSBORVdfTUFQX0ZFQVRVUkVfUkVNSU5ERVIsIGNhbGwgdGhlIGdldEFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJzIE1vb25iZWFtIEFwcFN5bmMgUXVlcnkgQVBJIGVuZHBvaW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyOiBVc2VyRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSA9IGF3YWl0IG1vb25iZWFtQ2xpZW50LmdldEFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGdldCBhbGwgdXNlcnMgZm9yIG5vdGlmaWNhdGlvbiByZW1pbmRlcnMgY2FsbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyICE9PSBudWxsICYmIGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXIgIT09IHVuZGVmaW5lZCAmJiAhYWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlci5lcnJvck1lc3NhZ2UgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyLmVycm9yVHlwZSAmJiBhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyLmRhdGEgIT09IG51bGwgJiYgYWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlci5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXIuZGF0YS5sZW5ndGggIT09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMykgRm9yIGVhY2ggYXBwbGljYWJsZSB1c2VyIGZyb20gc3RlcCAyKSBkcm9wIGEgbWVzc2FnZSBpbnRvIHRoZSBhcHByb3ByaWF0ZSBTTlMgdG9waWMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3VjY2Vzc2Z1bFVzZXJNZXNzYWdlc1NlbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB1c2VyIG9mIGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXIuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemluZyB0aGUgU05TIENsaWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuc0NsaWVudCA9IG5ldyBTTlNDbGllbnQoe3JlZ2lvbjogcmVnaW9ufSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBkcm9wIHRoZSBpbmVsaWdpYmxlIHVzZXIgaW5wdXQgYXMgYSBtZXNzYWdlIHRvIHRoZSBub3RpZmljYXRpb24gcmVtaW5kZXIgcHJvY2Vzc2luZyB0b3BpY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJEZXRhaWxzRm9yTm90aWZpY2F0aW9uczogVXNlckRldGFpbHNGb3JOb3RpZmljYXRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdXNlciEuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VyIS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROYW1lOiB1c2VyIS5maXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lOiB1c2VyIS5sYXN0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uQ2hhbm5lbFR5cGU6IHJlbWluZGVyIS5ub3RpZmljYXRpb25DaGFubmVsVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uVHlwZTogTm90aWZpY2F0aW9uVHlwZS5OZXdNYXBGZWF0dXJlUmVtaW5kZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0ID0gYXdhaXQgc25zQ2xpZW50LnNlbmQobmV3IFB1Ymxpc2hDb21tYW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG9waWNBcm46IHByb2Nlc3MuZW52Lk5PVElGSUNBVElPTl9SRU1JTkRFUl9QUk9DRVNTSU5HX1RPUElDX0FSTiEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2U6IEpTT04uc3RyaW5naWZ5KHVzZXJEZXRhaWxzRm9yTm90aWZpY2F0aW9ucyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiB0aGUgbWVzc2FnZSBncm91cCBpZCwgd2lsbCBiZSByZXByZXNlbnRlZCBieSB0aGUgTW9vbmJlYW0gaW50ZXJuYWwgdXNlciBpZCwgc28gdGhhdCB3ZSBjYW4gZ3JvdXAgdGhlIG5vdGlmaWNhdGlvbiByZW1pbmRlciB1cGRhdGUgbWVzc2FnZXMgZm9yIGEgcGFydGljdWxhclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiB1c2VyIGlkLCBhbmQgc29ydCB0aGVtIGluIHRoZSBGSUZPIHByb2Nlc3NpbmcgdG9waWMgYWNjb3JkaW5nbHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlR3JvdXBJZDogdXNlciEuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbnN1cmUgdGhhdCB0aGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIG1lc3NhZ2Ugd2FzIHByb3Blcmx5IHNlbnQgdG8gdGhlIGFwcHJvcHJpYXRlIHByb2Nlc3NpbmcgdG9waWNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0ICE9PSBudWxsICYmIG5vdGlmaWNhdGlvblJlbWluZGVyUmVjZWlwdCAhPT0gdW5kZWZpbmVkICYmIG5vdGlmaWNhdGlvblJlbWluZGVyUmVjZWlwdC5NZXNzYWdlSWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0Lk1lc3NhZ2VJZC5sZW5ndGggIT09IDAgJiYgbm90aWZpY2F0aW9uUmVtaW5kZXJSZWNlaXB0LlNlcXVlbmNlTnVtYmVyICYmIG5vdGlmaWNhdGlvblJlbWluZGVyUmVjZWlwdC5TZXF1ZW5jZU51bWJlci5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG5vdGlmaWNhdGlvbiByZW1pbmRlciBtZXNzYWdlIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBkcm9wcGVkIGludG8gdGhlIHRvcGljLCBhbmQgd2lsbCBiZSBwaWNrZWQgdXAgYnkgdGhlIG5vdGlmaWNhdGlvbiByZW1pbmRlciBjb25zdW1lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTm90aWZpY2F0aW9uIHJlbWluZGVyIHN1Y2Nlc3NmdWxseSBzZW50IHRvIHRvcGljIGZvciBwcm9jZXNzaW5nIHdpdGggcmVjZWlwdCBpbmZvcm1hdGlvbjogJHtub3RpZmljYXRpb25SZW1pbmRlclJlY2VpcHQuTWVzc2FnZUlkfSAke25vdGlmaWNhdGlvblJlbWluZGVyUmVjZWlwdC5TZXF1ZW5jZU51bWJlcn1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5jcmVhc2UgdGhlIG51bWJlciBvZiBtZXNzYWdlcyBzZW50IHRvIHRoZSB0b3BpY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzZnVsVXNlck1lc3NhZ2VzU2VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBubyBuZWVkIGZvciBmdXJ0aGVyIGFjdGlvbnMsIHNpbmNlIHRoaXMgZXJyb3Igd2lsbCBiZSBsb2dnZWQgYW5kIG5vdGhpbmcgd2lsbCBleGVjdXRlIGZ1cnRoZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGluIHRoZSBmdXR1cmUgd2UgbWlnaHQgbmVlZCBzb21lIGFsZXJ0cyBhbmQgbWV0cmljcyBlbWl0dGluZyBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVW5leHBlY3RlZCBlcnJvciB3aGlsZSBzZW5kaW5nIHRoZSBub3RpZmljYXRpb24gcmVtaW5kZXIgZm9yIHVzZXIgJHt1c2VyIS5pZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBhbGwgYXBwbGljYWJsZSB1c2VycyBoYXZlIGhhZCBzdWNjZXNzZnVsIG1lc3NhZ2VzIGRyb3BwZWQgaW4gdGhlIG5vdGlmaWNhdGlvbiByZW1pbmRlciB0b3BpY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3NmdWxVc2VyTWVzc2FnZXNTZW50ID09PSBhbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVyLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTm90aWZpY2F0aW9uIHJlbWluZGVyIHN1Y2Nlc3NmdWxseSBzZW50IGZvciB1c2VyczpcXG4ke0pTT04uc3RyaW5naWZ5KGFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXIuZGF0YSl9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogNCkgT25jZSBhbGwgdXNlcnMgaGF2ZSBiZWVuIG5vdGlmaWVkLCB0aGVuIHVwZGF0ZSB0aGUgY2FyZCBsaW5raW5nIHJlbWluZGVyIGFjY29yZGluZ2x5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGJ5IGNhbGxpbmcgdGhlIHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyIEFwcFN5bmMgTXV0YXRpb24gQVBJLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2U6IE5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UgPSBhd2FpdCBtb29uYmVhbUNsaWVudC51cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiByZW1pbmRlciEuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblJlbWluZGVyU3RhdHVzOiBOb3RpZmljYXRpb25SZW1pbmRlclN0YXR1cy5BY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSB1cGRhdGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIGNhbGwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlICE9PSBudWxsICYmIHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZS5lcnJvck1lc3NhZ2UgJiYgIXVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UuZXJyb3JUeXBlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UuZGF0YSAhPT0gdW5kZWZpbmVkICYmIHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UuZGF0YSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlLmRhdGEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBOb3RpZmljYXRpb24gcmVtaW5kZXIgJHtyZW1pbmRlciEuaWR9IHN1Y2Nlc3NmdWxseSB1cGRhdGVkYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIG5vIG5lZWQgZm9yIGZ1cnRoZXIgYWN0aW9ucywgc2luY2UgdGhpcyBlcnJvciB3aWxsIGJlIGxvZ2dlZCBhbmQgbm90aGluZyB3aWxsIGV4ZWN1dGUgZnVydGhlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCBuZWVkIHNvbWUgYWxlcnRzIGFuZCBtZXRyaWNzIGVtaXR0aW5nIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVcGRhdGUgbm90aWZpY2F0aW9uIHJlbWluZGVyIHRocm91Z2ggVVBEQVRFIG5vdGlmaWNhdGlvbiByZW1pbmRlciBjYWxsIGZhaWxlZGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbm8gbmVlZCBmb3IgZnVydGhlciBhY3Rpb25zLCBzaW5jZSB0aGlzIGVycm9yIHdpbGwgYmUgbG9nZ2VkIGFuZCBub3RoaW5nIHdpbGwgZXhlY3V0ZSBmdXJ0aGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGluIHRoZSBmdXR1cmUgd2UgbWlnaHQgbmVlZCBzb21lIGFsZXJ0cyBhbmQgbWV0cmljcyBlbWl0dGluZyBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE5vdCBhbGwgYXBwbGljYWJsZSB1c2VycyBoYXZlIGhhZCBub3RpZmljYXRpb24gZXZlbnRzIGRyb3BwZWQgaW4gdGhlIGFwcHJvcHJpYXRlIHRvcGljLiBSZS1wcm9jZXNzIHRoZXNlIGZhaWxlZCBtZXNzYWdlcyBhY2NvcmRpbmdseS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbm8gbmVlZCBmb3IgZnVydGhlciBhY3Rpb25zLCBzaW5jZSB0aGlzIGVycm9yIHdpbGwgYmUgbG9nZ2VkIGFuZCBub3RoaW5nIHdpbGwgZXhlY3V0ZSBmdXJ0aGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCBuZWVkIHNvbWUgYWxlcnRzIGFuZCBtZXRyaWNzIGVtaXR0aW5nIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFVzZXJzIGZvciBub3RpZmljYXRpb24gcmVtaW5kZXJzIHJldHJpZXZhbCB0aHJvdWdoIEdFVCBhbGwgdXNlcnMgZm9yIG5vdGlmaWNhdGlvbiByZW1pbmRlcnMgY2FsbCBmYWlsZWRgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVW5rbm93biBub3RpZmljYXRpb24gcmVtaW5kZXIgdHlwZSBwYXNzZWQgaW4gZm9yIEFDVElWRSByZW1pbmRlciAke3JlbWluZGVyIS5ub3RpZmljYXRpb25SZW1pbmRlclR5cGV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVSZW1pbmRlckNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX2ApO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFJhbiB0cmlnZ2VyIGZvciBOb3RpZmljYXRpb24gUmVtaW5kZXJzIGF0ICR7bmV3IERhdGUoRGF0ZS5ub3coKSkudG9JU09TdHJpbmcoKX0sIGFuZCBmb3VuZCAke2FjdGl2ZVJlbWluZGVyQ291bnR9IEFDVElWRSByZW1pbmRlcnNgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogbm8gbmVlZCBmb3IgZnVydGhlciBhY3Rpb25zLCBzaW5jZSB0aGlzIGVycm9yIHdpbGwgYmUgbG9nZ2VkIGFuZCBub3RoaW5nIHdpbGwgZXhlY3V0ZSBmdXJ0aGVyLlxuICAgICAgICAgICAgICogaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCBuZWVkIHNvbWUgYWxlcnRzIGFuZCBtZXRyaWNzIGVtaXR0aW5nIGhlcmVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc29sZS5sb2coYE5vdGlmaWNhdGlvbiBSZW1pbmRlciByZXRyaWV2YWwgdGhyb3VnaCBHRVQgbm90aWZpY2F0aW9uIHJlbWluZGVycyBjYWxsIGZhaWxlZGApO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIG5vIG5lZWQgZm9yIGZ1cnRoZXIgYWN0aW9ucywgc2luY2UgdGhpcyBlcnJvciB3aWxsIGJlIGxvZ2dlZCBhbmQgbm90aGluZyB3aWxsIGV4ZWN1dGUgZnVydGhlci5cbiAgICAgICAgICogaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCBuZWVkIHNvbWUgYWxlcnRzIGFuZCBtZXRyaWNzIGVtaXR0aW5nIGhlcmVcbiAgICAgICAgICovXG4gICAgICAgIGNvbnNvbGUubG9nKGBVbmV4cGVjdGVkIGVycm9yIHdoaWxlIHByb2Nlc3NpbmcgdGhlIG5vdGlmaWNhdGlvbiByZW1pbmRlciBjcm9uIGV2ZW50ICR7ZXJyb3J9YCk7XG4gICAgfVxufVxuIl19