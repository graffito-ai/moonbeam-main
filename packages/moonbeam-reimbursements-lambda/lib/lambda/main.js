"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateReimbursementResolver_1 = require("./resolvers/CreateReimbursementResolver");
const UpdateReimbursementResolver_1 = require("./resolvers/UpdateReimbursementResolver");
const GetReimbursementByStatusResolver_1 = require("./resolvers/GetReimbursementByStatusResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 * @returns a {@link Promise} containing a {@link ReimbursementResponse} or {@link ReimbursementByStatusResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new reimbursement event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "createReimbursement":
            return await (0, CreateReimbursementResolver_1.createReimbursement)(event.info.fieldName, event.arguments.createReimbursementInput);
        case "updateReimbursement":
            return await (0, UpdateReimbursementResolver_1.updateReimbursement)(event.info.fieldName, event.arguments.updateReimbursementInput);
        case "getReimbursementByStatus":
            return await (0, GetReimbursementByStatusResolver_1.getReimbursementByStatus)(event.info.fieldName, event.arguments.getReimbursementByStatusInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.ReimbursementsErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQU9tQztBQUNuQyx5RkFBNEU7QUFDNUUseUZBQTRFO0FBQzVFLG1HQUFzRjtBQW9CdEY7Ozs7OztHQU1HO0FBQ0gsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBbUIsRUFBa0UsRUFBRTtJQUM1RyxPQUFPLENBQUMsR0FBRyxDQUFDLG1EQUFtRCxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzSSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQzFCLEtBQUsscUJBQXFCO1lBQ3RCLE9BQU8sTUFBTSxJQUFBLGlEQUFtQixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUNyRyxLQUFLLHFCQUFxQjtZQUN0QixPQUFPLE1BQU0sSUFBQSxpREFBbUIsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDckcsS0FBSywwQkFBMEI7WUFDM0IsT0FBTyxNQUFNLElBQUEsMkRBQXdCLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQy9HO1lBQ0ksTUFBTSxZQUFZLEdBQUcsMEJBQTBCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxQixPQUFPO2dCQUNILFlBQVksRUFBRSxZQUFZO2dCQUMxQixTQUFTLEVBQUUseUNBQXVCLENBQUMsZUFBZTthQUNyRCxDQUFDO0tBQ1Q7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENyZWF0ZVJlaW1idXJzZW1lbnRJbnB1dCxcbiAgICBHZXRSZWltYnVyc2VtZW50QnlTdGF0dXNJbnB1dCxcbiAgICBSZWltYnVyc2VtZW50QnlTdGF0dXNSZXNwb25zZSxcbiAgICBSZWltYnVyc2VtZW50UmVzcG9uc2UsXG4gICAgUmVpbWJ1cnNlbWVudHNFcnJvclR5cGUsXG4gICAgVXBkYXRlUmVpbWJ1cnNlbWVudElucHV0XG59IGZyb20gXCJAbW9vbmJlYW0vbW9vbmJlYW0tbW9kZWxzXCI7XG5pbXBvcnQge2NyZWF0ZVJlaW1idXJzZW1lbnR9IGZyb20gXCIuL3Jlc29sdmVycy9DcmVhdGVSZWltYnVyc2VtZW50UmVzb2x2ZXJcIjtcbmltcG9ydCB7dXBkYXRlUmVpbWJ1cnNlbWVudH0gZnJvbSBcIi4vcmVzb2x2ZXJzL1VwZGF0ZVJlaW1idXJzZW1lbnRSZXNvbHZlclwiO1xuaW1wb3J0IHtnZXRSZWltYnVyc2VtZW50QnlTdGF0dXN9IGZyb20gXCIuL3Jlc29sdmVycy9HZXRSZWltYnVyc2VtZW50QnlTdGF0dXNSZXNvbHZlclwiO1xuXG4vKipcbiAqIE1hcHBpbmcgb3V0IHRoZSBBcHAgU3luYyBldmVudCB0eXBlLCBzbyB3ZSBjYW4gdXNlIGl0IGFzIGEgdHlwZSBpbiB0aGUgTGFtYmRhIEhhbmRsZXJcbiAqL1xudHlwZSBBcHBTeW5jRXZlbnQgPSB7XG4gICAgaW5mbzoge1xuICAgICAgICBmaWVsZE5hbWU6IHN0cmluZ1xuICAgIH0sXG4gICAgYXJndW1lbnRzOiB7XG4gICAgICAgIGNyZWF0ZVJlaW1idXJzZW1lbnRJbnB1dDogQ3JlYXRlUmVpbWJ1cnNlbWVudElucHV0LFxuICAgICAgICB1cGRhdGVSZWltYnVyc2VtZW50SW5wdXQ6IFVwZGF0ZVJlaW1idXJzZW1lbnRJbnB1dCxcbiAgICAgICAgZ2V0UmVpbWJ1cnNlbWVudEJ5U3RhdHVzSW5wdXQ6IEdldFJlaW1idXJzZW1lbnRCeVN0YXR1c0lucHV0XG4gICAgfSxcbiAgICBpZGVudGl0eToge1xuICAgICAgICBzdWI6IHN0cmluZztcbiAgICAgICAgdXNlcm5hbWU6IHN0cmluZztcbiAgICB9XG59XG5cbi8qKlxuICogTGFtYmRhIEZ1bmN0aW9uIGhhbmRsZXIsIGhhbmRsaW5nIGluY29taW5nIGV2ZW50cyxcbiAqIGRlcGVuZGluZyBvbiB0aGUgQXBwU3luYyBmaWVsZCBuYW1lLlxuICpcbiAqIEBwYXJhbSBldmVudCBBcHBTeW5jIGV2ZW50IHRvIGJlIHBhc3NlZCBpbiB0aGUgaGFuZGxlclxuICogQHJldHVybnMgYSB7QGxpbmsgUHJvbWlzZX0gY29udGFpbmluZyBhIHtAbGluayBSZWltYnVyc2VtZW50UmVzcG9uc2V9IG9yIHtAbGluayBSZWltYnVyc2VtZW50QnlTdGF0dXNSZXNwb25zZX1cbiAqL1xuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBcHBTeW5jRXZlbnQpOiBQcm9taXNlPFJlaW1idXJzZW1lbnRSZXNwb25zZSB8IFJlaW1idXJzZW1lbnRCeVN0YXR1c1Jlc3BvbnNlPiA9PiB7XG4gICAgY29uc29sZS5sb2coYFJlY2VpdmVkIG5ldyByZWltYnVyc2VtZW50IGV2ZW50IGZvciBvcGVyYXRpb24gWyR7ZXZlbnQuaW5mby5maWVsZE5hbWV9XSwgd2l0aCBhcmd1bWVudHMgJHtKU09OLnN0cmluZ2lmeShldmVudC5hcmd1bWVudHMpfWApO1xuICAgIHN3aXRjaCAoZXZlbnQuaW5mby5maWVsZE5hbWUpIHtcbiAgICAgICAgY2FzZSBcImNyZWF0ZVJlaW1idXJzZW1lbnRcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVSZWltYnVyc2VtZW50KGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMuY3JlYXRlUmVpbWJ1cnNlbWVudElucHV0KTtcbiAgICAgICAgY2FzZSBcInVwZGF0ZVJlaW1idXJzZW1lbnRcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB1cGRhdGVSZWltYnVyc2VtZW50KGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMudXBkYXRlUmVpbWJ1cnNlbWVudElucHV0KTtcbiAgICAgICAgY2FzZSBcImdldFJlaW1idXJzZW1lbnRCeVN0YXR1c1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldFJlaW1idXJzZW1lbnRCeVN0YXR1cyhldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmdldFJlaW1idXJzZW1lbnRCeVN0YXR1c0lucHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6ICR7ZXZlbnQuaW5mby5maWVsZE5hbWV9YDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgIGVycm9yVHlwZTogUmVpbWJ1cnNlbWVudHNFcnJvclR5cGUuVW5leHBlY3RlZEVycm9yXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cblxuIl19