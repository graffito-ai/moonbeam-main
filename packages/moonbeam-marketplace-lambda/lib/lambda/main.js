"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const createPartnerStore_1 = require("./resolvers/createPartnerStore");
const getPartnerStore_1 = require("./resolvers/getPartnerStore");
const listPartnerStores_1 = require("./resolvers/listPartnerStores");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync even to be passed in the handler
 */
exports.handler = async (event) => {
    console.log(`Received new storage event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "createPartnerStore":
            return await (0, createPartnerStore_1.createPartnerStore)(event.arguments.createPartnerStoreInput);
        case "listPartnerStores":
            return await (0, listPartnerStores_1.listPartnerStores)(event.arguments.listPartnerStoresInput);
        case "getPartnerStore":
            return await (0, getPartnerStore_1.getPartnerStore)(event.arguments.id);
        default:
            console.log(`Unexpected field name: {}`, event.info.fieldName);
            return {
                errorMessage: `Unexpected field name: ${event.info.fieldName}`,
                errorType: moonbeam_models_1.MarketplaceErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUttQztBQUNuQyx1RUFBa0U7QUFDbEUsaUVBQThEO0FBQzlELHFFQUFrRTtBQW9CbEU7Ozs7O0dBS0c7QUFDSCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFtQixFQUFpQyxFQUFFO0lBQzNFLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JJLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDMUIsS0FBSyxvQkFBb0I7WUFDckIsT0FBTyxNQUFNLElBQUEsdUNBQWtCLEVBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQzdFLEtBQUssbUJBQW1CO1lBQ3BCLE9BQU8sTUFBTSxJQUFBLHFDQUFpQixFQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUMzRSxLQUFLLGlCQUFpQjtZQUNsQixPQUFPLE1BQU0sSUFBQSxpQ0FBZSxFQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckQ7WUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDL0QsT0FBTztnQkFDSCxZQUFZLEVBQUUsMEJBQTBCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUM5RCxTQUFTLEVBQUUsc0NBQW9CLENBQUMsZUFBZTthQUNsRCxDQUFDO0tBQ1Q7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENyZWF0ZVBhcnRuZXJTdG9yZUlucHV0LFxuICAgIExpc3RQYXJ0bmVyU3RvcmVzSW5wdXQsXG4gICAgTWFya2V0cGxhY2VFcnJvclR5cGUsXG4gICAgUGFydG5lclN0b3JlUmVzcG9uc2Vcbn0gZnJvbSBcIkBtb29uYmVhbS9tb29uYmVhbS1tb2RlbHNcIjtcbmltcG9ydCB7Y3JlYXRlUGFydG5lclN0b3JlfSBmcm9tIFwiLi9yZXNvbHZlcnMvY3JlYXRlUGFydG5lclN0b3JlXCI7XG5pbXBvcnQgeyBnZXRQYXJ0bmVyU3RvcmUgfSBmcm9tIFwiLi9yZXNvbHZlcnMvZ2V0UGFydG5lclN0b3JlXCI7XG5pbXBvcnQgeyBsaXN0UGFydG5lclN0b3JlcyB9IGZyb20gXCIuL3Jlc29sdmVycy9saXN0UGFydG5lclN0b3Jlc1wiO1xuXG4vKipcbiAqIE1hcHBpbmcgb3V0IHRoZSBBcHAgU3luYyBldmVudCB0eXBlLCBzbyB3ZSBjYW4gdXNlIGl0IGFzIGEgdHlwZSBpbiB0aGUgTGFtYmRhIEhhbmRsZXJcbiAqL1xudHlwZSBBcHBTeW5jRXZlbnQgPSB7XG4gICAgaW5mbzoge1xuICAgICAgICBmaWVsZE5hbWU6IHN0cmluZ1xuICAgIH0sXG4gICAgYXJndW1lbnRzOiB7XG4gICAgICAgIGlkOiBzdHJpbmdcbiAgICAgICAgY3JlYXRlUGFydG5lclN0b3JlSW5wdXQ6IENyZWF0ZVBhcnRuZXJTdG9yZUlucHV0XG4gICAgICAgIGxpc3RQYXJ0bmVyU3RvcmVzSW5wdXQ6IExpc3RQYXJ0bmVyU3RvcmVzSW5wdXRcbiAgICB9LFxuICAgIGlkZW50aXR5OiB7XG4gICAgICAgIHN1YiA6IHN0cmluZztcbiAgICAgICAgdXNlcm5hbWUgOiBzdHJpbmc7XG4gICAgfVxufVxuXG4vKipcbiAqIExhbWJkYSBGdW5jdGlvbiBoYW5kbGVyLCBoYW5kbGluZyBpbmNvbWluZyBldmVudHMsXG4gKiBkZXBlbmRpbmcgb24gdGhlIEFwcFN5bmMgZmllbGQgbmFtZS5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgQXBwU3luYyBldmVuIHRvIGJlIHBhc3NlZCBpbiB0aGUgaGFuZGxlclxuICovXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFwcFN5bmNFdmVudCk6IFByb21pc2U8UGFydG5lclN0b3JlUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgbmV3IHN0b3JhZ2UgZXZlbnQgZm9yIG9wZXJhdGlvbiBbJHtldmVudC5pbmZvLmZpZWxkTmFtZX1dLCB3aXRoIGFyZ3VtZW50cyAke0pTT04uc3RyaW5naWZ5KGV2ZW50LmFyZ3VtZW50cyl9YCk7XG4gICAgc3dpdGNoIChldmVudC5pbmZvLmZpZWxkTmFtZSkge1xuICAgICAgICBjYXNlIFwiY3JlYXRlUGFydG5lclN0b3JlXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlUGFydG5lclN0b3JlKGV2ZW50LmFyZ3VtZW50cy5jcmVhdGVQYXJ0bmVyU3RvcmVJbnB1dCk7XG4gICAgICAgIGNhc2UgXCJsaXN0UGFydG5lclN0b3Jlc1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGxpc3RQYXJ0bmVyU3RvcmVzKGV2ZW50LmFyZ3VtZW50cy5saXN0UGFydG5lclN0b3Jlc0lucHV0KTtcbiAgICAgICAgY2FzZSBcImdldFBhcnRuZXJTdG9yZVwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldFBhcnRuZXJTdG9yZShldmVudC5hcmd1bWVudHMuaWQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc29sZS5sb2coYFVuZXhwZWN0ZWQgZmllbGQgbmFtZToge31gLCBldmVudC5pbmZvLmZpZWxkTmFtZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogYFVuZXhwZWN0ZWQgZmllbGQgbmFtZTogJHtldmVudC5pbmZvLmZpZWxkTmFtZX1gLFxuICAgICAgICAgICAgICAgIGVycm9yVHlwZTogTWFya2V0cGxhY2VFcnJvclR5cGUuVW5leHBlY3RlZEVycm9yXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cblxuIl19