"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateCardLinkResolver_1 = require("./resolvers/CreateCardLinkResolver");
const DeleteCardResolver_1 = require("./resolvers/DeleteCardResolver");
const GetCardLinkResolver_1 = require("./resolvers/GetCardLinkResolver");
const AddCardResolver_1 = require("./resolvers/AddCardResolver");
const GetEligibleLinkedUsersResolver_1 = require("./resolvers/GetEligibleLinkedUsersResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 * @returns a {@link Promise} containing a {@link CardLinkResponse} or {@link CardResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new storage event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "addCard":
            return await (0, AddCardResolver_1.addCard)(event.info.fieldName, event.arguments.addCardInput);
        case "getCardLink":
            return await (0, GetCardLinkResolver_1.getCardLink)(event.info.fieldName, event.arguments.getCardLinkInput);
        case "getEligibleLinkedUsers":
            return await (0, GetEligibleLinkedUsersResolver_1.getEligibleLinkedUsers)(event.info.fieldName);
        case "createCardLink":
            return await (0, CreateCardLinkResolver_1.createCardLink)(event.info.fieldName, event.arguments.createCardLinkInput);
        case "deleteCard":
            return await (0, DeleteCardResolver_1.deleteCard)(event.info.fieldName, event.arguments.deleteCardInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.CardLinkErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQU9tQztBQUNuQywrRUFBa0U7QUFDbEUsdUVBQTREO0FBQzVELHlFQUE4RDtBQUM5RCxpRUFBb0Q7QUFDcEQsK0ZBQW9GO0FBcUJwRjs7Ozs7O0dBTUc7QUFDSCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFtQixFQUEwRSxFQUFFO0lBQ3BILE9BQU8sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JJLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDMUIsS0FBSyxTQUFTO1lBQ1YsT0FBTyxNQUFNLElBQUEseUJBQU8sRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzdFLEtBQUssYUFBYTtZQUNkLE9BQU8sTUFBTSxJQUFBLGlDQUFXLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3JGLEtBQUssd0JBQXdCO1lBQ3pCLE9BQU8sTUFBTSxJQUFBLHVEQUFzQixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUQsS0FBSyxnQkFBZ0I7WUFDakIsT0FBTyxNQUFNLElBQUEsdUNBQWMsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDM0YsS0FBSyxZQUFZO1lBQ2IsT0FBTyxNQUFNLElBQUEsK0JBQVUsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ25GO1lBQ0ksTUFBTSxZQUFZLEdBQUcsMEJBQTBCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxQixPQUFPO2dCQUNILFlBQVksRUFBRSxZQUFZO2dCQUMxQixTQUFTLEVBQUUsbUNBQWlCLENBQUMsZUFBZTthQUMvQyxDQUFDO0tBQ1Q7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFkZENhcmRJbnB1dCxcbiAgICBDYXJkTGlua0Vycm9yVHlwZSxcbiAgICBDYXJkTGlua1Jlc3BvbnNlLCBDYXJkUmVzcG9uc2UsXG4gICAgQ3JlYXRlQ2FyZExpbmtJbnB1dCxcbiAgICBEZWxldGVDYXJkSW5wdXQsIEVsaWdpYmxlTGlua2VkVXNlcnNSZXNwb25zZSxcbiAgICBHZXRDYXJkTGlua0lucHV0XG59IGZyb20gXCJAbW9vbmJlYW0vbW9vbmJlYW0tbW9kZWxzXCI7XG5pbXBvcnQge2NyZWF0ZUNhcmRMaW5rfSBmcm9tIFwiLi9yZXNvbHZlcnMvQ3JlYXRlQ2FyZExpbmtSZXNvbHZlclwiO1xuaW1wb3J0IHsgZGVsZXRlQ2FyZCB9IGZyb20gXCIuL3Jlc29sdmVycy9EZWxldGVDYXJkUmVzb2x2ZXJcIjtcbmltcG9ydCB7IGdldENhcmRMaW5rIH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldENhcmRMaW5rUmVzb2x2ZXJcIjtcbmltcG9ydCB7YWRkQ2FyZH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0FkZENhcmRSZXNvbHZlclwiO1xuaW1wb3J0IHsgZ2V0RWxpZ2libGVMaW5rZWRVc2VycyB9IGZyb20gXCIuL3Jlc29sdmVycy9HZXRFbGlnaWJsZUxpbmtlZFVzZXJzUmVzb2x2ZXJcIjtcblxuLyoqXG4gKiBNYXBwaW5nIG91dCB0aGUgQXBwIFN5bmMgZXZlbnQgdHlwZSwgc28gd2UgY2FuIHVzZSBpdCBhcyBhIHR5cGUgaW4gdGhlIExhbWJkYSBIYW5kbGVyXG4gKi9cbnR5cGUgQXBwU3luY0V2ZW50ID0ge1xuICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmdcbiAgICB9LFxuICAgIGFyZ3VtZW50czoge1xuICAgICAgICBhZGRDYXJkSW5wdXQ6IEFkZENhcmRJbnB1dCxcbiAgICAgICAgZ2V0Q2FyZExpbmtJbnB1dDogR2V0Q2FyZExpbmtJbnB1dCxcbiAgICAgICAgY3JlYXRlQ2FyZExpbmtJbnB1dDogQ3JlYXRlQ2FyZExpbmtJbnB1dCxcbiAgICAgICAgZGVsZXRlQ2FyZElucHV0OiBEZWxldGVDYXJkSW5wdXRcbiAgICB9LFxuICAgIGlkZW50aXR5OiB7XG4gICAgICAgIHN1YiA6IHN0cmluZztcbiAgICAgICAgdXNlcm5hbWUgOiBzdHJpbmc7XG4gICAgfVxufVxuXG4vKipcbiAqIExhbWJkYSBGdW5jdGlvbiBoYW5kbGVyLCBoYW5kbGluZyBpbmNvbWluZyBldmVudHMsXG4gKiBkZXBlbmRpbmcgb24gdGhlIEFwcFN5bmMgZmllbGQgbmFtZS5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgQXBwU3luYyBldmVudCB0byBiZSBwYXNzZWQgaW4gdGhlIGhhbmRsZXJcbiAqIEByZXR1cm5zIGEge0BsaW5rIFByb21pc2V9IGNvbnRhaW5pbmcgYSB7QGxpbmsgQ2FyZExpbmtSZXNwb25zZX0gb3Ige0BsaW5rIENhcmRSZXNwb25zZX1cbiAqL1xuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBcHBTeW5jRXZlbnQpOiBQcm9taXNlPENhcmRMaW5rUmVzcG9uc2UgfCBDYXJkUmVzcG9uc2UgfCBFbGlnaWJsZUxpbmtlZFVzZXJzUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgbmV3IHN0b3JhZ2UgZXZlbnQgZm9yIG9wZXJhdGlvbiBbJHtldmVudC5pbmZvLmZpZWxkTmFtZX1dLCB3aXRoIGFyZ3VtZW50cyAke0pTT04uc3RyaW5naWZ5KGV2ZW50LmFyZ3VtZW50cyl9YCk7XG4gICAgc3dpdGNoIChldmVudC5pbmZvLmZpZWxkTmFtZSkge1xuICAgICAgICBjYXNlIFwiYWRkQ2FyZFwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGFkZENhcmQoZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5hZGRDYXJkSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0Q2FyZExpbmtcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRDYXJkTGluayhldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmdldENhcmRMaW5rSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0RWxpZ2libGVMaW5rZWRVc2Vyc1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldEVsaWdpYmxlTGlua2VkVXNlcnMoZXZlbnQuaW5mby5maWVsZE5hbWUpO1xuICAgICAgICBjYXNlIFwiY3JlYXRlQ2FyZExpbmtcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVDYXJkTGluayhldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmNyZWF0ZUNhcmRMaW5rSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZGVsZXRlQ2FyZFwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGRlbGV0ZUNhcmQoZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5kZWxldGVDYXJkSW5wdXQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYFVuZXhwZWN0ZWQgZmllbGQgbmFtZTogJHtldmVudC5pbmZvLmZpZWxkTmFtZX1gO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgZXJyb3JUeXBlOiBDYXJkTGlua0Vycm9yVHlwZS5VbmV4cGVjdGVkRXJyb3JcbiAgICAgICAgICAgIH07XG4gICAgfVxufVxuXG4iXX0=