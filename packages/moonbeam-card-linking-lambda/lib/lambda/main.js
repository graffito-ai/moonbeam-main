"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateCardLinkResolver_1 = require("./resolvers/CreateCardLinkResolver");
const DeleteCardResolver_1 = require("./resolvers/DeleteCardResolver");
const GetCardLinkResolver_1 = require("./resolvers/GetCardLinkResolver");
const AddCardResolver_1 = require("./resolvers/AddCardResolver");
const GetEligibleLinkedUsersResolver_1 = require("./resolvers/GetEligibleLinkedUsersResolver");
const GetUsersWithNoCardsResolver_1 = require("./resolvers/GetUsersWithNoCardsResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 * @returns a {@link Promise} containing a {@link CardLinkResponse}, {@link CardResponse},
 *          @link EligibleLinkedUsersResponse} or {@link IneligibleLinkedUsersResponse}.
 */
exports.handler = async (event) => {
    console.log(`Received new storage event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "addCard":
            return await (0, AddCardResolver_1.addCard)(event.info.fieldName, event.arguments.addCardInput);
        case "getCardLink":
            return await (0, GetCardLinkResolver_1.getCardLink)(event.info.fieldName, event.arguments.getCardLinkInput);
        case "getEligibleLinkedUsers":
            return await (0, GetEligibleLinkedUsersResolver_1.getEligibleLinkedUsers)(event.info.fieldName);
        case 'getUsersWithNoCards':
            return await (0, GetUsersWithNoCardsResolver_1.getUsersWithNoCards)(event.info.fieldName);
        case "createCardLink":
            return await (0, CreateCardLinkResolver_1.createCardLink)(event.info.fieldName, event.arguments.createCardLinkInput);
        case "deleteCard":
            return await (0, DeleteCardResolver_1.deleteCard)(event.info.fieldName, event.arguments.deleteCardInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.CardLinkErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQU9tQztBQUNuQywrRUFBa0U7QUFDbEUsdUVBQTREO0FBQzVELHlFQUE4RDtBQUM5RCxpRUFBb0Q7QUFDcEQsK0ZBQW9GO0FBQ3BGLHlGQUE0RTtBQXFCNUU7Ozs7Ozs7R0FPRztBQUNILE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQW1CLEVBQTBHLEVBQUU7SUFDcEosT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDckksUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUMxQixLQUFLLFNBQVM7WUFDVixPQUFPLE1BQU0sSUFBQSx5QkFBTyxFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDN0UsS0FBSyxhQUFhO1lBQ2QsT0FBTyxNQUFNLElBQUEsaUNBQVcsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDckYsS0FBSyx3QkFBd0I7WUFDekIsT0FBTyxNQUFNLElBQUEsdURBQXNCLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5RCxLQUFLLHFCQUFxQjtZQUN0QixPQUFPLE1BQU0sSUFBQSxpREFBbUIsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzNELEtBQUssZ0JBQWdCO1lBQ2pCLE9BQU8sTUFBTSxJQUFBLHVDQUFjLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzNGLEtBQUssWUFBWTtZQUNiLE9BQU8sTUFBTSxJQUFBLCtCQUFVLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNuRjtZQUNJLE1BQU0sWUFBWSxHQUFHLDBCQUEwQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTztnQkFDSCxZQUFZLEVBQUUsWUFBWTtnQkFDMUIsU0FBUyxFQUFFLG1DQUFpQixDQUFDLGVBQWU7YUFDL0MsQ0FBQztLQUNUO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBZGRDYXJkSW5wdXQsXG4gICAgQ2FyZExpbmtFcnJvclR5cGUsXG4gICAgQ2FyZExpbmtSZXNwb25zZSwgQ2FyZFJlc3BvbnNlLFxuICAgIENyZWF0ZUNhcmRMaW5rSW5wdXQsXG4gICAgRGVsZXRlQ2FyZElucHV0LCBFbGlnaWJsZUxpbmtlZFVzZXJzUmVzcG9uc2UsXG4gICAgR2V0Q2FyZExpbmtJbnB1dCwgSW5lbGlnaWJsZUxpbmtlZFVzZXJzUmVzcG9uc2Vcbn0gZnJvbSBcIkBtb29uYmVhbS9tb29uYmVhbS1tb2RlbHNcIjtcbmltcG9ydCB7Y3JlYXRlQ2FyZExpbmt9IGZyb20gXCIuL3Jlc29sdmVycy9DcmVhdGVDYXJkTGlua1Jlc29sdmVyXCI7XG5pbXBvcnQgeyBkZWxldGVDYXJkIH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0RlbGV0ZUNhcmRSZXNvbHZlclwiO1xuaW1wb3J0IHsgZ2V0Q2FyZExpbmsgfSBmcm9tIFwiLi9yZXNvbHZlcnMvR2V0Q2FyZExpbmtSZXNvbHZlclwiO1xuaW1wb3J0IHthZGRDYXJkfSBmcm9tIFwiLi9yZXNvbHZlcnMvQWRkQ2FyZFJlc29sdmVyXCI7XG5pbXBvcnQgeyBnZXRFbGlnaWJsZUxpbmtlZFVzZXJzIH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldEVsaWdpYmxlTGlua2VkVXNlcnNSZXNvbHZlclwiO1xuaW1wb3J0IHtnZXRVc2Vyc1dpdGhOb0NhcmRzfSBmcm9tIFwiLi9yZXNvbHZlcnMvR2V0VXNlcnNXaXRoTm9DYXJkc1Jlc29sdmVyXCI7XG5cbi8qKlxuICogTWFwcGluZyBvdXQgdGhlIEFwcCBTeW5jIGV2ZW50IHR5cGUsIHNvIHdlIGNhbiB1c2UgaXQgYXMgYSB0eXBlIGluIHRoZSBMYW1iZGEgSGFuZGxlclxuICovXG50eXBlIEFwcFN5bmNFdmVudCA9IHtcbiAgICBpbmZvOiB7XG4gICAgICAgIGZpZWxkTmFtZTogc3RyaW5nXG4gICAgfSxcbiAgICBhcmd1bWVudHM6IHtcbiAgICAgICAgYWRkQ2FyZElucHV0OiBBZGRDYXJkSW5wdXQsXG4gICAgICAgIGdldENhcmRMaW5rSW5wdXQ6IEdldENhcmRMaW5rSW5wdXQsXG4gICAgICAgIGNyZWF0ZUNhcmRMaW5rSW5wdXQ6IENyZWF0ZUNhcmRMaW5rSW5wdXQsXG4gICAgICAgIGRlbGV0ZUNhcmRJbnB1dDogRGVsZXRlQ2FyZElucHV0XG4gICAgfSxcbiAgICBpZGVudGl0eToge1xuICAgICAgICBzdWIgOiBzdHJpbmc7XG4gICAgICAgIHVzZXJuYW1lIDogc3RyaW5nO1xuICAgIH1cbn1cblxuLyoqXG4gKiBMYW1iZGEgRnVuY3Rpb24gaGFuZGxlciwgaGFuZGxpbmcgaW5jb21pbmcgZXZlbnRzLFxuICogZGVwZW5kaW5nIG9uIHRoZSBBcHBTeW5jIGZpZWxkIG5hbWUuXG4gKlxuICogQHBhcmFtIGV2ZW50IEFwcFN5bmMgZXZlbnQgdG8gYmUgcGFzc2VkIGluIHRoZSBoYW5kbGVyXG4gKiBAcmV0dXJucyBhIHtAbGluayBQcm9taXNlfSBjb250YWluaW5nIGEge0BsaW5rIENhcmRMaW5rUmVzcG9uc2V9LCB7QGxpbmsgQ2FyZFJlc3BvbnNlfSxcbiAqICAgICAgICAgIEBsaW5rIEVsaWdpYmxlTGlua2VkVXNlcnNSZXNwb25zZX0gb3Ige0BsaW5rIEluZWxpZ2libGVMaW5rZWRVc2Vyc1Jlc3BvbnNlfS5cbiAqL1xuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBcHBTeW5jRXZlbnQpOiBQcm9taXNlPENhcmRMaW5rUmVzcG9uc2UgfCBDYXJkUmVzcG9uc2UgfCBFbGlnaWJsZUxpbmtlZFVzZXJzUmVzcG9uc2UgfCBJbmVsaWdpYmxlTGlua2VkVXNlcnNSZXNwb25zZT4gPT4ge1xuICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCBuZXcgc3RvcmFnZSBldmVudCBmb3Igb3BlcmF0aW9uIFske2V2ZW50LmluZm8uZmllbGROYW1lfV0sIHdpdGggYXJndW1lbnRzICR7SlNPTi5zdHJpbmdpZnkoZXZlbnQuYXJndW1lbnRzKX1gKTtcbiAgICBzd2l0Y2ggKGV2ZW50LmluZm8uZmllbGROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJhZGRDYXJkXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgYWRkQ2FyZChldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmFkZENhcmRJbnB1dCk7XG4gICAgICAgIGNhc2UgXCJnZXRDYXJkTGlua1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldENhcmRMaW5rKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMuZ2V0Q2FyZExpbmtJbnB1dCk7XG4gICAgICAgIGNhc2UgXCJnZXRFbGlnaWJsZUxpbmtlZFVzZXJzXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0RWxpZ2libGVMaW5rZWRVc2VycyhldmVudC5pbmZvLmZpZWxkTmFtZSk7XG4gICAgICAgIGNhc2UgJ2dldFVzZXJzV2l0aE5vQ2FyZHMnOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldFVzZXJzV2l0aE5vQ2FyZHMoZXZlbnQuaW5mby5maWVsZE5hbWUpO1xuICAgICAgICBjYXNlIFwiY3JlYXRlQ2FyZExpbmtcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVDYXJkTGluayhldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmNyZWF0ZUNhcmRMaW5rSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZGVsZXRlQ2FyZFwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGRlbGV0ZUNhcmQoZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5kZWxldGVDYXJkSW5wdXQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYFVuZXhwZWN0ZWQgZmllbGQgbmFtZTogJHtldmVudC5pbmZvLmZpZWxkTmFtZX1gO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgZXJyb3JUeXBlOiBDYXJkTGlua0Vycm9yVHlwZS5VbmV4cGVjdGVkRXJyb3JcbiAgICAgICAgICAgIH07XG4gICAgfVxufVxuXG4iXX0=