"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateCardLinkResolver_1 = require("./resolvers/CreateCardLinkResolver");
const DeleteCardResolver_1 = require("./resolvers/DeleteCardResolver");
const GetCardLinkResolver_1 = require("./resolvers/GetCardLinkResolver");
const AddCardResolver_1 = require("./resolvers/AddCardResolver");
const GetEligibleLinkedUsersResolver_1 = require("./resolvers/GetEligibleLinkedUsersResolver");
const GetUsersWithNoCardsResolver_1 = require("./resolvers/GetUsersWithNoCardsResolver");
const GetUserCardLinkingIdResolver_1 = require("./resolvers/GetUserCardLinkingIdResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 * @returns a {@link Promise} containing a {@link CardLinkResponse}, {@link CardResponse}, {@link EligibleLinkedUsersResponse}, {@link IneligibleLinkedUsersResponse} or {@link GetUserCardLinkingIdResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new storage event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "addCard":
            return await (0, AddCardResolver_1.addCard)(event.info.fieldName, event.arguments.addCardInput);
        case "getUserCardLinkingId":
            return await (0, GetUserCardLinkingIdResolver_1.getUserCardLinkingId)(event.info.fieldName, event.arguments.getUserCardLinkingIdInput);
        case "getCardLink":
            return await (0, GetCardLinkResolver_1.getCardLink)(event.info.fieldName, event.arguments.getCardLinkInput);
        case "getEligibleLinkedUsers":
            return await (0, GetEligibleLinkedUsersResolver_1.getEligibleLinkedUsers)(event.info.fieldName);
        case 'getUsersWithNoCards':
            return await (0, GetUsersWithNoCardsResolver_1.getUsersWithNoCards)(event.info.fieldName);
        case "createCardLink":
            return await (0, CreateCardLinkResolver_1.createCardLink)(event.info.fieldName, event.arguments.createCardLinkInput);
        case "deleteCard":
            return await (0, DeleteCardResolver_1.deleteCard)(event.info.fieldName, event.arguments.deleteCardInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.CardLinkErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQU9tQztBQUNuQywrRUFBa0U7QUFDbEUsdUVBQTREO0FBQzVELHlFQUE4RDtBQUM5RCxpRUFBb0Q7QUFDcEQsK0ZBQW9GO0FBQ3BGLHlGQUE0RTtBQUM1RSwyRkFBOEU7QUFzQjlFOzs7Ozs7R0FNRztBQUNILE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQW1CLEVBQXlJLEVBQUU7SUFDbkwsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDckksUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUMxQixLQUFLLFNBQVM7WUFDVixPQUFPLE1BQU0sSUFBQSx5QkFBTyxFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDN0UsS0FBSyxzQkFBc0I7WUFDdkIsT0FBTyxNQUFNLElBQUEsbURBQW9CLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3ZHLEtBQUssYUFBYTtZQUNkLE9BQU8sTUFBTSxJQUFBLGlDQUFXLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3JGLEtBQUssd0JBQXdCO1lBQ3pCLE9BQU8sTUFBTSxJQUFBLHVEQUFzQixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUQsS0FBSyxxQkFBcUI7WUFDdEIsT0FBTyxNQUFNLElBQUEsaURBQW1CLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzRCxLQUFLLGdCQUFnQjtZQUNqQixPQUFPLE1BQU0sSUFBQSx1Q0FBYyxFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUMzRixLQUFLLFlBQVk7WUFDYixPQUFPLE1BQU0sSUFBQSwrQkFBVSxFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbkY7WUFDSSxNQUFNLFlBQVksR0FBRywwQkFBMEIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN0RSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE9BQU87Z0JBQ0gsWUFBWSxFQUFFLFlBQVk7Z0JBQzFCLFNBQVMsRUFBRSxtQ0FBaUIsQ0FBQyxlQUFlO2FBQy9DLENBQUM7S0FDVDtBQUNMLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQWRkQ2FyZElucHV0LFxuICAgIENhcmRMaW5rRXJyb3JUeXBlLFxuICAgIENhcmRMaW5rUmVzcG9uc2UsIENhcmRSZXNwb25zZSxcbiAgICBDcmVhdGVDYXJkTGlua0lucHV0LFxuICAgIERlbGV0ZUNhcmRJbnB1dCwgRWxpZ2libGVMaW5rZWRVc2Vyc1Jlc3BvbnNlLFxuICAgIEdldENhcmRMaW5rSW5wdXQsIEdldFVzZXJDYXJkTGlua2luZ0lkSW5wdXQsIEdldFVzZXJDYXJkTGlua2luZ0lkUmVzcG9uc2UsIEluZWxpZ2libGVMaW5rZWRVc2Vyc1Jlc3BvbnNlXG59IGZyb20gXCJAbW9vbmJlYW0vbW9vbmJlYW0tbW9kZWxzXCI7XG5pbXBvcnQge2NyZWF0ZUNhcmRMaW5rfSBmcm9tIFwiLi9yZXNvbHZlcnMvQ3JlYXRlQ2FyZExpbmtSZXNvbHZlclwiO1xuaW1wb3J0IHsgZGVsZXRlQ2FyZCB9IGZyb20gXCIuL3Jlc29sdmVycy9EZWxldGVDYXJkUmVzb2x2ZXJcIjtcbmltcG9ydCB7IGdldENhcmRMaW5rIH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldENhcmRMaW5rUmVzb2x2ZXJcIjtcbmltcG9ydCB7YWRkQ2FyZH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0FkZENhcmRSZXNvbHZlclwiO1xuaW1wb3J0IHsgZ2V0RWxpZ2libGVMaW5rZWRVc2VycyB9IGZyb20gXCIuL3Jlc29sdmVycy9HZXRFbGlnaWJsZUxpbmtlZFVzZXJzUmVzb2x2ZXJcIjtcbmltcG9ydCB7Z2V0VXNlcnNXaXRoTm9DYXJkc30gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldFVzZXJzV2l0aE5vQ2FyZHNSZXNvbHZlclwiO1xuaW1wb3J0IHtnZXRVc2VyQ2FyZExpbmtpbmdJZH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldFVzZXJDYXJkTGlua2luZ0lkUmVzb2x2ZXJcIjtcblxuLyoqXG4gKiBNYXBwaW5nIG91dCB0aGUgQXBwIFN5bmMgZXZlbnQgdHlwZSwgc28gd2UgY2FuIHVzZSBpdCBhcyBhIHR5cGUgaW4gdGhlIExhbWJkYSBIYW5kbGVyXG4gKi9cbnR5cGUgQXBwU3luY0V2ZW50ID0ge1xuICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmdcbiAgICB9LFxuICAgIGFyZ3VtZW50czoge1xuICAgICAgICBhZGRDYXJkSW5wdXQ6IEFkZENhcmRJbnB1dCxcbiAgICAgICAgZ2V0Q2FyZExpbmtJbnB1dDogR2V0Q2FyZExpbmtJbnB1dCxcbiAgICAgICAgY3JlYXRlQ2FyZExpbmtJbnB1dDogQ3JlYXRlQ2FyZExpbmtJbnB1dCxcbiAgICAgICAgZGVsZXRlQ2FyZElucHV0OiBEZWxldGVDYXJkSW5wdXQsXG4gICAgICAgIGdldFVzZXJDYXJkTGlua2luZ0lkSW5wdXQ6IEdldFVzZXJDYXJkTGlua2luZ0lkSW5wdXRcbiAgICB9LFxuICAgIGlkZW50aXR5OiB7XG4gICAgICAgIHN1YiA6IHN0cmluZztcbiAgICAgICAgdXNlcm5hbWUgOiBzdHJpbmc7XG4gICAgfVxufVxuXG4vKipcbiAqIExhbWJkYSBGdW5jdGlvbiBoYW5kbGVyLCBoYW5kbGluZyBpbmNvbWluZyBldmVudHMsXG4gKiBkZXBlbmRpbmcgb24gdGhlIEFwcFN5bmMgZmllbGQgbmFtZS5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgQXBwU3luYyBldmVudCB0byBiZSBwYXNzZWQgaW4gdGhlIGhhbmRsZXJcbiAqIEByZXR1cm5zIGEge0BsaW5rIFByb21pc2V9IGNvbnRhaW5pbmcgYSB7QGxpbmsgQ2FyZExpbmtSZXNwb25zZX0sIHtAbGluayBDYXJkUmVzcG9uc2V9LCB7QGxpbmsgRWxpZ2libGVMaW5rZWRVc2Vyc1Jlc3BvbnNlfSwge0BsaW5rIEluZWxpZ2libGVMaW5rZWRVc2Vyc1Jlc3BvbnNlfSBvciB7QGxpbmsgR2V0VXNlckNhcmRMaW5raW5nSWRSZXNwb25zZX1cbiAqL1xuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBcHBTeW5jRXZlbnQpOiBQcm9taXNlPENhcmRMaW5rUmVzcG9uc2UgfCBDYXJkUmVzcG9uc2UgfCBFbGlnaWJsZUxpbmtlZFVzZXJzUmVzcG9uc2UgfCBJbmVsaWdpYmxlTGlua2VkVXNlcnNSZXNwb25zZSB8IEdldFVzZXJDYXJkTGlua2luZ0lkUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgbmV3IHN0b3JhZ2UgZXZlbnQgZm9yIG9wZXJhdGlvbiBbJHtldmVudC5pbmZvLmZpZWxkTmFtZX1dLCB3aXRoIGFyZ3VtZW50cyAke0pTT04uc3RyaW5naWZ5KGV2ZW50LmFyZ3VtZW50cyl9YCk7XG4gICAgc3dpdGNoIChldmVudC5pbmZvLmZpZWxkTmFtZSkge1xuICAgICAgICBjYXNlIFwiYWRkQ2FyZFwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGFkZENhcmQoZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5hZGRDYXJkSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0VXNlckNhcmRMaW5raW5nSWRcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRVc2VyQ2FyZExpbmtpbmdJZChldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmdldFVzZXJDYXJkTGlua2luZ0lkSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0Q2FyZExpbmtcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRDYXJkTGluayhldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmdldENhcmRMaW5rSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0RWxpZ2libGVMaW5rZWRVc2Vyc1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldEVsaWdpYmxlTGlua2VkVXNlcnMoZXZlbnQuaW5mby5maWVsZE5hbWUpO1xuICAgICAgICBjYXNlICdnZXRVc2Vyc1dpdGhOb0NhcmRzJzpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRVc2Vyc1dpdGhOb0NhcmRzKGV2ZW50LmluZm8uZmllbGROYW1lKTtcbiAgICAgICAgY2FzZSBcImNyZWF0ZUNhcmRMaW5rXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlQ2FyZExpbmsoZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5jcmVhdGVDYXJkTGlua0lucHV0KTtcbiAgICAgICAgY2FzZSBcImRlbGV0ZUNhcmRcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBkZWxldGVDYXJkKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMuZGVsZXRlQ2FyZElucHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6ICR7ZXZlbnQuaW5mby5maWVsZE5hbWV9YDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgIGVycm9yVHlwZTogQ2FyZExpbmtFcnJvclR5cGUuVW5leHBlY3RlZEVycm9yXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cblxuIl19