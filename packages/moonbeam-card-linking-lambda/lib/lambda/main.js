"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateCardLinkResolver_1 = require("./resolvers/CreateCardLinkResolver");
const DeleteCardResolver_1 = require("./resolvers/DeleteCardResolver");
const GetCardLinkResolver_1 = require("./resolvers/GetCardLinkResolver");
const AddCardResolver_1 = require("./resolvers/AddCardResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 */
exports.handler = async (event) => {
    console.log(`Received new storage event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "addCard":
            return await (0, AddCardResolver_1.addCard)(event.arguments.addCardInput);
        case "getCardLink":
            return await (0, GetCardLinkResolver_1.getCardLink)(event.arguments.getCardLinkInput);
        case "createCardLink":
            return await (0, CreateCardLinkResolver_1.createCardLink)(event.arguments.createCardLinkInput);
        case "deleteCard":
            return await (0, DeleteCardResolver_1.deleteCard)(event.arguments.deleteCardInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.CardLinkErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQU9tQztBQUNuQywrRUFBa0U7QUFDbEUsdUVBQTREO0FBQzVELHlFQUE4RDtBQUM5RCxpRUFBb0Q7QUFxQnBEOzs7OztHQUtHO0FBQ0gsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBbUIsRUFBNEMsRUFBRTtJQUN0RixPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNySSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQzFCLEtBQUssU0FBUztZQUNWLE9BQU8sTUFBTSxJQUFBLHlCQUFPLEVBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN2RCxLQUFLLGFBQWE7WUFDZCxPQUFPLE1BQU0sSUFBQSxpQ0FBVyxFQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMvRCxLQUFLLGdCQUFnQjtZQUNqQixPQUFPLE1BQU0sSUFBQSx1Q0FBYyxFQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNyRSxLQUFLLFlBQVk7WUFDYixPQUFPLE1BQU0sSUFBQSwrQkFBVSxFQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDN0Q7WUFDSSxNQUFNLFlBQVksR0FBRywwQkFBMEIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN0RSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE9BQU87Z0JBQ0gsWUFBWSxFQUFFLFlBQVk7Z0JBQzFCLFNBQVMsRUFBRSxtQ0FBaUIsQ0FBQyxlQUFlO2FBQy9DLENBQUM7S0FDVDtBQUNMLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQWRkQ2FyZElucHV0LFxuICAgIENhcmRMaW5rRXJyb3JUeXBlLFxuICAgIENhcmRMaW5rUmVzcG9uc2UsIENhcmRSZXNwb25zZSxcbiAgICBDcmVhdGVDYXJkTGlua0lucHV0LFxuICAgIERlbGV0ZUNhcmRJbnB1dCxcbiAgICBHZXRDYXJkTGlua0lucHV0XG59IGZyb20gXCJAbW9vbmJlYW0vbW9vbmJlYW0tbW9kZWxzXCI7XG5pbXBvcnQge2NyZWF0ZUNhcmRMaW5rfSBmcm9tIFwiLi9yZXNvbHZlcnMvQ3JlYXRlQ2FyZExpbmtSZXNvbHZlclwiO1xuaW1wb3J0IHsgZGVsZXRlQ2FyZCB9IGZyb20gXCIuL3Jlc29sdmVycy9EZWxldGVDYXJkUmVzb2x2ZXJcIjtcbmltcG9ydCB7IGdldENhcmRMaW5rIH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldENhcmRMaW5rUmVzb2x2ZXJcIjtcbmltcG9ydCB7YWRkQ2FyZH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0FkZENhcmRSZXNvbHZlclwiO1xuXG4vKipcbiAqIE1hcHBpbmcgb3V0IHRoZSBBcHAgU3luYyBldmVudCB0eXBlLCBzbyB3ZSBjYW4gdXNlIGl0IGFzIGEgdHlwZSBpbiB0aGUgTGFtYmRhIEhhbmRsZXJcbiAqL1xudHlwZSBBcHBTeW5jRXZlbnQgPSB7XG4gICAgaW5mbzoge1xuICAgICAgICBmaWVsZE5hbWU6IHN0cmluZ1xuICAgIH0sXG4gICAgYXJndW1lbnRzOiB7XG4gICAgICAgIGFkZENhcmRJbnB1dDogQWRkQ2FyZElucHV0LFxuICAgICAgICBnZXRDYXJkTGlua0lucHV0OiBHZXRDYXJkTGlua0lucHV0LFxuICAgICAgICBjcmVhdGVDYXJkTGlua0lucHV0OiBDcmVhdGVDYXJkTGlua0lucHV0LFxuICAgICAgICBkZWxldGVDYXJkSW5wdXQ6IERlbGV0ZUNhcmRJbnB1dFxuICAgIH0sXG4gICAgaWRlbnRpdHk6IHtcbiAgICAgICAgc3ViIDogc3RyaW5nO1xuICAgICAgICB1c2VybmFtZSA6IHN0cmluZztcbiAgICB9XG59XG5cbi8qKlxuICogTGFtYmRhIEZ1bmN0aW9uIGhhbmRsZXIsIGhhbmRsaW5nIGluY29taW5nIGV2ZW50cyxcbiAqIGRlcGVuZGluZyBvbiB0aGUgQXBwU3luYyBmaWVsZCBuYW1lLlxuICpcbiAqIEBwYXJhbSBldmVudCBBcHBTeW5jIGV2ZW50IHRvIGJlIHBhc3NlZCBpbiB0aGUgaGFuZGxlclxuICovXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFwcFN5bmNFdmVudCk6IFByb21pc2U8Q2FyZExpbmtSZXNwb25zZSB8IENhcmRSZXNwb25zZT4gPT4ge1xuICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCBuZXcgc3RvcmFnZSBldmVudCBmb3Igb3BlcmF0aW9uIFske2V2ZW50LmluZm8uZmllbGROYW1lfV0sIHdpdGggYXJndW1lbnRzICR7SlNPTi5zdHJpbmdpZnkoZXZlbnQuYXJndW1lbnRzKX1gKTtcbiAgICBzd2l0Y2ggKGV2ZW50LmluZm8uZmllbGROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJhZGRDYXJkXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgYWRkQ2FyZChldmVudC5hcmd1bWVudHMuYWRkQ2FyZElucHV0KTtcbiAgICAgICAgY2FzZSBcImdldENhcmRMaW5rXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0Q2FyZExpbmsoZXZlbnQuYXJndW1lbnRzLmdldENhcmRMaW5rSW5wdXQpO1xuICAgICAgICBjYXNlIFwiY3JlYXRlQ2FyZExpbmtcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVDYXJkTGluayhldmVudC5hcmd1bWVudHMuY3JlYXRlQ2FyZExpbmtJbnB1dCk7XG4gICAgICAgIGNhc2UgXCJkZWxldGVDYXJkXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZGVsZXRlQ2FyZChldmVudC5hcmd1bWVudHMuZGVsZXRlQ2FyZElucHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6ICR7ZXZlbnQuaW5mby5maWVsZE5hbWV9YDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgIGVycm9yVHlwZTogQ2FyZExpbmtFcnJvclR5cGUuVW5leHBlY3RlZEVycm9yXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cblxuIl19