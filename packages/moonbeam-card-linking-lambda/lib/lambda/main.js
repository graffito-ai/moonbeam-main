"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateCardLinkResolver_1 = require("./resolvers/CreateCardLinkResolver");
const DeleteCardResolver_1 = require("./resolvers/DeleteCardResolver");
const GetCardLinkResolver_1 = require("./resolvers/GetCardLinkResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 */
exports.handler = async (event) => {
    console.log(`Received new storage event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getCardLink":
            return await (0, GetCardLinkResolver_1.getCardLink)(event.arguments.getCardLinkInput);
        case "createCardLink":
            return await (0, CreateCardLinkResolver_1.createCardLink)(event.arguments.createCardLinkInput);
        case "deleteCard":
            return await (0, DeleteCardResolver_1.deleteCard)(event.arguments.deleteCardInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.CardLinkErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQU1tQztBQUNuQywrRUFBa0U7QUFDbEUsdUVBQTREO0FBQzVELHlFQUE4RDtBQW9COUQ7Ozs7O0dBS0c7QUFDSCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFtQixFQUE0QyxFQUFFO0lBQ3RGLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JJLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDMUIsS0FBSyxhQUFhO1lBQ2QsT0FBTyxNQUFNLElBQUEsaUNBQVcsRUFBQyxLQUFLLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDL0QsS0FBSyxnQkFBZ0I7WUFDakIsT0FBTyxNQUFNLElBQUEsdUNBQWMsRUFBQyxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDckUsS0FBSyxZQUFZO1lBQ2IsT0FBTyxNQUFNLElBQUEsK0JBQVUsRUFBQyxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzdEO1lBQ0ksTUFBTSxZQUFZLEdBQUcsMEJBQTBCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxQixPQUFPO2dCQUNILFlBQVksRUFBRSxZQUFZO2dCQUMxQixTQUFTLEVBQUUsbUNBQWlCLENBQUMsZUFBZTthQUMvQyxDQUFDO0tBQ1Q7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENhcmRMaW5rRXJyb3JUeXBlLFxuICAgIENhcmRMaW5rUmVzcG9uc2UsIENhcmRSZXNwb25zZSxcbiAgICBDcmVhdGVDYXJkTGlua0lucHV0LFxuICAgIERlbGV0ZUNhcmRJbnB1dCxcbiAgICBHZXRDYXJkTGlua0lucHV0XG59IGZyb20gXCJAbW9vbmJlYW0vbW9vbmJlYW0tbW9kZWxzXCI7XG5pbXBvcnQge2NyZWF0ZUNhcmRMaW5rfSBmcm9tIFwiLi9yZXNvbHZlcnMvQ3JlYXRlQ2FyZExpbmtSZXNvbHZlclwiO1xuaW1wb3J0IHsgZGVsZXRlQ2FyZCB9IGZyb20gXCIuL3Jlc29sdmVycy9EZWxldGVDYXJkUmVzb2x2ZXJcIjtcbmltcG9ydCB7IGdldENhcmRMaW5rIH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldENhcmRMaW5rUmVzb2x2ZXJcIjtcblxuLyoqXG4gKiBNYXBwaW5nIG91dCB0aGUgQXBwIFN5bmMgZXZlbnQgdHlwZSwgc28gd2UgY2FuIHVzZSBpdCBhcyBhIHR5cGUgaW4gdGhlIExhbWJkYSBIYW5kbGVyXG4gKi9cbnR5cGUgQXBwU3luY0V2ZW50ID0ge1xuICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmdcbiAgICB9LFxuICAgIGFyZ3VtZW50czoge1xuICAgICAgICBnZXRDYXJkTGlua0lucHV0OiBHZXRDYXJkTGlua0lucHV0LFxuICAgICAgICBjcmVhdGVDYXJkTGlua0lucHV0OiBDcmVhdGVDYXJkTGlua0lucHV0LFxuICAgICAgICBkZWxldGVDYXJkSW5wdXQ6IERlbGV0ZUNhcmRJbnB1dFxuICAgIH0sXG4gICAgaWRlbnRpdHk6IHtcbiAgICAgICAgc3ViIDogc3RyaW5nO1xuICAgICAgICB1c2VybmFtZSA6IHN0cmluZztcbiAgICB9XG59XG5cbi8qKlxuICogTGFtYmRhIEZ1bmN0aW9uIGhhbmRsZXIsIGhhbmRsaW5nIGluY29taW5nIGV2ZW50cyxcbiAqIGRlcGVuZGluZyBvbiB0aGUgQXBwU3luYyBmaWVsZCBuYW1lLlxuICpcbiAqIEBwYXJhbSBldmVudCBBcHBTeW5jIGV2ZW50IHRvIGJlIHBhc3NlZCBpbiB0aGUgaGFuZGxlclxuICovXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFwcFN5bmNFdmVudCk6IFByb21pc2U8Q2FyZExpbmtSZXNwb25zZSB8IENhcmRSZXNwb25zZT4gPT4ge1xuICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCBuZXcgc3RvcmFnZSBldmVudCBmb3Igb3BlcmF0aW9uIFske2V2ZW50LmluZm8uZmllbGROYW1lfV0sIHdpdGggYXJndW1lbnRzICR7SlNPTi5zdHJpbmdpZnkoZXZlbnQuYXJndW1lbnRzKX1gKTtcbiAgICBzd2l0Y2ggKGV2ZW50LmluZm8uZmllbGROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJnZXRDYXJkTGlua1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldENhcmRMaW5rKGV2ZW50LmFyZ3VtZW50cy5nZXRDYXJkTGlua0lucHV0KTtcbiAgICAgICAgY2FzZSBcImNyZWF0ZUNhcmRMaW5rXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlQ2FyZExpbmsoZXZlbnQuYXJndW1lbnRzLmNyZWF0ZUNhcmRMaW5rSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZGVsZXRlQ2FyZFwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGRlbGV0ZUNhcmQoZXZlbnQuYXJndW1lbnRzLmRlbGV0ZUNhcmRJbnB1dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgVW5leHBlY3RlZCBmaWVsZCBuYW1lOiAke2V2ZW50LmluZm8uZmllbGROYW1lfWA7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBlcnJvclR5cGU6IENhcmRMaW5rRXJyb3JUeXBlLlVuZXhwZWN0ZWRFcnJvclxuICAgICAgICAgICAgfTtcbiAgICB9XG59XG5cbiJdfQ==