"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAPIClient = void 0;
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const Constants_1 = require("../Constants");
const GraphqlExports_1 = require("../GraphqlExports");
/**
 * Class used as the base/generic client for all API clients that
 * we will be connecting to.
 */
class BaseAPIClient {
    // The Secrets Manager client, to be used while retrieving secrets related to clients.
    secretsClient;
    // The AWS region that the API client will be initialized in
    region;
    // The AWS environment that the API client will be initialized in
    environment;
    /**
     * Generic constructor for the API client.
     *
     * @param region the AWS region passed in from the Lambda resolver.
     * @param environment the AWS environment passed in from the Lambda resolver.
     */
    constructor(region, environment) {
        this.region = region;
        this.environment = environment;
        this.secretsClient = new client_secrets_manager_1.SecretsManagerClient({ region: region });
    }
    /**
     * Function used to retrieve various service credentials, used by any API clients, through the
     * Secrets Manager client.
     *
     * @param verificationClientSecretsName the name of the API client's secrets pair
     * @param internalRestBased optional flag indicating whether the key is REST or GraphQL/AppSync based
     *                          in case of internal-used based keys
     * @param notificationType  optional type indicating the type of notification, for which we are retrieving
     *                          specific secret configuration for
     * @param includeLoyaltyPrograms optional type indicating whether to include the loyalty program secret keys,
     *                               used for Olive calls
     * @param cognitoClientAccess optional type indicating whether to include the cognito access credentials/keys,
     *                            used for internal-based calls
     * @param channelType optional type indicating the type of channel, for which we are retrieving specific secret
     *                    configuration for
     *
     * @return a {@link Promise} of a {@link string} pair, containing various secrets to be used
     */
    async retrieveServiceCredentials(verificationClientSecretsName, internalRestBased, notificationType, includeLoyaltyPrograms, cognitoClientAccess, channelType) {
        try {
            // retrieve the secrets pair for the API client, depending on the current environment and region
            const verificationClientAPIPair = await this.secretsClient
                .send(new client_secrets_manager_1.GetSecretValueCommand(({ SecretId: `${verificationClientSecretsName}-${this.environment}-${this.region}` })));
            // check if the secrets for the API Client exist
            if (verificationClientAPIPair.SecretString) {
                // convert the retrieved secrets pair value, as a JSON object
                const clientPairAsJson = JSON.parse(verificationClientAPIPair.SecretString);
                // filter out and set the necessary API Client API credentials, depending on the client secret name passed in
                switch (verificationClientSecretsName) {
                    case Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_SECRET_NAME:
                        if (cognitoClientAccess !== undefined && cognitoClientAccess) {
                            return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.CONGITO_CLI_ACCESS_KEY_ID], clientPairAsJson[Constants_1.Constants.AWSPairConstants.COGNITO_CLI_SECRET_ACCESS_KEY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.COGNITO_USER_POOL_ID]];
                        }
                        else {
                            return internalRestBased !== undefined && internalRestBased
                                ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_REST_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_REST_API_KEY]]
                                : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_API_KEY]];
                        }
                    case Constants_1.Constants.AWSPairConstants.APP_UPGRADE_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.APP_UPGRADE_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.APP_UPGRADE_API_KEY]];
                    case Constants_1.Constants.AWSPairConstants.GOOGLE_MAPS_APIS_INTERNAL_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.GOOGLE_MAPS_APIS_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.GOOGLE_MAPS_APIS_IOS_KEY],
                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.GOOGLE_MAPS_APIS_ANDROID_KEY], clientPairAsJson[Constants_1.Constants.AWSPairConstants.GOOGLE_MAPS_ANDROID_SHA],
                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.GOOGLE_MAPS_APIS_KEY]];
                    case Constants_1.Constants.AWSPairConstants.EVENTBRITE_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.EVENTBRITE_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.EVENTBRITE_API_KEY]];
                    case Constants_1.Constants.AWSPairConstants.PLAID_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.PLAID_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.PLAID_CLIENT_ID],
                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.PLAID_SECRET_KEY]];
                    case Constants_1.Constants.AWSPairConstants.COURIER_INTERNAL_SECRET_NAME:
                        // return the appropriate secrets, depending on the type of notification passed in
                        if (!notificationType) {
                            console.log(`Invalid notification type to retrieve secrets in ${verificationClientSecretsName}`);
                            return [null, null];
                        }
                        else {
                            switch (notificationType) {
                                case GraphqlExports_1.NotificationType.NewUserSignup:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.NEW_USER_SIGNUP_NOTIFICATION_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.NEW_USER_SIGNUP_NOTIFICATION_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.NewQualifyingOfferAvailable:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.NEW_QUALIFYING_OFFER_NOTIFICATION_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.NEW_QUALIFYING_OFFER_NOTIFICATION_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.IneligibleTransaction:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_NEW_INELIGIBLE_TRANSACTION_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_NEW_INELIGIBLE_TRANSACTION_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.DailyEarningsSummary:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_DAILY_EARNINGS_SUMMARY_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_DAILY_EARNINGS_SUMMARY_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_DAILY_EARNINGS_SUMMARY_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_DAILY_EARNINGS_SUMMARY_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_DAILY_EARNINGS_SUMMARY_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_DAILY_EARNINGS_SUMMARY_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.LocationBasedOfferReminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_LOCATION_BASED_UPDATE_NOTIFICATION_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_LOCATION_BASED_UPDATE_NOTIFICATION_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.MilitaryStatusChangedPendingToRejected:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_REJECTED_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_REJECTED_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_STATUS_CHANGED_PENDING_TO_REJECTED_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_STATUS_CHANGED_PENDING_TO_REJECTED_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_REJECTED_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_REJECTED_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.MilitaryStatusChangedPendingToVerified:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_VERIFIED_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_VERIFIED_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_STATUS_CHANGED_PENDING_TO_VERIFIED_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_STATUS_CHANGED_PENDING_TO_VERIFIED_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_VERIFIED_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_VERIFIED_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.CardLinkingReminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_CARD_LINKING_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_CARD_LINKING_REMINDER_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_CARD_LINKING_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_CARD_LINKING_REMINDER_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_CARD_LINKING_REMINDER_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_CARD_LINKING_REMINDER_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.NewMapFeatureReminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_NEW_MAP_FEATURE_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_NEW_MAP_FEATURE_REMINDER_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_NEW_MAP_FEATURE_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_NEW_MAP_FEATURE_REMINDER_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_NEW_MAP_FEATURE_REMINDER_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_NEW_MAP_FEATURE_REMINDER_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.VeteransDayTemplate_1Reminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_VETERANS_DAY_TEMPLATE_1_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_VETERANS_DAY_TEMPLATE_1_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.VeteransDayTemplate_2Reminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_VETERANS_DAY_TEMPLATE_2_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_VETERANS_DAY_TEMPLATE_2_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.VeteransDayTemplate_3Reminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_VETERANS_DAY_TEMPLATE_3_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_VETERANS_DAY_TEMPLATE_3_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_VETERANS_DAY_TEMPLATE_3_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_VETERANS_DAY_TEMPLATE_3_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_VETERANS_DAY_TEMPLATE_3_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_VETERANS_DAY_TEMPLATE_3_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.ReferralTemplateLaunch:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_LAUNCH_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_LAUNCH_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_REFERRAL_TEMPLATE_LAUNCH_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_REFERRAL_TEMPLATE_LAUNCH_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_LAUNCH_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_LAUNCH_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.ReferralTemplate_1Reminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_1_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_1_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_REFERRAL_TEMPLATE_1_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_REFERRAL_TEMPLATE_1_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_1_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_1_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.MultipleCardFeatureReminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_MULTIPLE_CARDS_FEATURE_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_MULTIPLE_CARDS_FEATURE_REMINDER_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_MULTIPLE_CARDS_FEATURE_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_MULTIPLE_CARDS_FEATURE_REMINDER_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_MULTIPLE_CARDS_FEATURE_REMINDER_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_MULTIPLE_CARDS_FEATURE_REMINDER_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.SanAntonioReferralTemplate_1Reminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_SAN_ANTONIO_REFERRAL_TEMPLATE_1_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_SAN_ANTONIO_REFERRAL_TEMPLATE_1_REMINDER_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_SAN_ANTONIO_REFERRAL_TEMPLATE_1_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_SAN_ANTONIO_REFERRAL_TEMPLATE_1_REMINDER_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_SAN_ANTONIO_REFERRAL_TEMPLATE_1_REMINDER_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_SAN_ANTONIO_REFERRAL_TEMPLATE_1_REMINDER_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.RoundupsWaitlistTemplate_1Reminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_ROUNDUPS_WAITLIST_TEMPLATE_1_REMINDER_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_ROUNDUPS_WAITLIST_TEMPLATE_1_REMINDER_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.ReimbursementsReminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REIMBURSEMENTS_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REIMBURSEMENTS_REMINDER_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_REIMBURSEMENTS_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_REIMBURSEMENTS_REMINDER_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REIMBURSEMENTS_REMINDER_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REIMBURSEMENTS_REMINDER_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.SpendingTemplate_1Reminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_SPENDING_REMINDER_TEMPLATE_1_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_SPENDING_REMINDER_TEMPLATE_1_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.SpouseFeatureReminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.SPOUSE_FEATURE_REMINDER_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.SPOUSE_FEATURE_REMINDER_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.FeedbackTemplate_1Reminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.FEEDBACK_TEMPLATE_1_REMINDER_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.FEEDBACK_TEMPLATE_1_REMINDER_TEMPLATE_ID]];
                                default:
                                    console.log(`Unknown notifications type to retrieve secrets in ${verificationClientSecretsName}`);
                                    return [null, null];
                            }
                        }
                    case Constants_1.Constants.AWSPairConstants.QUANDIS_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.QUANDIS_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.QUANDIS_API_KEY]];
                    case Constants_1.Constants.AWSPairConstants.LIGHTHOUSE_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.LIGHTHOUSE_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.LIGHTHOUSE_API_KEY]];
                    case Constants_1.Constants.AWSPairConstants.OLIVE_SECRET_NAME:
                        return includeLoyaltyPrograms !== undefined
                            ? [
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_BASE_URL],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_PUBLIC_KEY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_PRIVATE_KEY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_DEFAULT_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_FIDELIS_DEFAULT_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_ONLINE_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_PREMIER_ONLINE_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_PREMIER_NEARBY_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_VETERANS_DAY_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_CLICK_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_PREMIER_CLICK_LOYALTY]
                            ]
                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_PUBLIC_KEY], clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_PRIVATE_KEY]];
                    default:
                        console.log(`Unknown API client secrets name passed in ${verificationClientSecretsName}`);
                        return [null, null];
                }
            }
            else {
                console.log(`API client secrets pair not available for ${verificationClientSecretsName}, ${verificationClientAPIPair}`);
                return [null, null];
            }
        }
        catch (err) {
            const errorMessage = `Unexpected error while retrieving an API Key ${err}`;
            console.log(errorMessage);
            throw new Error(errorMessage);
        }
    }
}
exports.BaseAPIClient = BaseAPIClient;
//# sourceMappingURL=data:application/json;base64,