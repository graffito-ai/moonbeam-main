"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAPIClient = void 0;
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const Constants_1 = require("../Constants");
const GraphqlExports_1 = require("../GraphqlExports");
/**
 * Class used as the base/generic client for all API clients that
 * we will be connecting to.
 */
class BaseAPIClient {
    // The Secrets Manager client, to be used while retrieving secrets related to clients.
    secretsClient;
    // The AWS region that the API client will be initialized in
    region;
    // The AWS environment that the API client will be initialized in
    environment;
    /**
     * Generic constructor for the API client.
     *
     * @param region the AWS region passed in from the Lambda resolver.
     * @param environment the AWS environment passed in from the Lambda resolver.
     */
    constructor(region, environment) {
        this.region = region;
        this.environment = environment;
        this.secretsClient = new client_secrets_manager_1.SecretsManagerClient({ region: region });
    }
    /**
     * Function used to retrieve various service credentials, used by any API clients, through the
     * Secrets Manager client.
     *
     * @param verificationClientSecretsName the name of the API client's secrets pair
     * @param internalRestBased optional flag indicating whether the key is REST or GraphQL/AppSync based
     *                          in case of internal-used based keys
     * @param notificationType  optional type indicating the type of notification, for which we are retrieving
     *                          specific secret configuration for
     * @param includeLoyaltyPrograms optional type indicating whether to include the loyalty program secret keys,
     *                               used for Olive calls
     * @param cognitoClientAccess optional type indicating whether to include the cognito access credentials/keys,
     *                            used for internal-based calls
     * @param channelType optional type indicating the type of channel, for which we are retrieving specific secret
     *                    configuration for
     *
     * @return a {@link Promise} of a {@link string} pair, containing various secrets to be used
     */
    async retrieveServiceCredentials(verificationClientSecretsName, internalRestBased, notificationType, includeLoyaltyPrograms, cognitoClientAccess, channelType) {
        try {
            // retrieve the secrets pair for the API client, depending on the current environment and region
            const verificationClientAPIPair = await this.secretsClient
                .send(new client_secrets_manager_1.GetSecretValueCommand(({ SecretId: `${verificationClientSecretsName}-${this.environment}-${this.region}` })));
            // check if the secrets for the API Client exist
            if (verificationClientAPIPair.SecretString) {
                // convert the retrieved secrets pair value, as a JSON object
                const clientPairAsJson = JSON.parse(verificationClientAPIPair.SecretString);
                // filter out and set the necessary API Client API credentials, depending on the client secret name passed in
                switch (verificationClientSecretsName) {
                    case Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_SECRET_NAME:
                        if (cognitoClientAccess !== undefined && cognitoClientAccess) {
                            return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.CONGITO_CLI_ACCESS_KEY_ID], clientPairAsJson[Constants_1.Constants.AWSPairConstants.COGNITO_CLI_SECRET_ACCESS_KEY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.COGNITO_USER_POOL_ID]];
                        }
                        else {
                            return internalRestBased !== undefined && internalRestBased
                                ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_REST_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_REST_API_KEY]]
                                : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_API_KEY]];
                        }
                    case Constants_1.Constants.AWSPairConstants.APP_UPGRADE_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.APP_UPGRADE_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.APP_UPGRADE_API_KEY]];
                    case Constants_1.Constants.AWSPairConstants.GOOGLE_MAPS_APIS_INTERNAL_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.GOOGLE_MAPS_APIS_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.GOOGLE_MAPS_APIS_IOS_KEY],
                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.GOOGLE_MAPS_APIS_ANDROID_KEY], clientPairAsJson[Constants_1.Constants.AWSPairConstants.GOOGLE_MAPS_ANDROID_SHA],
                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.GOOGLE_MAPS_APIS_KEY]];
                    case Constants_1.Constants.AWSPairConstants.EVENTBRITE_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.EVENTBRITE_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.EVENTBRITE_API_KEY]];
                    case Constants_1.Constants.AWSPairConstants.COURIER_INTERNAL_SECRET_NAME:
                        // return the appropriate secrets, depending on the type of notification passed in
                        if (!notificationType) {
                            console.log(`Invalid notification type to retrieve secrets in ${verificationClientSecretsName}`);
                            return [null, null];
                        }
                        else {
                            switch (notificationType) {
                                case GraphqlExports_1.NotificationType.NewUserSignup:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.NEW_USER_SIGNUP_NOTIFICATION_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.NEW_USER_SIGNUP_NOTIFICATION_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.NewQualifyingOfferAvailable:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.NEW_QUALIFYING_OFFER_NOTIFICATION_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.NEW_QUALIFYING_OFFER_NOTIFICATION_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.LocationBasedOfferReminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_LOCATION_BASED_UPDATE_NOTIFICATION_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_LOCATION_BASED_UPDATE_NOTIFICATION_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.MilitaryStatusChangedPendingToRejected:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_REJECTED_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_REJECTED_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_STATUS_CHANGED_PENDING_TO_REJECTED_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_STATUS_CHANGED_PENDING_TO_REJECTED_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_REJECTED_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_REJECTED_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.MilitaryStatusChangedPendingToVerified:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_VERIFIED_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_VERIFIED_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_STATUS_CHANGED_PENDING_TO_VERIFIED_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_STATUS_CHANGED_PENDING_TO_VERIFIED_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_VERIFIED_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_VERIFIED_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.CardLinkingReminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_CARD_LINKING_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_CARD_LINKING_REMINDER_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_CARD_LINKING_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_CARD_LINKING_REMINDER_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_CARD_LINKING_REMINDER_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_CARD_LINKING_REMINDER_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.NewMapFeatureReminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_NEW_MAP_FEATURE_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_NEW_MAP_FEATURE_REMINDER_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_NEW_MAP_FEATURE_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_NEW_MAP_FEATURE_REMINDER_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_NEW_MAP_FEATURE_REMINDER_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_NEW_MAP_FEATURE_REMINDER_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.VeteransDayTemplate_1Reminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_VETERANS_DAY_TEMPLATE_1_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_VETERANS_DAY_TEMPLATE_1_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.VeteransDayTemplate_2Reminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_VETERANS_DAY_TEMPLATE_2_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_VETERANS_DAY_TEMPLATE_2_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.VeteransDayTemplate_3Reminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_VETERANS_DAY_TEMPLATE_3_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_VETERANS_DAY_TEMPLATE_3_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_VETERANS_DAY_TEMPLATE_3_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_VETERANS_DAY_TEMPLATE_3_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_VETERANS_DAY_TEMPLATE_3_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_VETERANS_DAY_TEMPLATE_3_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.ReferralTemplateLaunch:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_LAUNCH_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_LAUNCH_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_REFERRAL_TEMPLATE_LAUNCH_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_REFERRAL_TEMPLATE_LAUNCH_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_LAUNCH_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_LAUNCH_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.ReferralTemplate_1Reminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_1_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_1_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_REFERRAL_TEMPLATE_1_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_REFERRAL_TEMPLATE_1_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_1_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REFERRAL_TEMPLATE_1_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.MultipleCardFeatureReminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_MULTIPLE_CARDS_FEATURE_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_MULTIPLE_CARDS_FEATURE_REMINDER_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_MULTIPLE_CARDS_FEATURE_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_MULTIPLE_CARDS_FEATURE_REMINDER_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_MULTIPLE_CARDS_FEATURE_REMINDER_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_MULTIPLE_CARDS_FEATURE_REMINDER_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.SanAntonioReferralTemplate_1Reminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_SAN_ANTONIO_REFERRAL_TEMPLATE_1_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_SAN_ANTONIO_REFERRAL_TEMPLATE_1_REMINDER_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_SAN_ANTONIO_REFERRAL_TEMPLATE_1_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_SAN_ANTONIO_REFERRAL_TEMPLATE_1_REMINDER_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_SAN_ANTONIO_REFERRAL_TEMPLATE_1_REMINDER_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_SAN_ANTONIO_REFERRAL_TEMPLATE_1_REMINDER_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.ReimbursementsReminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REIMBURSEMENTS_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REIMBURSEMENTS_REMINDER_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_REIMBURSEMENTS_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_REIMBURSEMENTS_REMINDER_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REIMBURSEMENTS_REMINDER_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_REIMBURSEMENTS_REMINDER_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.SpendingTemplate_1Reminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_SPENDING_REMINDER_TEMPLATE_1_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_SPENDING_REMINDER_TEMPLATE_1_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.SpouseFeatureReminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.SPOUSE_FEATURE_REMINDER_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.SPOUSE_FEATURE_REMINDER_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.FeedbackTemplate_1Reminder:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.FEEDBACK_TEMPLATE_1_REMINDER_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.FEEDBACK_TEMPLATE_1_REMINDER_TEMPLATE_ID]];
                                default:
                                    console.log(`Unknown notifications type to retrieve secrets in ${verificationClientSecretsName}`);
                                    return [null, null];
                            }
                        }
                    case Constants_1.Constants.AWSPairConstants.QUANDIS_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.QUANDIS_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.QUANDIS_API_KEY]];
                    case Constants_1.Constants.AWSPairConstants.LIGHTHOUSE_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.LIGHTHOUSE_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.LIGHTHOUSE_API_KEY]];
                    case Constants_1.Constants.AWSPairConstants.OLIVE_SECRET_NAME:
                        return includeLoyaltyPrograms !== undefined
                            ? [
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_BASE_URL],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_PUBLIC_KEY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_PRIVATE_KEY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_DEFAULT_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_FIDELIS_DEFAULT_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_ONLINE_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_PREMIER_ONLINE_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_PREMIER_NEARBY_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_VETERANS_DAY_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_CLICK_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_PREMIER_CLICK_LOYALTY]
                            ]
                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_PUBLIC_KEY], clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_PRIVATE_KEY]];
                    default:
                        console.log(`Unknown API client secrets name passed in ${verificationClientSecretsName}`);
                        return [null, null];
                }
            }
            else {
                console.log(`API client secrets pair not available for ${verificationClientSecretsName}, ${verificationClientAPIPair}`);
                return [null, null];
            }
        }
        catch (err) {
            const errorMessage = `Unexpected error while retrieving an API Key ${err}`;
            console.log(errorMessage);
            throw new Error(errorMessage);
        }
    }
}
exports.BaseAPIClient = BaseAPIClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUFQSUNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vY2xpZW50cy9CYXNlQVBJQ2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDRFQUE0RjtBQUU1Riw0Q0FBdUM7QUFDdkMsc0RBcUQyQjtBQUUzQjs7O0dBR0c7QUFDSCxNQUFzQixhQUFhO0lBQy9CLHNGQUFzRjtJQUNuRSxhQUFhLENBQXVCO0lBRXZELDREQUE0RDtJQUN6QyxNQUFNLENBQVM7SUFFbEMsaUVBQWlFO0lBQzlDLFdBQVcsQ0FBUztJQUV2Qzs7Ozs7T0FLRztJQUNILFlBQXNCLE1BQWMsRUFBRSxXQUFtQjtRQUNyRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUUvQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksNkNBQW9CLENBQUMsRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O09BaUJHO0lBQ08sS0FBSyxDQUFDLDBCQUEwQixDQUFDLDZCQUFxQyxFQUFFLGlCQUEyQixFQUNsRSxnQkFBbUMsRUFBRSxzQkFBZ0MsRUFDckUsbUJBQTZCLEVBQUUsV0FBcUM7UUFZM0csSUFBSTtZQUNBLGdHQUFnRztZQUNoRyxNQUFNLHlCQUF5QixHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWE7aUJBQ3JELElBQUksQ0FBQyxJQUFJLDhDQUFxQixDQUFDLENBQUMsRUFBQyxRQUFRLEVBQUUsR0FBRyw2QkFBNkIsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTFILGdEQUFnRDtZQUNoRCxJQUFJLHlCQUF5QixDQUFDLFlBQVksRUFBRTtnQkFDeEMsNkRBQTZEO2dCQUM3RCxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsWUFBYSxDQUFDLENBQUM7Z0JBRTdFLDZHQUE2RztnQkFDN0csUUFBUSw2QkFBNkIsRUFBRTtvQkFDbkMsS0FBSyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLDZCQUE2Qjt3QkFDekQsSUFBSSxtQkFBbUIsS0FBSyxTQUFTLElBQUksbUJBQW1CLEVBQUU7NEJBQzFELE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHlCQUF5QixDQUFDLEVBQUUsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyw2QkFBNkIsQ0FBQztnQ0FDdEosZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUE7eUJBQ3pFOzZCQUFNOzRCQUNILE9BQU8saUJBQWlCLEtBQUssU0FBUyxJQUFJLGlCQUFpQjtnQ0FDdkQsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQywrQkFBK0IsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsOEJBQThCLENBQUMsQ0FBQztnQ0FDN0osQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDO3lCQUMzSjtvQkFDTCxLQUFLLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCO3dCQUNuRCxPQUFPLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO29CQUNqSixLQUFLLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMscUNBQXFDO3dCQUNqRSxPQUFPLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsd0JBQXdCLENBQUM7NEJBQ2pKLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsNEJBQTRCLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDOzRCQUMvSSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQztvQkFDM0UsS0FBSyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQjt3QkFDbEQsT0FBTyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztvQkFDL0ksS0FBSyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLDRCQUE0Qjt3QkFDeEQsa0ZBQWtGO3dCQUNsRixJQUFJLENBQUMsZ0JBQWdCLEVBQUU7NEJBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0RBQW9ELDZCQUE2QixFQUFFLENBQUMsQ0FBQzs0QkFDakcsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQzt5QkFDdkI7NkJBQU07NEJBQ0gsUUFBUSxnQkFBZ0IsRUFBRTtnQ0FDdEIsS0FBSyxpQ0FBZ0IsQ0FBQyxhQUFhO29DQUMvQixPQUFPLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQzt3Q0FDakUsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx1Q0FBdUMsQ0FBQzt3Q0FDcEYsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDLENBQUM7Z0NBQy9GLEtBQUssaUNBQWdCLENBQUMsMkJBQTJCO29DQUM3QyxPQUFPLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQzt3Q0FDakUsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyw0Q0FBNEMsQ0FBQzt3Q0FDekYsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDLENBQUM7Z0NBQ3BHLEtBQUssaUNBQWdCLENBQUMsMEJBQTBCO29DQUM1QyxPQUFPLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQzt3Q0FDakUsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxrREFBa0QsQ0FBQzt3Q0FDL0YsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDLENBQUM7Z0NBQzFHLEtBQUssaUNBQWdCLENBQUMsc0NBQXNDO29DQUN4RCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7d0NBQzNCLE9BQU8sV0FBVyxLQUFLLHdDQUF1QixDQUFDLEtBQUs7NENBQ2hELENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7Z0RBQzVELGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsbURBQW1ELENBQUM7Z0RBQ2hHLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsb0RBQW9ELENBQUMsQ0FBQzs0Q0FDdEcsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQztnREFDNUQsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxrREFBa0QsQ0FBQztnREFDL0YsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDLENBQUE7cUNBQzVHO3lDQUFNO3dDQUNILE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDOzRDQUNqRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLG1EQUFtRCxDQUFDOzRDQUNoRyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLG9EQUFvRCxDQUFDLENBQUMsQ0FBQztxQ0FDMUc7Z0NBQ0wsS0FBSyxpQ0FBZ0IsQ0FBQyxzQ0FBc0M7b0NBQ3hELElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTt3Q0FDM0IsT0FBTyxXQUFXLEtBQUssd0NBQXVCLENBQUMsS0FBSzs0Q0FDaEQsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQztnREFDNUQsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxtREFBbUQsQ0FBQztnREFDaEcsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxvREFBb0QsQ0FBQyxDQUFDOzRDQUN0RyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDO2dEQUM1RCxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGtEQUFrRCxDQUFDO2dEQUMvRixnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLG1EQUFtRCxDQUFDLENBQUMsQ0FBQztxQ0FDN0c7eUNBQU07d0NBQ0gsT0FBTyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7NENBQ2pFLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsbURBQW1ELENBQUM7NENBQ2hHLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsb0RBQW9ELENBQUMsQ0FBQyxDQUFDO3FDQUMxRztnQ0FDTCxLQUFLLGlDQUFnQixDQUFDLG1CQUFtQjtvQ0FDckMsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO3dDQUMzQixPQUFPLFdBQVcsS0FBSyx3Q0FBdUIsQ0FBQyxLQUFLOzRDQUNoRCxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDO2dEQUM1RCxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHNDQUFzQyxDQUFDO2dEQUNuRixnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHVDQUF1QyxDQUFDLENBQUM7NENBQ3pGLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7Z0RBQzVELGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMscUNBQXFDLENBQUM7Z0RBQ2xGLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsc0NBQXNDLENBQUMsQ0FBQyxDQUFDO3FDQUNoRzt5Q0FBTTt3Q0FDSCxPQUFPLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQzs0Q0FDakUsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxzQ0FBc0MsQ0FBQzs0Q0FDbkYsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDLENBQUM7cUNBQzdGO2dDQUNMLEtBQUssaUNBQWdCLENBQUMscUJBQXFCO29DQUN2QyxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7d0NBQzNCLE9BQU8sV0FBVyxLQUFLLHdDQUF1QixDQUFDLEtBQUs7NENBQ2hELENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7Z0RBQzVELGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMseUNBQXlDLENBQUM7Z0RBQ3RGLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsMENBQTBDLENBQUMsQ0FBQzs0Q0FDNUYsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQztnREFDNUQsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx3Q0FBd0MsQ0FBQztnREFDckYsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDLENBQUM7cUNBQ25HO3lDQUFNO3dDQUNILE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDOzRDQUNqRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHlDQUF5QyxDQUFDOzRDQUN0RixnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQztxQ0FDaEc7Z0NBQ0wsS0FBSyxpQ0FBZ0IsQ0FBQyw2QkFBNkI7b0NBQy9DLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDO3dDQUNqRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHVDQUF1QyxDQUFDO3dDQUNwRixnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHdDQUF3QyxDQUFDLENBQUMsQ0FBQztnQ0FDL0YsS0FBSyxpQ0FBZ0IsQ0FBQyw2QkFBNkI7b0NBQy9DLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDO3dDQUNqRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHVDQUF1QyxDQUFDO3dDQUNwRixnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHdDQUF3QyxDQUFDLENBQUMsQ0FBQztnQ0FDL0YsS0FBSyxpQ0FBZ0IsQ0FBQyw2QkFBNkI7b0NBQy9DLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTt3Q0FDM0IsT0FBTyxXQUFXLEtBQUssd0NBQXVCLENBQUMsS0FBSzs0Q0FDaEQsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQztnREFDNUQsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx3Q0FBd0MsQ0FBQztnREFDckYsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDOzRDQUMzRixDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDO2dEQUM1RCxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHVDQUF1QyxDQUFDO2dEQUNwRixnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHdDQUF3QyxDQUFDLENBQUMsQ0FBQztxQ0FDbEc7eUNBQU07d0NBQ0gsT0FBTyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7NENBQ2pFLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsd0NBQXdDLENBQUM7NENBQ3JGLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMseUNBQXlDLENBQUMsQ0FBQyxDQUFDO3FDQUMvRjtnQ0FDTCxLQUFLLGlDQUFnQixDQUFDLHNCQUFzQjtvQ0FDeEMsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO3dDQUMzQixPQUFPLFdBQVcsS0FBSyx3Q0FBdUIsQ0FBQyxLQUFLOzRDQUNoRCxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDO2dEQUM1RCxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHlDQUF5QyxDQUFDO2dEQUN0RixnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLDBDQUEwQyxDQUFDLENBQUM7NENBQzVGLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7Z0RBQzVELGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsd0NBQXdDLENBQUM7Z0RBQ3JGLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMseUNBQXlDLENBQUMsQ0FBQyxDQUFDO3FDQUNuRzt5Q0FBTTt3Q0FDSCxPQUFPLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQzs0Q0FDakUsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx5Q0FBeUMsQ0FBQzs0Q0FDdEYsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUM7cUNBQ2hHO2dDQUNMLEtBQUssaUNBQWdCLENBQUMsMEJBQTBCO29DQUM1QyxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7d0NBQzNCLE9BQU8sV0FBVyxLQUFLLHdDQUF1QixDQUFDLEtBQUs7NENBQ2hELENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7Z0RBQzVELGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsb0NBQW9DLENBQUM7Z0RBQ2pGLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMscUNBQXFDLENBQUMsQ0FBQzs0Q0FDdkYsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQztnREFDNUQsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxtQ0FBbUMsQ0FBQztnREFDaEYsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLENBQUM7cUNBQzlGO3lDQUFNO3dDQUNILE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDOzRDQUNqRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLG9DQUFvQyxDQUFDOzRDQUNqRixnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHFDQUFxQyxDQUFDLENBQUMsQ0FBQztxQ0FDM0Y7Z0NBQ0wsS0FBSyxpQ0FBZ0IsQ0FBQywyQkFBMkI7b0NBQzdDLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTt3Q0FDM0IsT0FBTyxXQUFXLEtBQUssd0NBQXVCLENBQUMsS0FBSzs0Q0FDaEQsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQztnREFDNUQsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnREFBZ0QsQ0FBQztnREFDN0YsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxpREFBaUQsQ0FBQyxDQUFDOzRDQUNuRyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDO2dEQUM1RCxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLCtDQUErQyxDQUFDO2dEQUM1RixnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdEQUFnRCxDQUFDLENBQUMsQ0FBQztxQ0FDMUc7eUNBQU07d0NBQ0gsT0FBTyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7NENBQ2pFLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0RBQWdELENBQUM7NENBQzdGLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsaURBQWlELENBQUMsQ0FBQyxDQUFDO3FDQUN2RztnQ0FDTCxLQUFLLGlDQUFnQixDQUFDLG9DQUFvQztvQ0FDdEQsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO3dDQUMzQixPQUFPLFdBQVcsS0FBSyx3Q0FBdUIsQ0FBQyxLQUFLOzRDQUNoRCxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDO2dEQUM1RCxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHlEQUF5RCxDQUFDO2dEQUN0RyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLDBEQUEwRCxDQUFDLENBQUM7NENBQzVHLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7Z0RBQzVELGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsd0RBQXdELENBQUM7Z0RBQ3JHLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMseURBQXlELENBQUMsQ0FBQyxDQUFDO3FDQUNuSDt5Q0FBTTt3Q0FDSCxPQUFPLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQzs0Q0FDakUsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx5REFBeUQsQ0FBQzs0Q0FDdEcsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQywwREFBMEQsQ0FBQyxDQUFDLENBQUM7cUNBQ2hIO2dDQUNMLEtBQUssaUNBQWdCLENBQUMsc0JBQXNCO29DQUN4QyxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7d0NBQzNCLE9BQU8sV0FBVyxLQUFLLHdDQUF1QixDQUFDLEtBQUs7NENBQ2hELENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7Z0RBQzVELGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsd0NBQXdDLENBQUM7Z0RBQ3JGLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMseUNBQXlDLENBQUMsQ0FBQzs0Q0FDM0YsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQztnREFDNUQsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx1Q0FBdUMsQ0FBQztnREFDcEYsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDLENBQUM7cUNBQ2xHO3lDQUFNO3dDQUNILE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDOzRDQUNqRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHdDQUF3QyxDQUFDOzRDQUNyRixnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHlDQUF5QyxDQUFDLENBQUMsQ0FBQztxQ0FDL0Y7Z0NBQ0wsS0FBSyxpQ0FBZ0IsQ0FBQywwQkFBMEI7b0NBQzVDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDO3dDQUNqRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLDRDQUE0QyxDQUFDO3dDQUN6RixnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLDZDQUE2QyxDQUFDLENBQUMsQ0FBQztnQ0FDcEcsS0FBSyxpQ0FBZ0IsQ0FBQyxxQkFBcUI7b0NBQ3ZDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDO3dDQUNqRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGtDQUFrQyxDQUFDO3dDQUMvRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLG1DQUFtQyxDQUFDLENBQUMsQ0FBQztnQ0FDMUYsS0FBSyxpQ0FBZ0IsQ0FBQywwQkFBMEI7b0NBQzVDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDO3dDQUNqRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHVDQUF1QyxDQUFDO3dDQUNwRixnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHdDQUF3QyxDQUFDLENBQUMsQ0FBQztnQ0FDL0Y7b0NBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxxREFBcUQsNkJBQTZCLEVBQUUsQ0FBQyxDQUFDO29DQUNsRyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDOzZCQUMzQjt5QkFDSjtvQkFDTCxLQUFLLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CO3dCQUMvQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztvQkFDekksS0FBSyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQjt3QkFDbEQsT0FBTyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztvQkFDL0ksS0FBSyxxQkFBUyxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQjt3QkFDN0MsT0FBTyxzQkFBc0IsS0FBSyxTQUFTOzRCQUN2QyxDQUFDLENBQUM7Z0NBQ0UsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUM7Z0NBQzNELGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7Z0NBQzdELGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUM7Z0NBQzlELGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsOEJBQThCLENBQUM7Z0NBQzNFLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsc0NBQXNDLENBQUM7Z0NBQ25GLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsNkJBQTZCLENBQUM7Z0NBQzFFLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMscUNBQXFDLENBQUM7Z0NBQ2xGLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMscUNBQXFDLENBQUM7Z0NBQ2xGLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsbUNBQW1DLENBQUM7Z0NBQ2hGLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsNEJBQTRCLENBQUM7Z0NBQ3pFLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsb0NBQW9DLENBQUM7NkJBQ3BGOzRCQUNELENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMscUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO29CQUN2TTt3QkFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2Qyw2QkFBNkIsRUFBRSxDQUFDLENBQUM7d0JBQzFGLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBQzNCO2FBQ0o7aUJBQU07Z0JBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsNkJBQTZCLEtBQUsseUJBQXlCLEVBQUUsQ0FBQyxDQUFDO2dCQUV4SCxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ3ZCO1NBQ0o7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNWLE1BQU0sWUFBWSxHQUFHLGdEQUFnRCxHQUFHLEVBQUUsQ0FBQztZQUMzRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRTFCLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakM7SUFDTCxDQUFDO0NBOG1CSjtBQTc1QkQsc0NBNjVCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7R2V0U2VjcmV0VmFsdWVDb21tYW5kLCBTZWNyZXRzTWFuYWdlckNsaWVudH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zZWNyZXRzLW1hbmFnZXJcIjtcbmltcG9ydCB7QVBJR2F0ZXdheVByb3h5UmVzdWx0fSBmcm9tIFwiYXdzLWxhbWJkYS90cmlnZ2VyL2FwaS1nYXRld2F5LXByb3h5XCI7XG5pbXBvcnQge0NvbnN0YW50c30gZnJvbSBcIi4uL0NvbnN0YW50c1wiO1xuaW1wb3J0IHtcbiAgICBBcHBVcGdyYWRlUmVzcG9uc2UsXG4gICAgQ2FyZCwgQ2FyZERldGFpbHNSZXNwb25zZSxcbiAgICBDYXJkTGlua1Jlc3BvbnNlLCBDcmVhdGVFdmVudFNlcmllc0lucHV0LFxuICAgIENyZWF0ZU5vdGlmaWNhdGlvbklucHV0LFxuICAgIENyZWF0ZU5vdGlmaWNhdGlvblJlc3BvbnNlLFxuICAgIEVsaWdpYmxlTGlua2VkVXNlcnNSZXNwb25zZSxcbiAgICBFbWFpbEZyb21Db2duaXRvUmVzcG9uc2UsIEV2ZW50U2VyaWVzUmVzcG9uc2UsXG4gICAgR2VvY29kZUFzeW5jSW5wdXQsXG4gICAgR2VvY29kZUFzeW5jUmVzcG9uc2UsXG4gICAgR2V0RGV2aWNlc0ZvclVzZXJJbnB1dCwgR2V0TG9jYXRpb25QcmVkaWN0aW9uc0lucHV0LCBHZXRMb2NhdGlvblByZWRpY3Rpb25zUmVzcG9uc2UsXG4gICAgR2V0TWlsaXRhcnlWZXJpZmljYXRpb25JbmZvcm1hdGlvbklucHV0LCBHZXROb3RpZmljYXRpb25CeVR5cGVJbnB1dCwgR2V0Tm90aWZpY2F0aW9uQnlUeXBlUmVzcG9uc2UsXG4gICAgR2V0T2ZmZXJzSW5wdXQsXG4gICAgR2V0UmVmZXJyYWxzQnlTdGF0dXNJbnB1dCwgR2V0U3RvcmFnZUlucHV0LFxuICAgIEdldFRyYW5zYWN0aW9uQnlTdGF0dXNJbnB1dCxcbiAgICBHZXRUcmFuc2FjdGlvbklucHV0LFxuICAgIEdldFVzZXJDYXJkTGlua2luZ0lkSW5wdXQsXG4gICAgR2V0VXNlckNhcmRMaW5raW5nSWRSZXNwb25zZSwgR2V0VXNlcnNCeUdlb2dyYXBoaWNhbExvY2F0aW9uSW5wdXQsXG4gICAgSW5lbGlnaWJsZUxpbmtlZFVzZXJzUmVzcG9uc2UsXG4gICAgTWVtYmVyRGV0YWlsc1Jlc3BvbnNlLFxuICAgIE1lbWJlclJlc3BvbnNlLFxuICAgIE1pbGl0YXJ5VmVyaWZpY2F0aW9uTm90aWZpY2F0aW9uVXBkYXRlLFxuICAgIE1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVwb3J0aW5nSW5mb3JtYXRpb24sXG4gICAgTWlsaXRhcnlWZXJpZmljYXRpb25SZXBvcnRpbmdJbmZvcm1hdGlvblJlc3BvbnNlLFxuICAgIE1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVwb3J0UmVzcG9uc2UsXG4gICAgTWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXNUeXBlLFxuICAgIE1vb25iZWFtVHJhbnNhY3Rpb24sXG4gICAgTW9vbmJlYW1UcmFuc2FjdGlvblJlc3BvbnNlLFxuICAgIE1vb25iZWFtVHJhbnNhY3Rpb25zQnlTdGF0dXNSZXNwb25zZSxcbiAgICBNb29uYmVhbVRyYW5zYWN0aW9uc1Jlc3BvbnNlLFxuICAgIE1vb25iZWFtVXBkYXRlZFRyYW5zYWN0aW9uUmVzcG9uc2UsXG4gICAgTm90aWZpY2F0aW9uQ2hhbm5lbFR5cGUsXG4gICAgTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSxcbiAgICBOb3RpZmljYXRpb25SZXNwb25zZSxcbiAgICBOb3RpZmljYXRpb25UeXBlLFxuICAgIE9mZmVySWRSZXNwb25zZSxcbiAgICBPZmZlclJlZGVtcHRpb25UeXBlUmVzcG9uc2UsXG4gICAgT2ZmZXJzUmVzcG9uc2UsXG4gICAgUHV0TWlsaXRhcnlWZXJpZmljYXRpb25SZXBvcnRJbnB1dCxcbiAgICBSZWZlcnJhbFJlc3BvbnNlLCBSZWltYnVyc2VtZW50UHJvY2Vzc2luZ1Jlc3BvbnNlLFxuICAgIFJlbW92ZUNhcmRSZXNwb25zZSxcbiAgICBTZWFyY2hPZmZlcnNJbnB1dCxcbiAgICBTZW5kRW1haWxOb3RpZmljYXRpb25JbnB1dCxcbiAgICBTZW5kTW9iaWxlUHVzaE5vdGlmaWNhdGlvbklucHV0LCBTdG9yYWdlUmVzcG9uc2UsXG4gICAgVHJhbnNhY3Rpb24sXG4gICAgVHJhbnNhY3Rpb25SZXNwb25zZSwgVXBkYXRlQ2FyZElucHV0LFxuICAgIFVwZGF0ZWRUcmFuc2FjdGlvbkV2ZW50LFxuICAgIFVwZGF0ZWRUcmFuc2FjdGlvbkV2ZW50UmVzcG9uc2UsXG4gICAgVXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJJbnB1dCxcbiAgICBVcGRhdGVSZWZlcnJhbElucHV0LFxuICAgIFVwZGF0ZVRyYW5zYWN0aW9uSW5wdXQsXG4gICAgVXNlckRldmljZXNSZXNwb25zZSxcbiAgICBVc2VyRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZVxufSBmcm9tIFwiLi4vR3JhcGhxbEV4cG9ydHNcIjtcblxuLyoqXG4gKiBDbGFzcyB1c2VkIGFzIHRoZSBiYXNlL2dlbmVyaWMgY2xpZW50IGZvciBhbGwgQVBJIGNsaWVudHMgdGhhdFxuICogd2Ugd2lsbCBiZSBjb25uZWN0aW5nIHRvLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUFQSUNsaWVudCB7XG4gICAgLy8gVGhlIFNlY3JldHMgTWFuYWdlciBjbGllbnQsIHRvIGJlIHVzZWQgd2hpbGUgcmV0cmlldmluZyBzZWNyZXRzIHJlbGF0ZWQgdG8gY2xpZW50cy5cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgc2VjcmV0c0NsaWVudDogU2VjcmV0c01hbmFnZXJDbGllbnQ7XG5cbiAgICAvLyBUaGUgQVdTIHJlZ2lvbiB0aGF0IHRoZSBBUEkgY2xpZW50IHdpbGwgYmUgaW5pdGlhbGl6ZWQgaW5cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcmVnaW9uOiBzdHJpbmc7XG5cbiAgICAvLyBUaGUgQVdTIGVudmlyb25tZW50IHRoYXQgdGhlIEFQSSBjbGllbnQgd2lsbCBiZSBpbml0aWFsaXplZCBpblxuICAgIHByb3RlY3RlZCByZWFkb25seSBlbnZpcm9ubWVudDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJpYyBjb25zdHJ1Y3RvciBmb3IgdGhlIEFQSSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVnaW9uIHRoZSBBV1MgcmVnaW9uIHBhc3NlZCBpbiBmcm9tIHRoZSBMYW1iZGEgcmVzb2x2ZXIuXG4gICAgICogQHBhcmFtIGVudmlyb25tZW50IHRoZSBBV1MgZW52aXJvbm1lbnQgcGFzc2VkIGluIGZyb20gdGhlIExhbWJkYSByZXNvbHZlci5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocmVnaW9uOiBzdHJpbmcsIGVudmlyb25tZW50OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5yZWdpb24gPSByZWdpb247XG4gICAgICAgIHRoaXMuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcblxuICAgICAgICB0aGlzLnNlY3JldHNDbGllbnQgPSBuZXcgU2VjcmV0c01hbmFnZXJDbGllbnQoe3JlZ2lvbjogcmVnaW9ufSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byByZXRyaWV2ZSB2YXJpb3VzIHNlcnZpY2UgY3JlZGVudGlhbHMsIHVzZWQgYnkgYW55IEFQSSBjbGllbnRzLCB0aHJvdWdoIHRoZVxuICAgICAqIFNlY3JldHMgTWFuYWdlciBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmVyaWZpY2F0aW9uQ2xpZW50U2VjcmV0c05hbWUgdGhlIG5hbWUgb2YgdGhlIEFQSSBjbGllbnQncyBzZWNyZXRzIHBhaXJcbiAgICAgKiBAcGFyYW0gaW50ZXJuYWxSZXN0QmFzZWQgb3B0aW9uYWwgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGtleSBpcyBSRVNUIG9yIEdyYXBoUUwvQXBwU3luYyBiYXNlZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBpbiBjYXNlIG9mIGludGVybmFsLXVzZWQgYmFzZWQga2V5c1xuICAgICAqIEBwYXJhbSBub3RpZmljYXRpb25UeXBlICBvcHRpb25hbCB0eXBlIGluZGljYXRpbmcgdGhlIHR5cGUgb2Ygbm90aWZpY2F0aW9uLCBmb3Igd2hpY2ggd2UgYXJlIHJldHJpZXZpbmdcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlY2lmaWMgc2VjcmV0IGNvbmZpZ3VyYXRpb24gZm9yXG4gICAgICogQHBhcmFtIGluY2x1ZGVMb3lhbHR5UHJvZ3JhbXMgb3B0aW9uYWwgdHlwZSBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUgbG95YWx0eSBwcm9ncmFtIHNlY3JldCBrZXlzLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgZm9yIE9saXZlIGNhbGxzXG4gICAgICogQHBhcmFtIGNvZ25pdG9DbGllbnRBY2Nlc3Mgb3B0aW9uYWwgdHlwZSBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUgY29nbml0byBhY2Nlc3MgY3JlZGVudGlhbHMva2V5cyxcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIGZvciBpbnRlcm5hbC1iYXNlZCBjYWxsc1xuICAgICAqIEBwYXJhbSBjaGFubmVsVHlwZSBvcHRpb25hbCB0eXBlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgY2hhbm5lbCwgZm9yIHdoaWNoIHdlIGFyZSByZXRyaWV2aW5nIHNwZWNpZmljIHNlY3JldFxuICAgICAqICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uIGZvclxuICAgICAqXG4gICAgICogQHJldHVybiBhIHtAbGluayBQcm9taXNlfSBvZiBhIHtAbGluayBzdHJpbmd9IHBhaXIsIGNvbnRhaW5pbmcgdmFyaW91cyBzZWNyZXRzIHRvIGJlIHVzZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYXN5bmMgcmV0cmlldmVTZXJ2aWNlQ3JlZGVudGlhbHModmVyaWZpY2F0aW9uQ2xpZW50U2VjcmV0c05hbWU6IHN0cmluZywgaW50ZXJuYWxSZXN0QmFzZWQ/OiBib29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25UeXBlPzogTm90aWZpY2F0aW9uVHlwZSwgaW5jbHVkZUxveWFsdHlQcm9ncmFtcz86IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZ25pdG9DbGllbnRBY2Nlc3M/OiBib29sZWFuLCBjaGFubmVsVHlwZT86IE5vdGlmaWNhdGlvbkNoYW5uZWxUeXBlKVxuICAgICAgICA6IFByb21pc2U8W3N0cmluZyB8IG51bGwsIHN0cmluZyB8IG51bGwsXG4gICAgICAgIChzdHJpbmcgfCBudWxsKT8sXG4gICAgICAgIChzdHJpbmcgfCBudWxsKT8sXG4gICAgICAgIChzdHJpbmcgfCBudWxsKT8sXG4gICAgICAgIChzdHJpbmcgfCBudWxsKT8sXG4gICAgICAgIChzdHJpbmcgfCBudWxsKT8sXG4gICAgICAgIChzdHJpbmcgfCBudWxsKT8sXG4gICAgICAgIChzdHJpbmcgfCBudWxsKT8sXG4gICAgICAgIChzdHJpbmcgfCBudWxsKT8sXG4gICAgICAgIChzdHJpbmcgfCBudWxsKT9cbiAgICBdPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyByZXRyaWV2ZSB0aGUgc2VjcmV0cyBwYWlyIGZvciB0aGUgQVBJIGNsaWVudCwgZGVwZW5kaW5nIG9uIHRoZSBjdXJyZW50IGVudmlyb25tZW50IGFuZCByZWdpb25cbiAgICAgICAgICAgIGNvbnN0IHZlcmlmaWNhdGlvbkNsaWVudEFQSVBhaXIgPSBhd2FpdCB0aGlzLnNlY3JldHNDbGllbnRcbiAgICAgICAgICAgICAgICAuc2VuZChuZXcgR2V0U2VjcmV0VmFsdWVDb21tYW5kKCh7U2VjcmV0SWQ6IGAke3ZlcmlmaWNhdGlvbkNsaWVudFNlY3JldHNOYW1lfS0ke3RoaXMuZW52aXJvbm1lbnR9LSR7dGhpcy5yZWdpb259YH0pKSk7XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBzZWNyZXRzIGZvciB0aGUgQVBJIENsaWVudCBleGlzdFxuICAgICAgICAgICAgaWYgKHZlcmlmaWNhdGlvbkNsaWVudEFQSVBhaXIuU2VjcmV0U3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gY29udmVydCB0aGUgcmV0cmlldmVkIHNlY3JldHMgcGFpciB2YWx1ZSwgYXMgYSBKU09OIG9iamVjdFxuICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudFBhaXJBc0pzb24gPSBKU09OLnBhcnNlKHZlcmlmaWNhdGlvbkNsaWVudEFQSVBhaXIuU2VjcmV0U3RyaW5nISk7XG5cbiAgICAgICAgICAgICAgICAvLyBmaWx0ZXIgb3V0IGFuZCBzZXQgdGhlIG5lY2Vzc2FyeSBBUEkgQ2xpZW50IEFQSSBjcmVkZW50aWFscywgZGVwZW5kaW5nIG9uIHRoZSBjbGllbnQgc2VjcmV0IG5hbWUgcGFzc2VkIGluXG4gICAgICAgICAgICAgICAgc3dpdGNoICh2ZXJpZmljYXRpb25DbGllbnRTZWNyZXRzTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIENvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk1PT05CRUFNX0lOVEVSTkFMX1NFQ1JFVF9OQU1FOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZ25pdG9DbGllbnRBY2Nlc3MgIT09IHVuZGVmaW5lZCAmJiBjb2duaXRvQ2xpZW50QWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPTkdJVE9fQ0xJX0FDQ0VTU19LRVlfSURdLCBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPR05JVE9fQ0xJX1NFQ1JFVF9BQ0NFU1NfS0VZXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT0dOSVRPX1VTRVJfUE9PTF9JRF1dXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbFJlc3RCYXNlZCAhPT0gdW5kZWZpbmVkICYmIGludGVybmFsUmVzdEJhc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuTU9PTkJFQU1fSU5URVJOQUxfUkVTVF9CQVNFX1VSTF0sIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuTU9PTkJFQU1fSU5URVJOQUxfUkVTVF9BUElfS0VZXV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5NT09OQkVBTV9JTlRFUk5BTF9CQVNFX1VSTF0sIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuTU9PTkJFQU1fSU5URVJOQUxfQVBJX0tFWV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIENvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkFQUF9VUEdSQURFX1NFQ1JFVF9OQU1FOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkFQUF9VUEdSQURFX0JBU0VfVVJMXSwgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5BUFBfVVBHUkFERV9BUElfS0VZXV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuR09PR0xFX01BUFNfQVBJU19JTlRFUk5BTF9TRUNSRVRfTkFNRTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5HT09HTEVfTUFQU19BUElTX0JBU0VfVVJMXSwgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5HT09HTEVfTUFQU19BUElTX0lPU19LRVldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuR09PR0xFX01BUFNfQVBJU19BTkRST0lEX0tFWV0sIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuR09PR0xFX01BUFNfQU5EUk9JRF9TSEFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuR09PR0xFX01BUFNfQVBJU19LRVldXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FVkVOVEJSSVRFX1NFQ1JFVF9OQU1FOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVWRU5UQlJJVEVfQkFTRV9VUkxdLCBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVWRU5UQlJJVEVfQVBJX0tFWV1dO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIENvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfSU5URVJOQUxfU0VDUkVUX05BTUU6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gdGhlIGFwcHJvcHJpYXRlIHNlY3JldHMsIGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiBub3RpZmljYXRpb24gcGFzc2VkIGluXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vdGlmaWNhdGlvblR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgSW52YWxpZCBub3RpZmljYXRpb24gdHlwZSB0byByZXRyaWV2ZSBzZWNyZXRzIGluICR7dmVyaWZpY2F0aW9uQ2xpZW50U2VjcmV0c05hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5OZXdVc2VyU2lnbnVwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuTkVXX1VTRVJfU0lHTlVQX05PVElGSUNBVElPTl9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk5FV19VU0VSX1NJR05VUF9OT1RJRklDQVRJT05fVEVNUExBVEVfSURdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLk5ld1F1YWxpZnlpbmdPZmZlckF2YWlsYWJsZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk5FV19RVUFMSUZZSU5HX09GRkVSX05PVElGSUNBVElPTl9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk5FV19RVUFMSUZZSU5HX09GRkVSX05PVElGSUNBVElPTl9URU1QTEFURV9JRF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuTG9jYXRpb25CYXNlZE9mZmVyUmVtaW5kZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5QVVNIX0xPQ0FUSU9OX0JBU0VEX1VQREFURV9OT1RJRklDQVRJT05fQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5QVVNIX0xPQ0FUSU9OX0JBU0VEX1VQREFURV9OT1RJRklDQVRJT05fVEVNUExBVEVfSURdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLk1pbGl0YXJ5U3RhdHVzQ2hhbmdlZFBlbmRpbmdUb1JlamVjdGVkOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5uZWxUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbm5lbFR5cGUgPT09IE5vdGlmaWNhdGlvbkNoYW5uZWxUeXBlLkVtYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1NUQVRVU19DSEFOR0VEX1BFTkRJTkdfVE9fUkVKRUNURURfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1NUQVRVU19DSEFOR0VEX1BFTkRJTkdfVE9fUkVKRUNURURfVEVNUExBVEVfSURdXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5QVVNIX1NUQVRVU19DSEFOR0VEX1BFTkRJTkdfVE9fUkVKRUNURURfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlBVU0hfU1RBVFVTX0NIQU5HRURfUEVORElOR19UT19SRUpFQ1RFRF9URU1QTEFURV9JRF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9TVEFUVVNfQ0hBTkdFRF9QRU5ESU5HX1RPX1JFSkVDVEVEX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1NUQVRVU19DSEFOR0VEX1BFTkRJTkdfVE9fUkVKRUNURURfVEVNUExBVEVfSURdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLk1pbGl0YXJ5U3RhdHVzQ2hhbmdlZFBlbmRpbmdUb1ZlcmlmaWVkOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5uZWxUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbm5lbFR5cGUgPT09IE5vdGlmaWNhdGlvbkNoYW5uZWxUeXBlLkVtYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1NUQVRVU19DSEFOR0VEX1BFTkRJTkdfVE9fVkVSSUZJRURfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1NUQVRVU19DSEFOR0VEX1BFTkRJTkdfVE9fVkVSSUZJRURfVEVNUExBVEVfSURdXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5QVVNIX1NUQVRVU19DSEFOR0VEX1BFTkRJTkdfVE9fVkVSSUZJRURfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlBVU0hfU1RBVFVTX0NIQU5HRURfUEVORElOR19UT19WRVJJRklFRF9URU1QTEFURV9JRF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfU1RBVFVTX0NIQU5HRURfUEVORElOR19UT19WRVJJRklFRF9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9TVEFUVVNfQ0hBTkdFRF9QRU5ESU5HX1RPX1ZFUklGSUVEX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5DYXJkTGlua2luZ1JlbWluZGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5uZWxUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbm5lbFR5cGUgPT09IE5vdGlmaWNhdGlvbkNoYW5uZWxUeXBlLkVtYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX0NBUkRfTElOS0lOR19SRU1JTkRFUl9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfQ0FSRF9MSU5LSU5HX1JFTUlOREVSX1RFTVBMQVRFX0lEXV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9DQVJEX0xJTktJTkdfUkVNSU5ERVJfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlBVU0hfQ0FSRF9MSU5LSU5HX1JFTUlOREVSX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9DQVJEX0xJTktJTkdfUkVNSU5ERVJfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfQ0FSRF9MSU5LSU5HX1JFTUlOREVSX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5OZXdNYXBGZWF0dXJlUmVtaW5kZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbm5lbFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFubmVsVHlwZSA9PT0gTm90aWZpY2F0aW9uQ2hhbm5lbFR5cGUuRW1haWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfTkVXX01BUF9GRUFUVVJFX1JFTUlOREVSX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9ORVdfTUFQX0ZFQVRVUkVfUkVNSU5ERVJfVEVNUExBVEVfSURdXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5QVVNIX05FV19NQVBfRkVBVFVSRV9SRU1JTkRFUl9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9ORVdfTUFQX0ZFQVRVUkVfUkVNSU5ERVJfVEVNUExBVEVfSURdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX05FV19NQVBfRkVBVFVSRV9SRU1JTkRFUl9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9ORVdfTUFQX0ZFQVRVUkVfUkVNSU5ERVJfVEVNUExBVEVfSURdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlZldGVyYW5zRGF5VGVtcGxhdGVfMVJlbWluZGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9WRVRFUkFOU19EQVlfVEVNUExBVEVfMV9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlBVU0hfVkVURVJBTlNfREFZX1RFTVBMQVRFXzFfVEVNUExBVEVfSURdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlZldGVyYW5zRGF5VGVtcGxhdGVfMlJlbWluZGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9WRVRFUkFOU19EQVlfVEVNUExBVEVfMl9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlBVU0hfVkVURVJBTlNfREFZX1RFTVBMQVRFXzJfVEVNUExBVEVfSURdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlZldGVyYW5zRGF5VGVtcGxhdGVfM1JlbWluZGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5uZWxUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbm5lbFR5cGUgPT09IE5vdGlmaWNhdGlvbkNoYW5uZWxUeXBlLkVtYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1ZFVEVSQU5TX0RBWV9URU1QTEFURV8zX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9WRVRFUkFOU19EQVlfVEVNUExBVEVfM19URU1QTEFURV9JRF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlBVU0hfVkVURVJBTlNfREFZX1RFTVBMQVRFXzNfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlBVU0hfVkVURVJBTlNfREFZX1RFTVBMQVRFXzNfVEVNUExBVEVfSURdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1ZFVEVSQU5TX0RBWV9URU1QTEFURV8zX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1ZFVEVSQU5TX0RBWV9URU1QTEFURV8zX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5SZWZlcnJhbFRlbXBsYXRlTGF1bmNoOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5uZWxUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbm5lbFR5cGUgPT09IE5vdGlmaWNhdGlvbkNoYW5uZWxUeXBlLkVtYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1JFRkVSUkFMX1RFTVBMQVRFX0xBVU5DSF9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfUkVGRVJSQUxfVEVNUExBVEVfTEFVTkNIX1RFTVBMQVRFX0lEXV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9SRUZFUlJBTF9URU1QTEFURV9MQVVOQ0hfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlBVU0hfUkVGRVJSQUxfVEVNUExBVEVfTEFVTkNIX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9SRUZFUlJBTF9URU1QTEFURV9MQVVOQ0hfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfUkVGRVJSQUxfVEVNUExBVEVfTEFVTkNIX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5SZWZlcnJhbFRlbXBsYXRlXzFSZW1pbmRlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFubmVsVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5uZWxUeXBlID09PSBOb3RpZmljYXRpb25DaGFubmVsVHlwZS5FbWFpbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9SRUZFUlJBTF9URU1QTEFURV8xX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9SRUZFUlJBTF9URU1QTEFURV8xX1RFTVBMQVRFX0lEXV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9SRUZFUlJBTF9URU1QTEFURV8xX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5QVVNIX1JFRkVSUkFMX1RFTVBMQVRFXzFfVEVNUExBVEVfSURdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1JFRkVSUkFMX1RFTVBMQVRFXzFfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfUkVGRVJSQUxfVEVNUExBVEVfMV9URU1QTEFURV9JRF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuTXVsdGlwbGVDYXJkRmVhdHVyZVJlbWluZGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5uZWxUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbm5lbFR5cGUgPT09IE5vdGlmaWNhdGlvbkNoYW5uZWxUeXBlLkVtYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX01VTFRJUExFX0NBUkRTX0ZFQVRVUkVfUkVNSU5ERVJfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX01VTFRJUExFX0NBUkRTX0ZFQVRVUkVfUkVNSU5ERVJfVEVNUExBVEVfSURdXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5QVVNIX01VTFRJUExFX0NBUkRTX0ZFQVRVUkVfUkVNSU5ERVJfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlBVU0hfTVVMVElQTEVfQ0FSRFNfRkVBVFVSRV9SRU1JTkRFUl9URU1QTEFURV9JRF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfTVVMVElQTEVfQ0FSRFNfRkVBVFVSRV9SRU1JTkRFUl9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9NVUxUSVBMRV9DQVJEU19GRUFUVVJFX1JFTUlOREVSX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TYW5BbnRvbmlvUmVmZXJyYWxUZW1wbGF0ZV8xUmVtaW5kZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbm5lbFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFubmVsVHlwZSA9PT0gTm90aWZpY2F0aW9uQ2hhbm5lbFR5cGUuRW1haWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfU0FOX0FOVE9OSU9fUkVGRVJSQUxfVEVNUExBVEVfMV9SRU1JTkRFUl9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfU0FOX0FOVE9OSU9fUkVGRVJSQUxfVEVNUExBVEVfMV9SRU1JTkRFUl9URU1QTEFURV9JRF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlBVU0hfU0FOX0FOVE9OSU9fUkVGRVJSQUxfVEVNUExBVEVfMV9SRU1JTkRFUl9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9TQU5fQU5UT05JT19SRUZFUlJBTF9URU1QTEFURV8xX1JFTUlOREVSX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9TQU5fQU5UT05JT19SRUZFUlJBTF9URU1QTEFURV8xX1JFTUlOREVSX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1NBTl9BTlRPTklPX1JFRkVSUkFMX1RFTVBMQVRFXzFfUkVNSU5ERVJfVEVNUExBVEVfSURdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlJlaW1idXJzZW1lbnRzUmVtaW5kZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbm5lbFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFubmVsVHlwZSA9PT0gTm90aWZpY2F0aW9uQ2hhbm5lbFR5cGUuRW1haWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfUkVJTUJVUlNFTUVOVFNfUkVNSU5ERVJfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1JFSU1CVVJTRU1FTlRTX1JFTUlOREVSX1RFTVBMQVRFX0lEXV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9SRUlNQlVSU0VNRU5UU19SRU1JTkRFUl9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9SRUlNQlVSU0VNRU5UU19SRU1JTkRFUl9URU1QTEFURV9JRF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfUkVJTUJVUlNFTUVOVFNfUkVNSU5ERVJfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfUkVJTUJVUlNFTUVOVFNfUkVNSU5ERVJfVEVNUExBVEVfSURdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlNwZW5kaW5nVGVtcGxhdGVfMVJlbWluZGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9TUEVORElOR19SRU1JTkRFUl9URU1QTEFURV8xX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9TUEVORElOR19SRU1JTkRFUl9URU1QTEFURV8xX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TcG91c2VGZWF0dXJlUmVtaW5kZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5TUE9VU0VfRkVBVFVSRV9SRU1JTkRFUl9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlNQT1VTRV9GRUFUVVJFX1JFTUlOREVSX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5GZWVkYmFja1RlbXBsYXRlXzFSZW1pbmRlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkZFRURCQUNLX1RFTVBMQVRFXzFfUkVNSU5ERVJfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5GRUVEQkFDS19URU1QTEFURV8xX1JFTUlOREVSX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVW5rbm93biBub3RpZmljYXRpb25zIHR5cGUgdG8gcmV0cmlldmUgc2VjcmV0cyBpbiAke3ZlcmlmaWNhdGlvbkNsaWVudFNlY3JldHNOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUVVBTkRJU19TRUNSRVRfTkFNRTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5RVUFORElTX0JBU0VfVVJMXSwgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5RVUFORElTX0FQSV9LRVldXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5MSUdIVEhPVVNFX1NFQ1JFVF9OQU1FOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkxJR0hUSE9VU0VfQkFTRV9VUkxdLCBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkxJR0hUSE9VU0VfQVBJX0tFWV1dO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIENvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk9MSVZFX1NFQ1JFVF9OQU1FOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGVMb3lhbHR5UHJvZ3JhbXMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk9MSVZFX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5PTElWRV9QVUJMSUNfS0VZXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5PTElWRV9QUklWQVRFX0tFWV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuT0xJVkVfTU9PTkJFQU1fREVGQVVMVF9MT1lBTFRZXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5PTElWRV9NT09OQkVBTV9GSURFTElTX0RFRkFVTFRfTE9ZQUxUWV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuT0xJVkVfTU9PTkJFQU1fT05MSU5FX0xPWUFMVFldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk9MSVZFX01PT05CRUFNX1BSRU1JRVJfT05MSU5FX0xPWUFMVFldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk9MSVZFX01PT05CRUFNX1BSRU1JRVJfTkVBUkJZX0xPWUFMVFldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk9MSVZFX01PT05CRUFNX1ZFVEVSQU5TX0RBWV9MT1lBTFRZXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5PTElWRV9NT09OQkVBTV9DTElDS19MT1lBTFRZXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5PTElWRV9NT09OQkVBTV9QUkVNSUVSX0NMSUNLX0xPWUFMVFldXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuT0xJVkVfQkFTRV9VUkxdLCBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk9MSVZFX1BVQkxJQ19LRVldLCBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk9MSVZFX1BSSVZBVEVfS0VZXV07XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVW5rbm93biBBUEkgY2xpZW50IHNlY3JldHMgbmFtZSBwYXNzZWQgaW4gJHt2ZXJpZmljYXRpb25DbGllbnRTZWNyZXRzTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbbnVsbCwgbnVsbF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQVBJIGNsaWVudCBzZWNyZXRzIHBhaXIgbm90IGF2YWlsYWJsZSBmb3IgJHt2ZXJpZmljYXRpb25DbGllbnRTZWNyZXRzTmFtZX0sICR7dmVyaWZpY2F0aW9uQ2xpZW50QVBJUGFpcn1gKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBbbnVsbCwgbnVsbF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYFVuZXhwZWN0ZWQgZXJyb3Igd2hpbGUgcmV0cmlldmluZyBhbiBBUEkgS2V5ICR7ZXJyfWA7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvck1lc3NhZ2UpO1xuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2V0IHRoZSBub3RpZmljYXRpb25zIGJ5IHRoZWlyIHR5cGUsIHNvcnRlZCBieSBhIHBhcnRpY3VsYXIgZGF0ZS90aW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIGdldE5vdGlmaWNhdGlvbkJ5VHlwZUlucHV0IGlucHV0IHBhc3NlZCBpbiwgd2hpY2ggd2lsbCBiZSB1c2VkIGluIHJldHJpZXZpbmcgdGhlIG5vdGlmaWNhdGlvbnNcbiAgICAgKiBieSB0eXBlIGFwcHJvcHJpYXRlbHkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBHZXROb3RpZmljYXRpb25CeVR5cGVSZXNwb25zZX0sIHJlcHJlc2VudGluZyB0aGUgZmlsdGVyZWQgbm90aWZpY2F0aW9ucywgaWYgYW55IGFwcGxpY2FibGUuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldE5vdGlmaWNhdGlvbkJ5VHlwZT8oZ2V0Tm90aWZpY2F0aW9uQnlUeXBlSW5wdXQ6IEdldE5vdGlmaWNhdGlvbkJ5VHlwZUlucHV0KTogUHJvbWlzZTxHZXROb3RpZmljYXRpb25CeVR5cGVSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIGNyZWF0ZSBhIG5ldyBldmVudCBzZXJpZXMgZm9yIGEgcGFydGljdWxhciBvcmdhbml6YXRpb24sIGJ5IGV4dHJhY3RpbmdcbiAgICAgKiB0aGUgYXBwcm9wcmlhdGUgZXZlbnRzIGluZm9ybWF0aW9uIGZyb20gRXZlbnRCcml0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjcmVhdGVFdmVudFNlcmllc0lucHV0IGlucHV0IHBhc3NlZCBpbiwgd2hpY2ggd2lsbCBiZSB1c2VkIGluIGNyZWF0aW5nIGEgbmV3IGV2ZW50IHNlcmllc1xuICAgICAqIGFuZCBpbXBsaWNpdGx5IGZpbGxpbmcgaW4gdGhlIGFwcHJvcHJpYXRlIG1pc3NpbmcgaW5mb3JtYXRpb24gdmlhIHRoZSBFdmVudEJyaXRlIEFQSSBjYWxsLlxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgRXZlbnRTZXJpZXNSZXNwb25zZX0sIHJlcHJlc2VudGluZyB0aGUgbmV3bHkgY3JlYXRlZCBldmVudCBzZXJpZXMgdG8gYmUgc3RvcmVkLFxuICAgICAqIG9idGFpbmVkIGZyb20gdGhlIEV2ZW50QnJpdGUgQVBJIGNhbGwsIGFsb25nc2lkZSB3aXRoIHRoZSBpbmZvcm1hdGlvbiBwYXNzZWQgaW4uXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNyZWF0ZUV2ZW50U2VyaWVzRm9yT3JnYW5pemF0aW9uPyhjcmVhdGVFdmVudFNlcmllc0lucHV0OiBDcmVhdGVFdmVudFNlcmllc0lucHV0KTogUHJvbWlzZTxFdmVudFNlcmllc1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gcmV0cmlldmUgYSBmaWxlJ3MgVVJMIGZyb20gc3RvcmFnZSB2aWEgQ2xvdWRGcm9udCBhbmQgUzMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZ2V0U3RvcmFnZUlucHV0IGlucHV0IHBhc3NlZCBpbiwgd2hpY2ggd2lsbCBiZSB1c2VkIGluIHJldHVybmluZyB0aGUgYXBwcm9wcmlhdGVcbiAgICAgKiBVUkwgZm9yIGEgZ2l2ZW4gZmlsZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEgIHtAbGluayBTdG9yYWdlUmVzcG9uc2V9LCByZXByZXNlbnRpbmcgdGhlIHJldHJpZXZlZCBjaG9zZSBmaWxlJ3MgVVJMLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRTdG9yYWdlRmlsZVVybD8oZ2V0U3RvcmFnZUlucHV0OiBHZXRTdG9yYWdlSW5wdXQpOiBQcm9taXNlPFN0b3JhZ2VSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHJldHJpZXZlIGxvY2F0aW9uIHByZWRpY3Rpb25zLCBmb3IgYSBsb2NhdGlvbiB0byBiZSBwYXNzZWQgaW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZ2V0TG9jYXRpb25QcmVkaWN0aW9uc0lucHV0IGlucHV0IHBhc3NlZCBpbiwgd2hpY2ggd2lsbCBiZSB1c2VkIGluIHJldHVybmluZ1xuICAgICAqIGxvY2F0aW9uIHByZWRpY3Rpb25zXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBHZXRMb2NhdGlvblByZWRpY3Rpb25zUmVzcG9uc2V9LCByZXByZXNlbnRpbmcgdGhlIHJldHJpZXZlZCBsb2NhdGlvbiBwcmVkaWN0aW9uc1xuICAgICAqIHRvIGJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRMb2NhdGlvblByZWRpY3Rpb25zPyhnZXRMb2NhdGlvblByZWRpY3Rpb25zSW5wdXQ6IEdldExvY2F0aW9uUHJlZGljdGlvbnNJbnB1dCk6IFByb21pc2U8R2V0TG9jYXRpb25QcmVkaWN0aW9uc1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2VvY29kZSBhIHBhcnRpY3VsYXIgYWRkcmVzcywgZm9yIGEgbG9jYXRpb24gdG8gYmUgcGFzc2VkIGluLlxuICAgICAqXG4gICAgICogQHBhcmFtIGdlb2NvZGVBc3luY0lucHV0IGlucHV0IHBhc3NlZCBpbixcbiAgICAgKiB3aGljaCB3ZSB3aWxsIHJldHJpZXZlIHRoZSBnZW9jb2RlZCBpbmZvcm1hdGlvbiBmb3IuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBHZW9jb2RlQXN5bmNSZXNwb25zZX0sIHJlcHJlc2VudGluZyB0aGUgcGFzc2VkIGluIGFkZHJlc3Mnc1xuICAgICAqIGdlb2NvZGVkIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZW9Db2RlQXN5bmM/KGdlb2NvZGVBc3luY0lucHV0OiBHZW9jb2RlQXN5bmNJbnB1dCk6IFByb21pc2U8R2VvY29kZUFzeW5jUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBnZXQgdGhlIG1pbGl0YXJ5IHZlcmlmaWNhdGlvbiBpbmZvcm1hdGlvbiBvZiBvbmVcbiAgICAgKiBvciBtdWx0aXBsZSB1c2VycywgZGVwZW5kaW5nIG9uIHRoZSBmaWx0ZXJzIHBhc3NlZCBpbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBnZXRNaWxpdGFyeVZlcmlmaWNhdGlvbkluZm9ybWF0aW9uSW5wdXQgdGhlIGlucHV0IGNvbnRhaW5pbmcgdGhlIG1pbGl0YXJ5XG4gICAgICogdmVyaWZpY2F0aW9uIHJlbGV2YW50IGZpbHRlcmluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIE1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVwb3J0aW5nSW5mb3JtYXRpb25SZXNwb25zZX0sIHJlcHJlc2VudGluZyB0aGUgZmlsdGVyZWRcbiAgICAgKiBtaWxpdGFyeSB2ZXJpZmljYXRpb24gaW5mb3JtYXRpb24gcmVjb3Jkcy5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0TWlsaXRhcnlWZXJpZmljYXRpb25JbmZvcm1hdGlvbj8oZ2V0TWlsaXRhcnlWZXJpZmljYXRpb25JbmZvcm1hdGlvbklucHV0OiBHZXRNaWxpdGFyeVZlcmlmaWNhdGlvbkluZm9ybWF0aW9uSW5wdXQpOiBQcm9taXNlPE1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVwb3J0aW5nSW5mb3JtYXRpb25SZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSBhbmQvb3IgY3JlYXRlIGFuIGV4aXN0aW5nL25ldyBtaWxpdGFyeSB2ZXJpZmljYXRpb24gcmVwb3J0XG4gICAgICogZmlsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwdXRNaWxpdGFyeVZlcmlmaWNhdGlvblJlcG9ydElucHV0IHRoZSBpbnB1dCBjb250YWluaW5nIHRoZSBpbmZvcm1hdGlvbiB0aGF0IG5lZWRzIHRvIGJlXG4gICAgICogdHJhbnNmZXJyZWQgaW50byB0aGUgbWlsaXRhcnkgdmVyaWZpY2F0aW9uIHJlcG9ydCBmaWxlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgTWlsaXRhcnlWZXJpZmljYXRpb25SZXBvcnRSZXNwb25zZX0sIHJlcHJlc2VudGluZyBhIGZsYWcgaGlnaGxpZ2h0aW5nIHdoZXRoZXJcbiAgICAgKiB0aGUgZmlsZSB3YXMgc3VjY2Vzc2Z1bGx5IHVwZGF0ZWQgb3Igbm90LlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBwdXRNaWxpdGFyeVZlcmlmaWNhdGlvblJlcG9ydD8ocHV0TWlsaXRhcnlWZXJpZmljYXRpb25SZXBvcnRJbnB1dDogUHV0TWlsaXRhcnlWZXJpZmljYXRpb25SZXBvcnRJbnB1dCk6IFByb21pc2U8TWlsaXRhcnlWZXJpZmljYXRpb25SZXBvcnRSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSBhIHJlZmVycmFsJ3MgcGFydGljdWxhciBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cGRhdGVSZWZlcnJhbElucHV0IHRoZSBpbnB1dCBjb250YWluaW5nIGFueSBpbmZvcm1hdGlvbiByZWxldmFudCBpblxuICAgICAqIHVwZGF0aW5nIGFuIGV4aXN0aW5nIHJlZmVycmFsIG9iamVjdFxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgUmVmZXJyYWxSZXNwb25zZX0sIHJlcHJlc2VudGluZyB0aGUgdXBkYXRlZCByZWZlcnJhbCBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdXBkYXRlUmVmZXJyYWw/KHVwZGF0ZVJlZmVycmFsSW5wdXQ6IFVwZGF0ZVJlZmVycmFsSW5wdXQpOiBQcm9taXNlPFJlZmVycmFsUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBnZXQgZXhpc3RpbmcgcmVmZXJyYWxzIGZpbHRlcmVkIGJ5IGEgcGFydGljdWxhciBzdGF0dXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZ2V0UmVmZXJyYWxzQnlTdGF0dXNJbnB1dCB0aGUgaW5wdXQgY29udGFpbmluZyBhbnkgZmlsdGVyaW5nIGluZm9ybWF0aW9uXG4gICAgICogcGVydGFpbmluZyB0aGUgcmVmZXJyYWwgc3RhdHVzIHRoYXQgd2Ugd291bGQgdXNlIHRvIGZpbHRlciBleGlzdGluZyByZWZlcnJhbHMgYnkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBSZWZlcnJhbFJlc3BvbnNlfSwgcmVwcmVzZW50aW5nIHRoZSByZWZlcnJhbCBpbmZvcm1hdGlvbiBmaWx0ZXJlZFxuICAgICAqIGJ5IHN0YXR1cy5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0UmVmZXJyYWxCeVN0YXR1cz8oZ2V0UmVmZXJyYWxzQnlTdGF0dXNJbnB1dDogR2V0UmVmZXJyYWxzQnlTdGF0dXNJbnB1dCk6IFByb21pc2U8UmVmZXJyYWxSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIGdldCB0aGUgQVBJIEtleSBmb3IgdGhlIEFwcCBVcGdyYWRlIHNlcnZpY2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBBcHBVcGdyYWRlUmVzcG9uc2V9LCByZXByZXNlbnRpbmcgdGhlIEFQSSBLZXlcbiAgICAgKiB1c2VkIGZvciB0aGUgQXBwIFVwZ3JhZGUgc2VydmljZS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0QXBwVXBncmFkZUFQSUtleT8oKTogUHJvbWlzZTxBcHBVcGdyYWRlUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBnZXQgdGhlIHVzZXJzIHdpdGggbm8gbGlua2VkIGNhcmRzLlxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgSW5lbGlnaWJsZUxpbmtlZFVzZXJzUmVzcG9uc2V9LCByZXByZXNlbnRpbmcgdGhlIHVzZXJzXG4gICAgICogd2hpY2ggYXJlIG5vdCBlbGlnaWJsZSBmb3IgYSByZWltYnVyc2VtZW50LCBzaW5jZSB0aGV5IGhhdmUgbm8gbGlua2VkIGNhcmRzLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRVc2Vyc1dpdGhOb0NhcmRzPygpOiBQcm9taXNlPEluZWxpZ2libGVMaW5rZWRVc2Vyc1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2V0IGFsbCBBQ1RJVkUgbm90aWZpY2F0aW9uIHJlbWluZGVycy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIE5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2V9LCByZXByZXNlbnRpbmcgdGhlIEFDVElWRSBub3RpZmljYXRpb25cbiAgICAgKiByZW1pbmRlcnMuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldE5vdGlmaWNhdGlvblJlbWluZGVycz8oKTogUHJvbWlzZTxOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gdXBkYXRlIGEgc3BlY2lmaWMgbm90aWZpY2F0aW9uIHJlbWluZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVySW5wdXQgdGhlIG5vdGlmaWNhdGlvbiByZW1pbmRlciBpbnB1dCwgY29udGFpbmluZyBhbnkgaW5mb3JtYXRpb24gdXNlZCB0b1xuICAgICAqIHVwZGF0ZSBhbiBhcHBsaWNhYmxlIG5vdGlmaWNhdGlvbiByZW1pbmRlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIE5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2V9LCByZXByZXNlbnRpbmcgdGhlIHVwZGF0ZSBub3RpZmljYXRpb24gcmVtaW5kZXIuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyPyh1cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlcklucHV0OiBVcGRhdGVOb3RpZmljYXRpb25SZW1pbmRlcklucHV0KTogUHJvbWlzZTxOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2V0IGEgdXNlcidzIGNvbnRhY3QgaW5mb3JtYXRpb24sIGJhc2VkIG9uIGNlcnRhaW5cbiAgICAgKiBmaWx0ZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRhY3RJbmZvcm1hdGlvbklucHV0IGNvbnRhY3QgaW5mb3JtYXRpb24gaW5wdXQgcGFzc2VkIGluLCBjb250YWluaW5nIHRoZVxuICAgICAqIGZpbHRlcnMgdXNlZCB0byByZXRyaWV2ZSB0aGUgdXNlcidzIGNvbnRhY3QgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBNaWxpdGFyeVZlcmlmaWNhdGlvblJlcG9ydGluZ0luZm9ybWF0aW9uUmVzcG9uc2V9LCByZXByZXNlbnRpbmcgdGhlIHVzZXIncyBmaWx0ZXJlZFxuICAgICAqIGNvbnRhY3QgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJldHJpZXZlQ29udGFjdEluZm9ybWF0aW9uRm9yVXNlcj8oY29udGFjdEluZm9ybWF0aW9uSW5wdXQ6IE1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVwb3J0aW5nSW5mb3JtYXRpb24pOiBQcm9taXNlPE1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVwb3J0aW5nSW5mb3JtYXRpb25SZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIGdldCBhbGwgdGhlIHVzZXJzIGVsaWdpYmxlIGZvciBhIHJlaW1idXJzZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBVc2VyRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZX0sIHJlcHJlc2VudGluZyBlYWNoIGluZGl2aWR1YWwgdXNlcnMnXG4gICAgICogdXNlciBJRCwgZmlyc3QsIGxhc3QgbmFtZSBhbmQgZW1haWwuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldEFsbFVzZXJzRWxpZ2libGVGb3JSZWltYnVyc2VtZW50cz8oKTogUHJvbWlzZTxVc2VyRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIGdldCBhbGwgdGhlIHVzZXJzIHVzZWQgdG8gZGVsaXZlcmVkXG4gICAgICogbm90aWZpY2F0aW9uIHJlbWluZGVycyB0by5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIFVzZXJGb3JOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlfSwgcmVwcmVzZW50aW5nIGVhY2ggaW5kaXZpZHVhbCB1c2VycydcbiAgICAgKiB1c2VyIElELCBmaXJzdCwgbGFzdCBuYW1lIGFuZCBlbWFpbC5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0QWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlcnM/KCk6IFByb21pc2U8VXNlckZvck5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBnZXQgYWxsIHRoZSB1c2VycyB1c2VkIHRvIGRlbGl2ZXIgbm90aWZpY2F0aW9uIHJlbWluZGVycyB0byxcbiAgICAgKiBzb3J0ZWQgYnkgYSBwYXJ0aWN1bGFyIGxvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGdldFVzZXJzQnlHZW9ncmFwaGljYWxMb2NhdGlvbklucHV0IHRoZSBnZW9sb2NhdGlvbiBpbnB1dCB0aGF0IHdlIGZpbHRlciB1c2VycyBieVxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgVXNlckZvck5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2V9LCByZXByZXNlbnRpbmcgZWFjaCBpbmRpdmlkdWFsIHVzZXJzJ1xuICAgICAqIHVzZXIgSUQsIGZpcnN0LCBsYXN0IG5hbWUgYW5kIGVtYWlsLCBzb3J0ZWQgYnkgYSBwYXJ0aWN1bGFyIGxvY2F0aW9uIChjaXR5ICYgc3RhdGUgY29tYmluYXRpb24pLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRVc2Vyc0J5R2VvZ3JhcGh5Rm9yTm90aWZpY2F0aW9uUmVtaW5kZXJzPyhnZXRVc2Vyc0J5R2VvZ3JhcGhpY2FsTG9jYXRpb25JbnB1dCA6R2V0VXNlcnNCeUdlb2dyYXBoaWNhbExvY2F0aW9uSW5wdXQpOiBQcm9taXNlPFVzZXJGb3JOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2V0IGEgdXNlcidzIGVtYWlsLCBnaXZlbiBjZXJ0YWluIGZpbHRlcnMgdG8gYmUgcGFzc2VkIGluLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1pbGl0YXJ5VmVyaWZpY2F0aW9uTm90aWZpY2F0aW9uVXBkYXRlIHRoZSBtaWxpdGFyeSB2ZXJpZmljYXRpb24gbm90aWZpY2F0aW9uIHVwZGF0ZVxuICAgICAqIG9iamVjdHMsIHVzZWQgdG8gZmlsdGVyIHRocm91Z2ggdGhlIENvZ25pdG8gdXNlciBwb29sLCBpbiBvcmRlciB0byBvYnRhaW4gYSB1c2VyJ3MgZW1haWwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBFbWFpbEZyb21Db2duaXRvUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGUgdXNlcidzIGVtYWlsIG9idGFpbmVkXG4gICAgICogZnJvbSBDb2duaXRvLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRFbWFpbEZvclVzZXI/KG1pbGl0YXJ5VmVyaWZpY2F0aW9uTm90aWZpY2F0aW9uVXBkYXRlOiBNaWxpdGFyeVZlcmlmaWNhdGlvbk5vdGlmaWNhdGlvblVwZGF0ZSk6IFByb21pc2U8RW1haWxGcm9tQ29nbml0b1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2V0IGFsbCB0aGUgb2ZmZXJzLCBnaXZlbiBjZXJ0YWluIGZpbHRlcnMgdG8gYmUgcGFzc2VkIGluLlxuICAgICAqXG4gICAgICogQHBhcmFtIGdldE9mZmVyc0lucHV0IHRoZSBvZmZlcnMgaW5wdXQsIGNvbnRhaW5pbmcgdGhlIGZpbHRlcmluZyBpbmZvcm1hdGlvblxuICAgICAqIHVzZWQgdG8gcmV0cmlldmUgYWxsIHRoZSBhcHBsaWNhYmxlL21hdGNoaW5nIG9mZmVycy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIE9mZmVyc1Jlc3BvbnNlfSByZXByZXNlbnRpbmcgdGhlIG1hdGNoZWQgb2ZmZXJzJyBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0T2ZmZXJzPyhnZXRPZmZlcnNJbnB1dDogR2V0T2ZmZXJzSW5wdXQpOiBQcm9taXNlPE9mZmVyc1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gc2VhcmNoIGFuIG9mZmVyLCBnaXZlbiBjZXJ0YWluIGZpbHRlcnMgdG8gYmUgcGFzc2VkIGluLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNlYXJjaE9mZmVyc0lucHV0IHRoZSBvZmZlcnMgaW5wdXQsIGNvbnRhaW5pbmcgdGhlIGZpbHRlcmluZyBpbmZvcm1hdGlvblxuICAgICAqIHVzZWQgdG8gc2VhcmNoIGFueSBhcHBsaWNhYmxlL21hdGNoaW5nIG9mZmVycy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIE9mZmVyc1Jlc3BvbnNlfSByZXByZXNlbnRpbmcgdGhlIG1hdGNoZWQgb2ZmZXJzJyBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgc2VhcmNoT2ZmZXJzPyhzZWFyY2hPZmZlcnNJbnB1dDogU2VhcmNoT2ZmZXJzSW5wdXQpOiBQcm9taXNlPE9mZmVyc1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2V0IGFsbCB0aGUgcGh5c2ljYWwgZGV2aWNlcyBhc3NvY2lhdGVkIHdpdGggYSBwYXJ0aWN1bGFyIHVzZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZ2V0RGV2aWNlc0ZvclVzZXJJbnB1dCB0aGUgZGV2aWNlcyBmb3IgdXNlciBpbnB1dCwgY29udGFpbmluZyB0aGUgZmlsdGVyaW5nIGluZm9ybWF0aW9uXG4gICAgICogdXNlZCB0byByZXRyaWV2ZSBhbGwgdGhlIHBoeXNpY2FsIGRldmljZXMgZm9yIGEgcGFydGljdWxhciB1c2VyLlxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgVXNlckRldmljZXNSZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSBtYXRjaGVkIHBoeXNpY2FsIGRldmljZXMnIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXREZXZpY2VzRm9yVXNlcj8oZ2V0RGV2aWNlc0ZvclVzZXJJbnB1dDogR2V0RGV2aWNlc0ZvclVzZXJJbnB1dCk6IFByb21pc2U8VXNlckRldmljZXNSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHNlbmQgYSBtb2JpbGUgcHVzaCBub3RpZmljYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VuZE1vYmlsZVB1c2hOb3RpZmljYXRpb25JbnB1dCB0aGUgbm90aWZpY2F0aW9uIGlucHV0IGRldGFpbHMgdG8gYmUgcGFzc2VkIGluLCBpbiBvcmRlciB0byBzZW5kXG4gICAgICogYSBtb2JpbGUgcHVzaCBub3RpZmljYXRpb25cbiAgICAgKiBAcGFyYW0gbm90aWZpY2F0aW9uVHlwZSB0aGUgdHlwZSBvZiBub3RpZmljYXRpb24gdG8gc2VuZCBtb2JpbGUgcHVzaCBub3RpZmljYXRpb25zIGZvclxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgTm90aWZpY2F0aW9uUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGUgQ291cmllciBub3RpZmljYXRpb24gcmVzcG9uc2VcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgc2VuZE1vYmlsZVB1c2hOb3RpZmljYXRpb24/KHNlbmRNb2JpbGVQdXNoTm90aWZpY2F0aW9uSW5wdXQ6IFNlbmRNb2JpbGVQdXNoTm90aWZpY2F0aW9uSW5wdXQsIG5vdGlmaWNhdGlvblR5cGU6IE5vdGlmaWNhdGlvblR5cGUpOiBQcm9taXNlPE5vdGlmaWNhdGlvblJlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gc2VuZCBhbiBlbWFpbCBub3RpZmljYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VuZEVtYWlsTm90aWZpY2F0aW9uSW5wdXQgdGhlIG5vdGlmaWNhdGlvbiBpbnB1dCBkZXRhaWxzIHRvIGJlIHBhc3NlZCBpbiwgaW4gb3JkZXIgdG8gc2VuZFxuICAgICAqIGFuIGVtYWlsIG5vdGlmaWNhdGlvblxuICAgICAqIEBwYXJhbSBub3RpZmljYXRpb25UeXBlIHRoZSB0eXBlIG9mIG5vdGlmaWNhdGlvbiB0byBzZW5kIGVtYWlsIG5vdGlmaWNhdGlvbnMgZm9yXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBOb3RpZmljYXRpb25SZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSBDb3VyaWVyIG5vdGlmaWNhdGlvbiByZXNwb25zZVxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBzZW5kRW1haWxOb3RpZmljYXRpb24/KHNlbmRFbWFpbE5vdGlmaWNhdGlvbklucHV0OiBTZW5kRW1haWxOb3RpZmljYXRpb25JbnB1dCwgbm90aWZpY2F0aW9uVHlwZTogTm90aWZpY2F0aW9uVHlwZSk6IFByb21pc2U8Tm90aWZpY2F0aW9uUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBjcmVhdGUgYSBub3RpZmljYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY3JlYXRlTm90aWZpY2F0aW9uSW5wdXQgdGhlIG5vdGlmaWNhdGlvbiBkZXRhaWxzIHRvIGJlIHBhc3NlZCBpbiwgaW4gb3JkZXIgdG8gY3JlYXRlIGEgbmV3XG4gICAgICogbm90aWZpY2F0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBDcmVhdGVOb3RpZmljYXRpb25SZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSBuZXdseSBjcmVhdGVkIG5vdGlmaWNhdGlvbiBkYXRhXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNyZWF0ZU5vdGlmaWNhdGlvbj8oY3JlYXRlTm90aWZpY2F0aW9uSW5wdXQ6IENyZWF0ZU5vdGlmaWNhdGlvbklucHV0KTogUHJvbWlzZTxDcmVhdGVOb3RpZmljYXRpb25SZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIGdldCBhbGwgdHJhbnNhY3Rpb25zLCBmb3IgYSBwYXJ0aWN1bGFyIHVzZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZ2V0VHJhbnNhY3Rpb25JbnB1dCB0aGUgdHJhbnNhY3Rpb24gaW5wdXQgb2JqZWN0IHRvIGJlIHBhc3NlZCBpbixcbiAgICAgKiBjb250YWluaW5nIGFsbCB0aGUgbmVjZXNzYXJ5IGZpbHRlcmluZyBmb3IgcmV0cmlldmluZyB0aGUgdHJhbnNhY3Rpb25zIGZvciBhIHBhcnRpY3VsYXIgdXNlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIE1vb25iZWFtVHJhbnNhY3Rpb25zUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGUgdHJhbnNhY3Rpb25hbCBkYXRhLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRUcmFuc2FjdGlvbj8oZ2V0VHJhbnNhY3Rpb25JbnB1dDogR2V0VHJhbnNhY3Rpb25JbnB1dCk6IFByb21pc2U8TW9vbmJlYW1UcmFuc2FjdGlvbnNSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIGdldCBhbGwgdHJhbnNhY3Rpb25zLCBmb3IgYSBwYXJ0aWN1bGFyIHVzZXIsIGZpbHRlcmVkXG4gICAgICogYnkgdGhlaXIgc3RhdHVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGdldFRyYW5zYWN0aW9uQnlTdGF0dXNJbnB1dCB0aGUgdHJhbnNhY3Rpb24gYnkgc3RhdHVzIGlucHV0IG9iamVjdCB0byBiZSBwYXNzZWQgaW4sXG4gICAgICogY29udGFpbmluZyBhbGwgdGhlIG5lY2Vzc2FyeSBmaWx0ZXJpbmcgZm9yIHJldHJpZXZpbmcgdGhlIHRyYW5zYWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIE1vb25iZWFtVHJhbnNhY3Rpb25zQnlTdGF0dXNSZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSB0cmFuc2FjdGlvbmFsIGRhdGEsXG4gICAgICogZmlsdGVyZWQgYnkgc3RhdHVzIHJlc3BvbnNlXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldFRyYW5zYWN0aW9uQnlTdGF0dXM/KGdldFRyYW5zYWN0aW9uQnlTdGF0dXNJbnB1dDogR2V0VHJhbnNhY3Rpb25CeVN0YXR1c0lucHV0KTogUHJvbWlzZTxNb29uYmVhbVRyYW5zYWN0aW9uc0J5U3RhdHVzUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgYW4gZXhpc3RpbmcgdHJhbnNhY3Rpb24ncyBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHVwZGF0ZVRyYW5zYWN0aW9uSW5wdXQgdGhlIHRyYW5zYWN0aW9uIGRldGFpbHMgdG8gYmUgcGFzc2VkIGluLCBpbiBvcmRlciB0byB1cGRhdGVcbiAgICAgKiBhbiBleGlzdGluZyB0cmFuc2FjdGlvblxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgTW9vbmJlYW1VcGRhdGVkVHJhbnNhY3Rpb25SZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSB1cGRhdGVkIHRyYW5zYWN0aW9uXG4gICAgICogZGF0YVxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCB1cGRhdGVUcmFuc2FjdGlvbj8odXBkYXRlVHJhbnNhY3Rpb25JbnB1dDogVXBkYXRlVHJhbnNhY3Rpb25JbnB1dCk6IFByb21pc2U8TW9vbmJlYW1VcGRhdGVkVHJhbnNhY3Rpb25SZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHNlbmQgYSBuZXcgbWlsaXRhcnkgdmVyaWZpY2F0aW9uIHN0YXR1cyBhY2tub3dsZWRnbWVudCwgc28gd2UgY2FuIGtpY2stc3RhcnQgdGhlIG1pbGl0YXJ5IHZlcmlmaWNhdGlvblxuICAgICAqIHN0YXR1cyB1cGRhdGUgbm90aWZpY2F0aW9uIHByb2Nlc3MgdGhyb3VnaCB0aGUgcHJvZHVjZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWlsaXRhcnlWZXJpZmljYXRpb25Ob3RpZmljYXRpb25VcGRhdGUgbWlsaXRhcnkgdmVyaWZpY2F0aW9uIHVwZGF0ZSBvYmplY3RcbiAgICAgKlxuICAgICAqIEByZXR1cm4gYSB7QGxpbmsgUHJvbWlzZX0gb2Yge0BsaW5rIEFQSUdhdGV3YXlQcm94eVJlc3VsdH0gcmVwcmVzZW50aW5nIHRoZSBBUEkgR2F0ZXdheSByZXN1bHRcbiAgICAgKiBzZW50IGJ5IHRoZSBtaWxpdGFyeSB2ZXJpZmljYXRpb24gdXBkYXRlIHByb2R1Y2VyIExhbWJkYSwgdG8gdmFsaWRhdGUgd2hldGhlciB0aGUgbWlsaXRhcnkgdmVyaWZpY2F0aW9uXG4gICAgICogbm90aWZpY2F0aW9uIHVwZGF0ZSBwcm9jZXNzIGtpY2stc3RhcnRlZCBvciBub3RcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgbWlsaXRhcnlWZXJpZmljYXRpb25VcGRhdGVzQWNrbm93bGVkZ21lbnQ/KG1pbGl0YXJ5VmVyaWZpY2F0aW9uTm90aWZpY2F0aW9uVXBkYXRlOiBNaWxpdGFyeVZlcmlmaWNhdGlvbk5vdGlmaWNhdGlvblVwZGF0ZSk6IFByb21pc2U8QVBJR2F0ZXdheVByb3h5UmVzdWx0PjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gc2VuZCBhIG5ldyB0cmFuc2FjdGlvbiBhY2tub3dsZWRnbWVudCwgZm9yIGFuIHVwZGF0ZWQgdHJhbnNhY3Rpb24sIHNvIHdlIGNhbiBraWNrLXN0YXJ0IHRoZVxuICAgICAqIHRyYW5zYWN0aW9uIHByb2Nlc3MgdGhyb3VnaCB0aGUgdHJhbnNhY3Rpb24gcHJvZHVjZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXBkYXRlZFRyYW5zYWN0aW9uRXZlbnQgdXBkYXRlZCB0cmFuc2FjdGlvbiBldmVudCB0byBiZSBwYXNzZWQgaW5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gYSB7QGxpbmsgUHJvbWlzZX0gb2Yge0BsaW5rIEFQSUdhdGV3YXlQcm94eVJlc3VsdH0gcmVwcmVzZW50aW5nIHRoZSBBUEkgR2F0ZXdheSByZXN1bHRcbiAgICAgKiBzZW50IGJ5IHRoZSByZWltYnVyc2VtZW50IHByb2R1Y2VyIExhbWJkYSwgdG8gdmFsaWRhdGUgd2hldGhlciB0aGUgdHJhbnNhY3Rpb25zIHByb2Nlc3Mgd2FzXG4gICAgICoga2ljay1zdGFydGVkIG9yIG5vdC5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdHJhbnNhY3Rpb25zQWNrbm93bGVkZ21lbnQ/KHVwZGF0ZWRUcmFuc2FjdGlvbkV2ZW50OiBVcGRhdGVkVHJhbnNhY3Rpb25FdmVudCk6IFByb21pc2U8QVBJR2F0ZXdheVByb3h5UmVzdWx0PjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gY3JlYXRlIGEgbmV3IHRyYW5zYWN0aW9uIGludGVybmFsbHksIGZyb20gYW4gaW5jb21pbmcgdHJhbnNhY3Rpb25cbiAgICAgKiBvYnRhaW5lZCBmcm9tIHRoZSBTUVMgbWVzc2FnZS9ldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uIHRyYW5zYWN0aW9uIHBhc3NlZCBpbiBmcm9tIHRoZSBTUVMgbWVzc2FnZS9ldmVudFxuICAgICAqXG4gICAgICogQHJldHVybiBhIHtAbGluayBQcm9taXNlfSBvZiB7QGxpbmsgTW9vbmJlYW1UcmFuc2FjdGlvblJlc3BvbnNlfSByZXByZXNlbnRpbmcgdGhlIHRyYW5zYWN0aW9uXG4gICAgICogZGV0YWlscyB0aGF0IHdlcmUgc3RvcmVkIGluIER5bmFtbyBEQlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjcmVhdGVUcmFuc2FjdGlvbj8odHJhbnNhY3Rpb246IE1vb25iZWFtVHJhbnNhY3Rpb24pOiBQcm9taXNlPE1vb25iZWFtVHJhbnNhY3Rpb25SZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHJldHJpZXZlIHRoZSBkZXRhaWxzIG9mIGEgZ2l2ZW4gY2FyZCwgZ2l2ZW4gaXRzIGNvcnJlc3BvbmRpbmcgaWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2FyZElkIHRoZSBpZCBvZiB0aGUgY2FyZCB0byByZXRyaWV2ZSB0aGUgZGV0YWlscyBmb3JcbiAgICAgKlxuICAgICAqIEByZXR1cm4gYSB7bGluayBQcm9taXNlfSBvZiB7QGxpbmsgQ2FyZERldGFpbHNSZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSBleHBpcmF0aW9uIGRhdGUgb2ZcbiAgICAgKiB0aGUgY2FyZCB0byBiZSByZXRyaWV2ZWQuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldENhcmREZXRhaWxzPyhjYXJkSWQ6IHN0cmluZyk6IFByb21pc2U8Q2FyZERldGFpbHNSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHJldHJpZXZlIHRoZSB1cGRhdGUgdGhlIGRldGFpbHMgb2YgYSBnaXZlbiBjYXJkLiBUaGlzIHdpbGwgZXNwZWNpYWxseSBiZSB1c2VkXG4gICAgICogd2hlbiB1cGRhdGluZyBpdHMgZXhwaXJhdGlvbiBkYXRlLlxuICAgICAqXG4gICAgICogQHJldHVybiBhIHtsaW5rIFByb21pc2V9IG9mIHtAbGluayBFbGlnaWJsZUxpbmtlZFVzZXJzUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGUgdXNlciB3aXRoIHRoZVxuICAgICAqIHVwZGF0ZWQgY2FyZCBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCB1cGRhdGVDYXJkRGV0YWlscz8odXBkYXRlQ2FyZElucHV0OiBVcGRhdGVDYXJkSW5wdXQpOiBQcm9taXNlPEVsaWdpYmxlTGlua2VkVXNlcnNSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHJldHJpZXZlIHRoZSBsaXN0IG9mIGVsaWdpYmxlIGxpbmtlZCB1c2VycywgdG8gYmUgdXNlciBkdXJpbmcgdGhlIHJlaW1idXJzZW1lbnRzXG4gICAgICogcHJvY2Vzcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gYSB7bGluayBQcm9taXNlfSBvZiB7QGxpbmsgRWxpZ2libGVMaW5rZWRVc2Vyc1Jlc3BvbnNlfSByZXByZXNlbnRpbmcgdGhlIGxpc3Qgb2YgZWxpZ2libGVcbiAgICAgKiB1c2Vyc1xuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRFbGlnaWJsZUxpbmtlZFVzZXJzPygpOiBQcm9taXNlPEVsaWdpYmxlTGlua2VkVXNlcnNSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHZlcmlmeSBhbiBpbmRpdmlkdWFsJ3MgbWlsaXRhcnkgc2VydmljZSBzdGF0dXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbnVtYmVyT2ZDYWxscyBvcHRpb25hbCBwYXJhbSwgdXNlZCBmb3IgdXNlIGNhc2VzIHdoZW4gd2UgcmVjdXJzaXZlbHkgY2FsbFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZnVuY3Rpb24gaW4gb3JkZXIgdG8gbWFrZSBhZGRpdGlvbmFsIGNhbGxzIHRvIFF1YW5kaXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICBmb3IgdXNlcnMgd2hvIGxpc3QgYW4gaW5jb3JyZWN0IGVubGlzdG1lbnQgeWVhciBhdCBmaXJzdFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgIChub3QgYXBwbGljYWJsZSBmb3IgdGhlIFZBKVxuICAgICAqIEBwYXJhbSBuZXdFbmxpc3RtZW50WWVhciBvcHRpb25hbCBwYXJhbSwgcmVwcmVzZW50aW5nIG5ldyBlbmxpc3RtZW50IHllYXIgZm9yIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICByZWN1cnNpdmUgY2FsbCAobm90IGFwcGxpY2FibGUgZm9yIHRoZSBWQSkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1c1R5cGV9IHJlcHJlc2VudGluZyB0aGVcbiAgICAgKiBtaWxpdGFyeSB2ZXJpZmljYXRpb24gc3RhdHVzIG9idGFpbmVkIGZyb20gdGhlIGNsaWVudCB2ZXJpZmljYXRpb24gY2FsbFxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCB2ZXJpZnlTZXJ2aWNlTWVtYmVyPyhudW1iZXJPZkNhbGxzPzogbnVtYmVyLCBuZXdFbmxpc3RtZW50WWVhcj86IG51bWJlcik6IFByb21pc2U8TWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXNUeXBlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gdmVyaWZ5IGFuIGluZGl2aWR1YWwncyBzcG91c2UncyBtaWxpdGFyeSBzZXJ2aWNlIHN0YXR1cy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gYSB7QGxpbmsgUHJvbWlzZX0gb2Yge0BsaW5rIE1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzVHlwZX0gcmVwcmVzZW50aW5nIHRoZVxuICAgICAqIG1pbGl0YXJ5IHZlcmlmaWNhdGlvbiBzdGF0dXMgb2J0YWluZWQgZnJvbSB0aGUgY2xpZW50IHZlcmlmaWNhdGlvbiBjYWxsXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHZlcmlmeU1lbWJlclNwb3VzZT8oKTogUHJvbWlzZTxNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1c1R5cGU+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBjb21wbGV0ZSB0aGUgbGlua2luZyBvZiBhbiBpbmRpdmlkdWFsJ3MgY2FyZCBvbiB0aGUgcGxhdGZvcm0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXNlcklkIHVuaXF1ZSB1c2VyIElEIG9mIGEgY2FyZCBsaW5raW5nIHVzZXIuXG4gICAgICogQHBhcmFtIGNyZWF0ZWRBdCBjYXJkIGxpbmtlZCBvYmplY3QgY3JlYXRpb24gZGF0ZVxuICAgICAqIEBwYXJhbSB1cGRhdGVkQXQgY2FyZCBsaW5rZWQgb2JqZWN0IHVwZGF0ZSBkYXRlXG4gICAgICogQHBhcmFtIGNhcmQgY2FyZCBpbmZvcm1hdGlvbiB0byBiZSB1c2VkIGR1cmluZyB0aGUgZW5yb2xsbWVudC9saW5raW5nIHByb2Nlc3NcbiAgICAgKlxuICAgICAqIEByZXR1cm4gYSB7QGxpbmsgUHJvbWlzZX0gb2Yge0BsaW5rIENhcmRMaW5rUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGVcbiAgICAgKiBjYXJkIGxpbmsgcmVzcG9uc2Ugb2JqZWN0IG9idGFpbmVkIGZyb20gdGhlIGxpbmtpbmcgY2FsbFxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBsaW5rPyh1c2VySWQ6IHN0cmluZywgY3JlYXRlZEF0OiBzdHJpbmcsIHVwZGF0ZWRBdDogc3RyaW5nLCBjYXJkOiBDYXJkKTogUHJvbWlzZTxDYXJkTGlua1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gYWRkIGEgbmV3IGNhcmQgdG8gYW4gZXhpc3RpbmcgbWVtYmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHVzZXJJZCB1bmlxdWUgdXNlciBJRCBvZiBhIGNhcmQgbGlua2luZyB1c2VyLlxuICAgICAqIEBwYXJhbSBtZW1iZXJJZCBtZW1iZXIgaWQsIHJldHJpZXZlZCBmcm9tIE9saXZlLCB3aGljaCB0aGUgY2FyZCB3aWxsIGJlIGFkZGVkIHRvXG4gICAgICogQHBhcmFtIGNyZWF0ZWRBdCBjYXJkIGxpbmtlZCBvYmplY3QgY3JlYXRpb24gZGF0ZVxuICAgICAqIEBwYXJhbSB1cGRhdGVkQXQgY2FyZCBsaW5rZWQgb2JqZWN0IHVwZGF0ZSBkYXRlXG4gICAgICogQHBhcmFtIGNhcmQgY2FyZCBpbmZvcm1hdGlvbiB0byBiZSB1c2VkIGluIGFkZGluZyBhIG5ldyBjYXJkIHRvIGEgbWVtYmVyXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBDYXJkTGlua1Jlc3BvbnNlfSByZXByZXNlbnRpbmcgdGhlXG4gICAgICogY2FyZCBsaW5rIHJlc3BvbnNlIG9iamVjdCBvYnRhaW5lZCBmcm9tIHRoZSBhZGQgY2FyZCBjYWxsXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFkZENhcmQ/KHVzZXJJZDogc3RyaW5nLCBtZW1iZXJJZDogc3RyaW5nLCBjcmVhdGVkQXQ6IHN0cmluZywgdXBkYXRlZEF0OiBzdHJpbmcsIGNhcmQ6IENhcmQpOiBQcm9taXNlPENhcmRMaW5rUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgYSBtZW1iZXIncyBzdGF0dXMsIHRvIGVpdGhlciBhY3RpdmUgb3IgaW5hY3RpdmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXNlcklkIHVuaXF1ZSB1c2VyIElEIG9mIGEgY2FyZCBsaW5raW5nIHVzZXIuXG4gICAgICogQHBhcmFtIG1lbWJlcklkIG1lbWJlciBpZCwgcmV0cmlldmVkIGZyb20gT2xpdmUsIHdoaWNoIHRoZSBzdGF0dXMgd2lsbCBiZSB1cGRhdGVkIGZvclxuICAgICAqIEBwYXJhbSBtZW1iZXJGbGFnIGZsYWcgdG8gaW5kaWNhdGUgd2hhdCB0aGUgc3RhdHVzIG9mIHRoZSBtZW1iZXIsIHdpbGwgYmUgdXBkYXRlZCB0b1xuICAgICAqIEBwYXJhbSB1cGRhdGVkQXQgY2FyZCBsaW5rZWQgb2JqZWN0IHVwZGF0ZSBkYXRlXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBNZW1iZXJSZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZVxuICAgICAqIG1lbWJlcidzIGNvbnRlbnRzIGFmdGVyIHRoZSB1cGRhdGUgaXMgcGVyZm9ybWVkXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHVwZGF0ZU1lbWJlclN0YXR1cz8odXNlcklkOiBzdHJpbmcsIG1lbWJlcklkOiBzdHJpbmcsIG1lbWJlckZsYWc6IGJvb2xlYW4sIHVwZGF0ZWRBdDogc3RyaW5nKTogUHJvbWlzZTxNZW1iZXJSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHJlbW92ZS9kZWFjdGl2YXRlIGEgY2FyZCwgZ2l2ZW4gaXRzIElELlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhcmRJZCB0aGUgaWQgb2YgdGhlIGNhcmQgdG8gYmUgcmVtb3ZlZC9kZWxldGVkL2RlYWN0aXZhdGVkXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBSZW1vdmVDYXJkUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGVcbiAgICAgKiBjYXJkIHJlbW92YWwgcmVzcG9uc2UuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJlbW92ZUNhcmQ/KGNhcmRJZDogc3RyaW5nKTogUHJvbWlzZTxSZW1vdmVDYXJkUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byByZXRyaWV2ZSB0aGUgYnJhbmQgZGV0YWlscywgZ2l2ZW4gYSBicmFuZCBJRC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiB0aGUgdHJhbnNhY3Rpb24gb2JqZWN0LCBwb3B1bGF0ZWQgYnkgdGhlIGluaXRpYWwgZGV0YWlsc1xuICAgICAqIHBhc3NlZCBpbiBieSBPbGl2ZS4gVGhpcyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIHNldCBldmVuIG1vcmUgaW5mb3JtYXRpb24gZm9yXG4gICAgICogaXQsIG9idGFpbmVkIGZyb20gdGhpcyBicmFuZCBjYWxsLlxuICAgICAqXG4gICAgICogQHJldHVybiBhIHtAbGluayBQcm9taXNlfSBvZiB7QGxpbmsgVHJhbnNhY3Rpb25SZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSB0cmFuc2FjdGlvblxuICAgICAqIHdpdGggdGhlIGJyYW5kIGRldGFpbHMgb2J0YWluZWQsIGluY2x1ZGVkIGluIGl0LlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRCcmFuZERldGFpbHM/KHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFByb21pc2U8VHJhbnNhY3Rpb25SZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHJldHJpZXZlIHRoZSBzdG9yZSBkZXRhaWxzLCBnaXZlbiBhIHN0b3JlIElELlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uIHRoZSB0cmFuc2FjdGlvbiBvYmplY3QsIHBvcHVsYXRlZCBieSB0aGUgaW5pdGlhbCBkZXRhaWxzXG4gICAgICogcGFzc2VkIGluIGJ5IE9saXZlLiBUaGlzIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gc2V0IGV2ZW4gbW9yZSBpbmZvcm1hdGlvbiBmb3JcbiAgICAgKiBpdCwgb2J0YWluZWQgZnJvbSB0aGlzIGJyYW5kIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBUcmFuc2FjdGlvblJlc3BvbnNlfSByZXByZXNlbnRpbmcgdGhlIHRyYW5zYWN0aW9uXG4gICAgICogd2l0aCB0aGUgc3RvcmUgZGV0YWlscyBvYnRhaW5lZCwgaW5jbHVkZWQgaW4gaXQuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldFN0b3JlRGV0YWlscz8odHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUHJvbWlzZTxUcmFuc2FjdGlvblJlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gcmV0cmlldmUgdGhlIG1lbWJlciBkZXRhaWxzLCBzcGVjaWZpY2FsbHkgdGhlIGV4dE1lbWJlcklkLCB3aGljaCBpcyBNb29uYmVhbSdzIHVuaXF1ZSB1c2VyIElEXG4gICAgICogc2V0IGF0IGNyZWF0aW9uIHRpbWUsIGdpdmVuIGEgbWVtYmVyIElELlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lbWJlcklkIG1lbWJlciBJRCBvYnRhaW5lZCBmcm9tIE9saXZlIGF0IGNyZWF0aW9uIHRpbWUsIHVzZWQgdG8gcmV0cmlldmUgdGhlXG4gICAgICogb3RoZXIgbWVtYmVyIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBNZW1iZXJEZXRhaWxzUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGUgbWVtYmVyIGRldGFpbHNcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0TWVtYmVyRGV0YWlscz8obWVtYmVySWQ6IHN0cmluZyk6IFByb21pc2U8TWVtYmVyRGV0YWlsc1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gcmV0cmlldmUgdGhlIHRyYW5zYWN0aW9uIGRldGFpbHMsIGdpdmVuIGEgdHJhbnNhY3Rpb24gSURcbiAgICAgKiAodXNlZCBmb3IgdHJhbnNhY3Rpb25hbCBwdXJwb3NlcykuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gdGhlIHRyYW5zYWN0aW9uIG9iamVjdCwgcG9wdWxhdGVkIGJ5IHRoZSBpbml0aWFsIGRldGFpbHNcbiAgICAgKiBwYXNzZWQgaW4gYnkgT2xpdmUuIFRoaXMgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBzZXQgZXZlbiBtb3JlIGluZm9ybWF0aW9uIGZvclxuICAgICAqIGl0LCBvYnRhaW5lZCBmcm9tIHRoaXMgdHJhbnNhY3Rpb24gZGV0YWlscyBjYWxsLlxuICAgICAqXG4gICAgICogQHJldHVybiBhIHtAbGluayBQcm9taXNlfSBvZiB7QGxpbmsgVHJhbnNhY3Rpb25SZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZVxuICAgICAqIHRyYW5zYWN0aW9uIG9iamVjdCwgcG9wdWxhdGVkIHdpdGggdGhlIGFkZGl0aW9uYWwgdHJhbnNhY3Rpb24gZGV0YWlscyB0aGF0XG4gICAgICogd2UgcmV0cmlldmVkLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRUcmFuc2FjdGlvbkRldGFpbHM/KHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFByb21pc2U8VHJhbnNhY3Rpb25SZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSBhIHRyYW5zYWN0aW9uIGJ5IHNwZWNpZnlpbmcgdGhlIGFtb3VudCBkaXN0cmlidXRlZCB0byB0aGUgbWVtYmVyXG4gICAgICogZHVyaW5nIGEgY2FzaC1vdXQvcmVpbWJ1cnNlbWVudCwgZ2l2ZW4gaXRzIHRyYW5zYWN0aW9uIElELlxuICAgICAqICh1c2VkIGZvciByZWltYnVyc2VtZW50cy9jYXNoLW91dCBwdXJwb3NlcykuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCB0aGUgaWQgb2YgdGhlIHRyYW5zYWN0aW9uIHRvIGJlIHVwZGF0ZWRcbiAgICAgKiBAcGFyYW0gZGlzdHJpYnV0ZWRUb01lbWJlckFtb3VudCB0aGUgYW1vdW50IGRpc3RyaWJ1dGVkIHRvIHRoZSBtZW1iZXIgZHVyaW5nIHRoZSBjYXNoLW91dC9yZWltYnVyc2VtZW50XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBSZWltYnVyc2VtZW50UHJvY2Vzc2luZ1Jlc3BvbnNlfSByZXByZXNlbnRpbmcgYVxuICAgICAqIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSByZWltYnVyc2VtZW50IHByb2Nlc3MgY2FuIGNvbnRpbnVlIG9yIG5vdC5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdXBkYXRlVHJhbnNhY3Rpb25TdGF0dXM/KHRyYW5zYWN0aW9uSWQ6IHN0cmluZywgZGlzdHJpYnV0ZWRUb01lbWJlckFtb3VudDogbnVtYmVyKTogUHJvbWlzZTxSZWltYnVyc2VtZW50UHJvY2Vzc2luZ1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gcmV0cmlldmUgdGhlIG9mZmVyIGlkLCBvYnRhaW5lZCBmcm9tIGEgdHJhbnNhY3Rpb24gb2JqZWN0LCBnaXZlblxuICAgICAqIGEgdHJhbnNhY3Rpb24gaWRlbnRpZmllciAodXNlZCBmb3IgdHJhbnNhY3Rpb25hbCBwdXJwb3NlcykuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCB0aGUgaWQgb2YgdGhlIHRyYW5zYWN0aW9uLCB1c2VkIHRvIHJldHJpZXZlIHRoZSBvZmZlciBpZFxuICAgICAqIGZyb20uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBPZmZlcklkUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGUgb2ZmZXIgaWRcbiAgICAgKiBhbmQvb3IgdGhlIHJlZGVlbWVkIG9mZmVyIGlkLCBvYnRhaW5lZCBmcm9tIHRoZSB0cmFuc2FjdGlvbiBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRPZmZlcklkPyh0cmFuc2FjdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPE9mZmVySWRSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHJldHJpZXZlIHRoZSB0eXBlIG9mIG9mZmVyIHJlZGVtcHRpb24sIG9idGFpbmVkIGZyb20gdGhlIG9mZmVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvZmZlcklkIHRoZSBpZCBvZiB0aGUgb2ZmZXIsIHVzZWQgdG8gcmV0cmlldmUgdGhlIHR5cGUgb2YgcmVkZW1wdGlvbiBmb3IuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBPZmZlclJlZGVtcHRpb25UeXBlUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGUgcmVkZW1wdGlvblxuICAgICAqIHR5cGUsIG9idGFpbmVkIGZyb20gdGhlIG9mZmVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0T2ZmZXJSZWRlbXB0aW9uVHlwZT8ob2ZmZXJJZDogc3RyaW5nKTogUHJvbWlzZTxPZmZlclJlZGVtcHRpb25UeXBlUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byByZXRyaWV2ZSB0aGUgdHJhbnNhY3Rpb24gZGV0YWlscywgZ2l2ZW4gYSB0cmFuc2FjdGlvbiBJRCAodXNlZCBmb3IgdXBkYXRlZFxuICAgICAqIHRyYW5zYWN0aW9uYWwgZXZlbnRzIHB1cnBvc2VzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cGRhdGVkVHJhbnNhY3Rpb25FdmVudCB0aGUgdXBkYXRlZCB0cmFuc2FjdGlvbiBldmVudCBvYmplY3QsIHBvcHVsYXRlZCBieSB0aGVcbiAgICAgKiBpbml0aWFsIGRldGFpbHMgcGFzc2VkIGJ5IE9saXZlIGluIHRoZSB1cGRhdGVkIHdlYmhvb2sgY2FsbC4gVGhpcyBvYmplY3Qgd2lsbCBiZSB1c2VkXG4gICAgICogdG8gc2V0IGV2ZW4gbW9yZSBpbmZvcm1hdGlvbiBmb3IgaXQsIG9idGFpbmVkIGZyb20gdGhpcyB0cmFuc2FjdGlvbiBkZXRhaWxzIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBVcGRhdGVkVHJhbnNhY3Rpb25FdmVudFJlc3BvbnNlfSByZXByZXNlbnRpbmcgdGhlXG4gICAgICogdXBkYXRlZCB0cmFuc2FjdGlvbiBldmVudCBvYmplY3QsIHBvcHVsYXRlZCB3aXRoIHRoZSBhZGRpdGlvbmFsIHRyYW5zYWN0aW9uIGRldGFpbHNcbiAgICAgKiB0aGF0IHdlIHJldHJpZXZlZFxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRVcGRhdGVkVHJhbnNhY3Rpb25EZXRhaWxzPyh1cGRhdGVkVHJhbnNhY3Rpb25FdmVudDogVXBkYXRlZFRyYW5zYWN0aW9uRXZlbnQpOiBQcm9taXNlPFVwZGF0ZWRUcmFuc2FjdGlvbkV2ZW50UmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byByZXRyaWV2ZSBhIHVzZXIncyBjYXJkIGxpbmtpbmcgSUQsIGdpdmVuIHRoZWlyIE1vb25iZWFtXG4gICAgICogaW50ZXJuYWwgdW5pcXVlIElELlxuICAgICAqXG4gICAgICogQHBhcmFtIGdldFVzZXJDYXJkTGlua2luZ0lkSW5wdXQgdGhlIGlucHV0IG9iamVjdCBjb250YWluaW5nIHRoZSB1bmlxdWUgTW9vbmJlYW1cbiAgICAgKiBpbnRlcm5hbCBJRCwgdG8gYmUgdXNlZCB3aGlsZSByZXRyaWV2aW5nIHRoZSB1c2VyJ3MgY2FyZCBsaW5raW5nIElELlxuICAgICAqXG4gICAgICogQHJldHVybiBhIHtAbGluayBQcm9taXNlfSBvZiB7QGxpbmsgR2V0VXNlckNhcmRMaW5raW5nSWRSZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSByZXNwb25zZVxuICAgICAqIG9iamVjdCwgY29udGFpbmluZyB0aGUgdXNlcidzIGNhcmQgbGlua2luZyBpZC5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0VXNlckNhcmRMaW5raW5nSWQ/KGdldFVzZXJDYXJkTGlua2luZ0lkSW5wdXQ6IEdldFVzZXJDYXJkTGlua2luZ0lkSW5wdXQpOiBQcm9taXNlPEdldFVzZXJDYXJkTGlua2luZ0lkUmVzcG9uc2U+O1xufVxuIl19