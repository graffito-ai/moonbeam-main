"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAPIClient = void 0;
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const Constants_1 = require("../Constants");
const GraphqlExports_1 = require("../GraphqlExports");
/**
 * Class used as the base/generic client for all API clients that
 * we will be connecting to.
 */
class BaseAPIClient {
    // The Secrets Manager client, to be used while retrieving secrets related to clients.
    secretsClient;
    // The AWS region that the API client will be initialized in
    region;
    // The AWS environment that the API client will be initialized in
    environment;
    /**
     * Generic constructor for the API client.
     *
     * @param region the AWS region passed in from the Lambda resolver.
     * @param environment the AWS environment passed in from the Lambda resolver.
     */
    constructor(region, environment) {
        this.region = region;
        this.environment = environment;
        this.secretsClient = new client_secrets_manager_1.SecretsManagerClient({ region: region });
    }
    /**
     * Function used to retrieve various service credentials, used by any API clients, through the
     * Secrets Manager client.
     *
     * @param verificationClientSecretsName the name of the API client's secrets pair
     * @param internalRestBased optional flag indicating whether the key is REST or GraphQL/AppSync based
     *                          in case of internal-used based keys
     * @param notificationType  optional type indicating the type of notification, for which we are retrieving
     *                          specific secret configuration for
     * @param includeLoyaltyPrograms optional type indicating whether to include the loyalty program secret keys,
     *                               used for Olive calls
     * @param cognitoClientAccess optional type indicating whether to include the cognito access credentials/keys,
     *                            used for internal-based calls
     * @param channelType optional type indicating the type of channel, for which we are retrieving specific secret
     *                    configuration for
     *
     * @return a {@link Promise} of a {@link string} pair, containing various secrets to be used
     */
    async retrieveServiceCredentials(verificationClientSecretsName, internalRestBased, notificationType, includeLoyaltyPrograms, cognitoClientAccess, channelType) {
        try {
            // retrieve the secrets pair for the API client, depending on the current environment and region
            const verificationClientAPIPair = await this.secretsClient
                .send(new client_secrets_manager_1.GetSecretValueCommand(({ SecretId: `${verificationClientSecretsName}-${this.environment}-${this.region}` })));
            // check if the secrets for the API Client exist
            if (verificationClientAPIPair.SecretString) {
                // convert the retrieved secrets pair value, as a JSON object
                const clientPairAsJson = JSON.parse(verificationClientAPIPair.SecretString);
                // filter out and set the necessary API Client API credentials, depending on the client secret name passed in
                switch (verificationClientSecretsName) {
                    case Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_SECRET_NAME:
                        if (cognitoClientAccess !== undefined && cognitoClientAccess) {
                            return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.CONGITO_CLI_ACCESS_KEY_ID], clientPairAsJson[Constants_1.Constants.AWSPairConstants.COGNITO_CLI_SECRET_ACCESS_KEY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.COGNITO_USER_POOL_ID]];
                        }
                        else {
                            return internalRestBased !== undefined && internalRestBased
                                ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_REST_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_REST_API_KEY]]
                                : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.MOONBEAM_INTERNAL_API_KEY]];
                        }
                    case Constants_1.Constants.AWSPairConstants.COURIER_INTERNAL_SECRET_NAME:
                        // return the appropriate secrets, depending on the type of notification passed in
                        if (!notificationType) {
                            console.log(`Invalid notification type to retrieve secrets in ${verificationClientSecretsName}`);
                            return [null, null];
                        }
                        else {
                            switch (notificationType) {
                                case GraphqlExports_1.NotificationType.NewUserSignup:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.NEW_USER_SIGNUP_NOTIFICATION_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.NEW_USER_SIGNUP_NOTIFICATION_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.NewQualifyingOfferAvailable:
                                    return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.NEW_QUALIFYING_OFFER_NOTIFICATION_AUTH_TOKEN],
                                        clientPairAsJson[Constants_1.Constants.AWSPairConstants.NEW_QUALIFYING_OFFER_NOTIFICATION_TEMPLATE_ID]];
                                case GraphqlExports_1.NotificationType.MilitaryStatusChangedPendingToRejected:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_REJECTED_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_REJECTED_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_STATUS_CHANGED_PENDING_TO_REJECTED_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_STATUS_CHANGED_PENDING_TO_REJECTED_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_REJECTED_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_REJECTED_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.MilitaryStatusChangedPendingToVerified:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_VERIFIED_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_VERIFIED_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_STATUS_CHANGED_PENDING_TO_VERIFIED_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_STATUS_CHANGED_PENDING_TO_VERIFIED_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_VERIFIED_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_STATUS_CHANGED_PENDING_TO_VERIFIED_TEMPLATE_ID]];
                                    }
                                case GraphqlExports_1.NotificationType.CardLinkingReminder:
                                    if (channelType !== undefined) {
                                        return channelType === GraphqlExports_1.NotificationChannelType.Email
                                            ? [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_CARD_LINKING_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_CARD_LINKING_REMINDER_TEMPLATE_ID]]
                                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_CARD_LINKING_REMINDER_AUTH_TOKEN],
                                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.PUSH_CARD_LINKING_REMINDER_TEMPLATE_ID]];
                                    }
                                    else {
                                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.COURIER_BASE_URL],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_CARD_LINKING_REMINDER_AUTH_TOKEN],
                                            clientPairAsJson[Constants_1.Constants.AWSPairConstants.EMAIL_CARD_LINKING_REMINDER_TEMPLATE_ID]];
                                    }
                                default:
                                    console.log(`Unknown notifications type to retrieve secrets in ${verificationClientSecretsName}`);
                                    return [null, null];
                            }
                        }
                    case Constants_1.Constants.AWSPairConstants.QUANDIS_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.QUANDIS_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.QUANDIS_API_KEY]];
                    case Constants_1.Constants.AWSPairConstants.LIGHTHOUSE_SECRET_NAME:
                        return [clientPairAsJson[Constants_1.Constants.AWSPairConstants.LIGHTHOUSE_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.LIGHTHOUSE_API_KEY]];
                    case Constants_1.Constants.AWSPairConstants.OLIVE_SECRET_NAME:
                        return includeLoyaltyPrograms !== undefined
                            ? [
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_BASE_URL],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_PUBLIC_KEY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_PRIVATE_KEY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_DEFAULT_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_FIDELIS_DEFAULT_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_ONLINE_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_PREMIER_ONLINE_LOYALTY],
                                clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_MOONBEAM_PREMIER_NEARBY_LOYALTY],
                            ]
                            : [clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_BASE_URL], clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_PUBLIC_KEY], clientPairAsJson[Constants_1.Constants.AWSPairConstants.OLIVE_PRIVATE_KEY]];
                    default:
                        console.log(`Unknown API client secrets name passed in ${verificationClientSecretsName}`);
                        return [null, null];
                }
            }
            else {
                console.log(`API client secrets pair not available for ${verificationClientSecretsName}, ${verificationClientAPIPair}`);
                return [null, null];
            }
        }
        catch (err) {
            const errorMessage = `Unexpected error while retrieving an API Key ${err}`;
            console.log(errorMessage);
            throw new Error(errorMessage);
        }
    }
}
exports.BaseAPIClient = BaseAPIClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUFQSUNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vY2xpZW50cy9CYXNlQVBJQ2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDRFQUE0RjtBQUU1Riw0Q0FBdUM7QUFDdkMsc0RBa0MyQjtBQUUzQjs7O0dBR0c7QUFDSCxNQUFzQixhQUFhO0lBQy9CLHNGQUFzRjtJQUNuRSxhQUFhLENBQXVCO0lBRXZELDREQUE0RDtJQUN6QyxNQUFNLENBQVM7SUFFbEMsaUVBQWlFO0lBQzlDLFdBQVcsQ0FBUztJQUV2Qzs7Ozs7T0FLRztJQUNILFlBQXNCLE1BQWMsRUFBRSxXQUFtQjtRQUNyRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUUvQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksNkNBQW9CLENBQUMsRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O09BaUJHO0lBQ08sS0FBSyxDQUFDLDBCQUEwQixDQUFDLDZCQUFxQyxFQUFFLGlCQUEyQixFQUNsRSxnQkFBbUMsRUFBRSxzQkFBZ0MsRUFDckUsbUJBQTZCLEVBQUUsV0FBcUM7UUFFM0csSUFBSTtZQUNBLGdHQUFnRztZQUNoRyxNQUFNLHlCQUF5QixHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWE7aUJBQ3JELElBQUksQ0FBQyxJQUFJLDhDQUFxQixDQUFDLENBQUMsRUFBQyxRQUFRLEVBQUUsR0FBRyw2QkFBNkIsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTFILGdEQUFnRDtZQUNoRCxJQUFJLHlCQUF5QixDQUFDLFlBQVksRUFBRTtnQkFDeEMsNkRBQTZEO2dCQUM3RCxNQUFNLGdCQUFn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QUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2Qyw2QkFBNkIsRUFBRSxDQUFDLENBQUM7d0JBQzFGLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBQzNCO2FBQ0o7aUJBQU07Z0JBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsNkJBQTZCLEtBQUsseUJBQXlCLEVBQUUsQ0FBQyxDQUFDO2dCQUV4SCxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ3ZCO1NBQ0o7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNWLE1BQU0sWUFBWSxHQUFHLGdEQUFnRCxHQUFHLEVBQUUsQ0FBQztZQUMzRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRTFCLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakM7SUFDTCxDQUFDO0NBOFZKO0FBOWZELHNDQThmQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7R2V0U2VjcmV0VmFsdWVDb21tYW5kLCBTZWNyZXRzTWFuYWdlckNsaWVudH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zZWNyZXRzLW1hbmFnZXJcIjtcbmltcG9ydCB7QVBJR2F0ZXdheVByb3h5UmVzdWx0fSBmcm9tIFwiYXdzLWxhbWJkYS90cmlnZ2VyL2FwaS1nYXRld2F5LXByb3h5XCI7XG5pbXBvcnQge0NvbnN0YW50c30gZnJvbSBcIi4uL0NvbnN0YW50c1wiO1xuaW1wb3J0IHtcbiAgICBDYXJkLFxuICAgIENhcmRMaW5rUmVzcG9uc2UsXG4gICAgQ3JlYXRlTm90aWZpY2F0aW9uSW5wdXQsXG4gICAgQ3JlYXRlTm90aWZpY2F0aW9uUmVzcG9uc2UsXG4gICAgRWxpZ2libGVMaW5rZWRVc2Vyc1Jlc3BvbnNlLFxuICAgIEVtYWlsRnJvbUNvZ25pdG9SZXNwb25zZSxcbiAgICBHZXREZXZpY2VzRm9yVXNlcklucHV0LFxuICAgIEdldE9mZmVyc0lucHV0LFxuICAgIEdldFRyYW5zYWN0aW9uQnlTdGF0dXNJbnB1dCxcbiAgICBHZXRUcmFuc2FjdGlvbklucHV0LFxuICAgIEluZWxpZ2libGVMaW5rZWRVc2Vyc1Jlc3BvbnNlLFxuICAgIE1lbWJlckRldGFpbHNSZXNwb25zZSxcbiAgICBNZW1iZXJSZXNwb25zZSxcbiAgICBNaWxpdGFyeVZlcmlmaWNhdGlvbk5vdGlmaWNhdGlvblVwZGF0ZSxcbiAgICBNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1c1R5cGUsXG4gICAgTW9vbmJlYW1UcmFuc2FjdGlvbixcbiAgICBNb29uYmVhbVRyYW5zYWN0aW9uUmVzcG9uc2UsXG4gICAgTW9vbmJlYW1UcmFuc2FjdGlvbnNCeVN0YXR1c1Jlc3BvbnNlLFxuICAgIE1vb25iZWFtVHJhbnNhY3Rpb25zUmVzcG9uc2UsXG4gICAgTW9vbmJlYW1VcGRhdGVkVHJhbnNhY3Rpb25SZXNwb25zZSxcbiAgICBOb3RpZmljYXRpb25DaGFubmVsVHlwZSwgTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZSxcbiAgICBOb3RpZmljYXRpb25SZXNwb25zZSxcbiAgICBOb3RpZmljYXRpb25UeXBlLFxuICAgIE9mZmVyc1Jlc3BvbnNlLFxuICAgIFJlbW92ZUNhcmRSZXNwb25zZSxcbiAgICBTZW5kRW1haWxOb3RpZmljYXRpb25JbnB1dCxcbiAgICBTZW5kTW9iaWxlUHVzaE5vdGlmaWNhdGlvbklucHV0LFxuICAgIFRyYW5zYWN0aW9uLFxuICAgIFRyYW5zYWN0aW9uUmVzcG9uc2UsXG4gICAgVXBkYXRlZFRyYW5zYWN0aW9uRXZlbnQsXG4gICAgVXBkYXRlZFRyYW5zYWN0aW9uRXZlbnRSZXNwb25zZSwgVXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJJbnB1dCxcbiAgICBVcGRhdGVUcmFuc2FjdGlvbklucHV0LFxuICAgIFVzZXJEZXZpY2VzUmVzcG9uc2UsIFVzZXJGb3JOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlXG59IGZyb20gXCIuLi9HcmFwaHFsRXhwb3J0c1wiO1xuXG4vKipcbiAqIENsYXNzIHVzZWQgYXMgdGhlIGJhc2UvZ2VuZXJpYyBjbGllbnQgZm9yIGFsbCBBUEkgY2xpZW50cyB0aGF0XG4gKiB3ZSB3aWxsIGJlIGNvbm5lY3RpbmcgdG8uXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlQVBJQ2xpZW50IHtcbiAgICAvLyBUaGUgU2VjcmV0cyBNYW5hZ2VyIGNsaWVudCwgdG8gYmUgdXNlZCB3aGlsZSByZXRyaWV2aW5nIHNlY3JldHMgcmVsYXRlZCB0byBjbGllbnRzLlxuICAgIHByb3RlY3RlZCByZWFkb25seSBzZWNyZXRzQ2xpZW50OiBTZWNyZXRzTWFuYWdlckNsaWVudDtcblxuICAgIC8vIFRoZSBBV1MgcmVnaW9uIHRoYXQgdGhlIEFQSSBjbGllbnQgd2lsbCBiZSBpbml0aWFsaXplZCBpblxuICAgIHByb3RlY3RlZCByZWFkb25seSByZWdpb246IHN0cmluZztcblxuICAgIC8vIFRoZSBBV1MgZW52aXJvbm1lbnQgdGhhdCB0aGUgQVBJIGNsaWVudCB3aWxsIGJlIGluaXRpYWxpemVkIGluXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGVudmlyb25tZW50OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmljIGNvbnN0cnVjdG9yIGZvciB0aGUgQVBJIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWdpb24gdGhlIEFXUyByZWdpb24gcGFzc2VkIGluIGZyb20gdGhlIExhbWJkYSByZXNvbHZlci5cbiAgICAgKiBAcGFyYW0gZW52aXJvbm1lbnQgdGhlIEFXUyBlbnZpcm9ubWVudCBwYXNzZWQgaW4gZnJvbSB0aGUgTGFtYmRhIHJlc29sdmVyLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihyZWdpb246IHN0cmluZywgZW52aXJvbm1lbnQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLnJlZ2lvbiA9IHJlZ2lvbjtcbiAgICAgICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuXG4gICAgICAgIHRoaXMuc2VjcmV0c0NsaWVudCA9IG5ldyBTZWNyZXRzTWFuYWdlckNsaWVudCh7cmVnaW9uOiByZWdpb259KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHJldHJpZXZlIHZhcmlvdXMgc2VydmljZSBjcmVkZW50aWFscywgdXNlZCBieSBhbnkgQVBJIGNsaWVudHMsIHRocm91Z2ggdGhlXG4gICAgICogU2VjcmV0cyBNYW5hZ2VyIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2ZXJpZmljYXRpb25DbGllbnRTZWNyZXRzTmFtZSB0aGUgbmFtZSBvZiB0aGUgQVBJIGNsaWVudCdzIHNlY3JldHMgcGFpclxuICAgICAqIEBwYXJhbSBpbnRlcm5hbFJlc3RCYXNlZCBvcHRpb25hbCBmbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUga2V5IGlzIFJFU1Qgb3IgR3JhcGhRTC9BcHBTeW5jIGJhc2VkXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGluIGNhc2Ugb2YgaW50ZXJuYWwtdXNlZCBiYXNlZCBrZXlzXG4gICAgICogQHBhcmFtIG5vdGlmaWNhdGlvblR5cGUgIG9wdGlvbmFsIHR5cGUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBub3RpZmljYXRpb24sIGZvciB3aGljaCB3ZSBhcmUgcmV0cmlldmluZ1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWZpYyBzZWNyZXQgY29uZmlndXJhdGlvbiBmb3JcbiAgICAgKiBAcGFyYW0gaW5jbHVkZUxveWFsdHlQcm9ncmFtcyBvcHRpb25hbCB0eXBlIGluZGljYXRpbmcgd2hldGhlciB0byBpbmNsdWRlIHRoZSBsb3lhbHR5IHByb2dyYW0gc2VjcmV0IGtleXMsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCBmb3IgT2xpdmUgY2FsbHNcbiAgICAgKiBAcGFyYW0gY29nbml0b0NsaWVudEFjY2VzcyBvcHRpb25hbCB0eXBlIGluZGljYXRpbmcgd2hldGhlciB0byBpbmNsdWRlIHRoZSBjb2duaXRvIGFjY2VzcyBjcmVkZW50aWFscy9rZXlzLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgZm9yIGludGVybmFsLWJhc2VkIGNhbGxzXG4gICAgICogQHBhcmFtIGNoYW5uZWxUeXBlIG9wdGlvbmFsIHR5cGUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBjaGFubmVsLCBmb3Igd2hpY2ggd2UgYXJlIHJldHJpZXZpbmcgc3BlY2lmaWMgc2VjcmV0XG4gICAgICogICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gZm9yXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIGEge0BsaW5rIHN0cmluZ30gcGFpciwgY29udGFpbmluZyB2YXJpb3VzIHNlY3JldHMgdG8gYmUgdXNlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBhc3luYyByZXRyaWV2ZVNlcnZpY2VDcmVkZW50aWFscyh2ZXJpZmljYXRpb25DbGllbnRTZWNyZXRzTmFtZTogc3RyaW5nLCBpbnRlcm5hbFJlc3RCYXNlZD86IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblR5cGU/OiBOb3RpZmljYXRpb25UeXBlLCBpbmNsdWRlTG95YWx0eVByb2dyYW1zPzogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29nbml0b0NsaWVudEFjY2Vzcz86IGJvb2xlYW4sIGNoYW5uZWxUeXBlPzogTm90aWZpY2F0aW9uQ2hhbm5lbFR5cGUpXG4gICAgICAgIDogUHJvbWlzZTxbc3RyaW5nIHwgbnVsbCwgc3RyaW5nIHwgbnVsbCwgKHN0cmluZyB8IG51bGwpPywgKHN0cmluZyB8IG51bGwpPywgKHN0cmluZyB8IG51bGwpPywgKHN0cmluZyB8IG51bGwpPywgKHN0cmluZyB8IG51bGwpPywgKHN0cmluZyB8IG51bGwpP10+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIHJldHJpZXZlIHRoZSBzZWNyZXRzIHBhaXIgZm9yIHRoZSBBUEkgY2xpZW50LCBkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgYW5kIHJlZ2lvblxuICAgICAgICAgICAgY29uc3QgdmVyaWZpY2F0aW9uQ2xpZW50QVBJUGFpciA9IGF3YWl0IHRoaXMuc2VjcmV0c0NsaWVudFxuICAgICAgICAgICAgICAgIC5zZW5kKG5ldyBHZXRTZWNyZXRWYWx1ZUNvbW1hbmQoKHtTZWNyZXRJZDogYCR7dmVyaWZpY2F0aW9uQ2xpZW50U2VjcmV0c05hbWV9LSR7dGhpcy5lbnZpcm9ubWVudH0tJHt0aGlzLnJlZ2lvbn1gfSkpKTtcblxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHNlY3JldHMgZm9yIHRoZSBBUEkgQ2xpZW50IGV4aXN0XG4gICAgICAgICAgICBpZiAodmVyaWZpY2F0aW9uQ2xpZW50QVBJUGFpci5TZWNyZXRTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHRoZSByZXRyaWV2ZWQgc2VjcmV0cyBwYWlyIHZhbHVlLCBhcyBhIEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgICAgY29uc3QgY2xpZW50UGFpckFzSnNvbiA9IEpTT04ucGFyc2UodmVyaWZpY2F0aW9uQ2xpZW50QVBJUGFpci5TZWNyZXRTdHJpbmchKTtcblxuICAgICAgICAgICAgICAgIC8vIGZpbHRlciBvdXQgYW5kIHNldCB0aGUgbmVjZXNzYXJ5IEFQSSBDbGllbnQgQVBJIGNyZWRlbnRpYWxzLCBkZXBlbmRpbmcgb24gdGhlIGNsaWVudCBzZWNyZXQgbmFtZSBwYXNzZWQgaW5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHZlcmlmaWNhdGlvbkNsaWVudFNlY3JldHNOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuTU9PTkJFQU1fSU5URVJOQUxfU0VDUkVUX05BTUU6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29nbml0b0NsaWVudEFjY2VzcyAhPT0gdW5kZWZpbmVkICYmIGNvZ25pdG9DbGllbnRBY2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09OR0lUT19DTElfQUNDRVNTX0tFWV9JRF0sIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09HTklUT19DTElfU0VDUkVUX0FDQ0VTU19LRVldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPR05JVE9fVVNFUl9QT09MX0lEXV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludGVybmFsUmVzdEJhc2VkICE9PSB1bmRlZmluZWQgJiYgaW50ZXJuYWxSZXN0QmFzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5NT09OQkVBTV9JTlRFUk5BTF9SRVNUX0JBU0VfVVJMXSwgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5NT09OQkVBTV9JTlRFUk5BTF9SRVNUX0FQSV9LRVldXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk1PT05CRUFNX0lOVEVSTkFMX0JBU0VfVVJMXSwgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5NT09OQkVBTV9JTlRFUk5BTF9BUElfS0VZXV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9JTlRFUk5BTF9TRUNSRVRfTkFNRTpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgc2VjcmV0cywgZGVwZW5kaW5nIG9uIHRoZSB0eXBlIG9mIG5vdGlmaWNhdGlvbiBwYXNzZWQgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbm90aWZpY2F0aW9uVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBJbnZhbGlkIG5vdGlmaWNhdGlvbiB0eXBlIHRvIHJldHJpZXZlIHNlY3JldHMgaW4gJHt2ZXJpZmljYXRpb25DbGllbnRTZWNyZXRzTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW251bGwsIG51bGxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vdGlmaWNhdGlvblR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLk5ld1VzZXJTaWdudXA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5ORVdfVVNFUl9TSUdOVVBfTk9USUZJQ0FUSU9OX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuTkVXX1VTRVJfU0lHTlVQX05PVElGSUNBVElPTl9URU1QTEFURV9JRF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuTmV3UXVhbGlmeWluZ09mZmVyQXZhaWxhYmxlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuTkVXX1FVQUxJRllJTkdfT0ZGRVJfTk9USUZJQ0FUSU9OX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuTkVXX1FVQUxJRllJTkdfT0ZGRVJfTk9USUZJQ0FUSU9OX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5NaWxpdGFyeVN0YXR1c0NoYW5nZWRQZW5kaW5nVG9SZWplY3RlZDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFubmVsVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5uZWxUeXBlID09PSBOb3RpZmljYXRpb25DaGFubmVsVHlwZS5FbWFpbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9TVEFUVVNfQ0hBTkdFRF9QRU5ESU5HX1RPX1JFSkVDVEVEX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9TVEFUVVNfQ0hBTkdFRF9QRU5ESU5HX1RPX1JFSkVDVEVEX1RFTVBMQVRFX0lEXV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9TVEFUVVNfQ0hBTkdFRF9QRU5ESU5HX1RPX1JFSkVDVEVEX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5QVVNIX1NUQVRVU19DSEFOR0VEX1BFTkRJTkdfVE9fUkVKRUNURURfVEVNUExBVEVfSURdXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfU1RBVFVTX0NIQU5HRURfUEVORElOR19UT19SRUpFQ1RFRF9BVVRIX1RPS0VOXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9TVEFUVVNfQ0hBTkdFRF9QRU5ESU5HX1RPX1JFSkVDVEVEX1RFTVBMQVRFX0lEXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5NaWxpdGFyeVN0YXR1c0NoYW5nZWRQZW5kaW5nVG9WZXJpZmllZDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFubmVsVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5uZWxUeXBlID09PSBOb3RpZmljYXRpb25DaGFubmVsVHlwZS5FbWFpbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9TVEFUVVNfQ0hBTkdFRF9QRU5ESU5HX1RPX1ZFUklGSUVEX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9TVEFUVVNfQ0hBTkdFRF9QRU5ESU5HX1RPX1ZFUklGSUVEX1RFTVBMQVRFX0lEXV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5DT1VSSUVSX0JBU0VfVVJMXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUFVTSF9TVEFUVVNfQ0hBTkdFRF9QRU5ESU5HX1RPX1ZFUklGSUVEX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5QVVNIX1NUQVRVU19DSEFOR0VEX1BFTkRJTkdfVE9fVkVSSUZJRURfVEVNUExBVEVfSURdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX1NUQVRVU19DSEFOR0VEX1BFTkRJTkdfVE9fVkVSSUZJRURfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfU1RBVFVTX0NIQU5HRURfUEVORElOR19UT19WRVJJRklFRF9URU1QTEFURV9JRF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuQ2FyZExpbmtpbmdSZW1pbmRlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFubmVsVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5uZWxUeXBlID09PSBOb3RpZmljYXRpb25DaGFubmVsVHlwZS5FbWFpbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFtjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkNPVVJJRVJfQkFTRV9VUkxdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5FTUFJTF9DQVJEX0xJTktJTkdfUkVNSU5ERVJfQVVUSF9UT0tFTl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX0NBUkRfTElOS0lOR19SRU1JTkRFUl9URU1QTEFURV9JRF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlBVU0hfQ0FSRF9MSU5LSU5HX1JFTUlOREVSX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5QVVNIX0NBUkRfTElOS0lOR19SRU1JTkRFUl9URU1QTEFURV9JRF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuQ09VUklFUl9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuRU1BSUxfQ0FSRF9MSU5LSU5HX1JFTUlOREVSX0FVVEhfVE9LRU5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLkVNQUlMX0NBUkRfTElOS0lOR19SRU1JTkRFUl9URU1QTEFURV9JRF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFVua25vd24gbm90aWZpY2F0aW9ucyB0eXBlIHRvIHJldHJpZXZlIHNlY3JldHMgaW4gJHt2ZXJpZmljYXRpb25DbGllbnRTZWNyZXRzTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbbnVsbCwgbnVsbF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIENvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLlFVQU5ESVNfU0VDUkVUX05BTUU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUVVBTkRJU19CQVNFX1VSTF0sIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuUVVBTkRJU19BUElfS0VZXV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuTElHSFRIT1VTRV9TRUNSRVRfTkFNRTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5MSUdIVEhPVVNFX0JBU0VfVVJMXSwgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5MSUdIVEhPVVNFX0FQSV9LRVldXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5PTElWRV9TRUNSRVRfTkFNRTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmNsdWRlTG95YWx0eVByb2dyYW1zICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5PTElWRV9CQVNFX1VSTF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuT0xJVkVfUFVCTElDX0tFWV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuT0xJVkVfUFJJVkFURV9LRVldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk9MSVZFX01PT05CRUFNX0RFRkFVTFRfTE9ZQUxUWV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuT0xJVkVfTU9PTkJFQU1fRklERUxJU19ERUZBVUxUX0xPWUFMVFldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRQYWlyQXNKc29uW0NvbnN0YW50cy5BV1NQYWlyQ29uc3RhbnRzLk9MSVZFX01PT05CRUFNX09OTElORV9MT1lBTFRZXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5PTElWRV9NT09OQkVBTV9QUkVNSUVSX09OTElORV9MT1lBTFRZXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5PTElWRV9NT09OQkVBTV9QUkVNSUVSX05FQVJCWV9MT1lBTFRZXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbY2xpZW50UGFpckFzSnNvbltDb25zdGFudHMuQVdTUGFpckNvbnN0YW50cy5PTElWRV9CQVNFX1VSTF0sIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuT0xJVkVfUFVCTElDX0tFWV0sIGNsaWVudFBhaXJBc0pzb25bQ29uc3RhbnRzLkFXU1BhaXJDb25zdGFudHMuT0xJVkVfUFJJVkFURV9LRVldXTtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVbmtub3duIEFQSSBjbGllbnQgc2VjcmV0cyBuYW1lIHBhc3NlZCBpbiAke3ZlcmlmaWNhdGlvbkNsaWVudFNlY3JldHNOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBBUEkgY2xpZW50IHNlY3JldHMgcGFpciBub3QgYXZhaWxhYmxlIGZvciAke3ZlcmlmaWNhdGlvbkNsaWVudFNlY3JldHNOYW1lfSwgJHt2ZXJpZmljYXRpb25DbGllbnRBUElQYWlyfWApO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgVW5leHBlY3RlZCBlcnJvciB3aGlsZSByZXRyaWV2aW5nIGFuIEFQSSBLZXkgJHtlcnJ9YDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSk7XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBnZXQgdGhlIHVzZXJzIHdpdGggbm8gbGlua2VkIGNhcmRzLlxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgSW5lbGlnaWJsZUxpbmtlZFVzZXJzUmVzcG9uc2V9LCByZXByZXNlbnRpbmcgdGhlIHVzZXJzXG4gICAgICogd2hpY2ggYXJlIG5vdCBlbGlnaWJsZSBmb3IgYSByZWltYnVyc2VtZW50LCBzaW5jZSB0aGV5IGhhdmUgbm8gbGlua2VkIGNhcmRzLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRVc2Vyc1dpdGhOb0NhcmRzPygpOiBQcm9taXNlPEluZWxpZ2libGVMaW5rZWRVc2Vyc1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2V0IGFsbCBBQ1RJVkUgbm90aWZpY2F0aW9uIHJlbWluZGVycy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIE5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2V9LCByZXByZXNlbnRpbmcgdGhlIEFDVElWRSBub3RpZmljYXRpb25cbiAgICAgKiByZW1pbmRlcnMuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldE5vdGlmaWNhdGlvblJlbWluZGVycz8oKTogUHJvbWlzZTxOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gdXBkYXRlIGEgc3BlY2lmaWMgbm90aWZpY2F0aW9uIHJlbWluZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVySW5wdXQgdGhlIG5vdGlmaWNhdGlvbiByZW1pbmRlciBpbnB1dCwgY29udGFpbmluZyBhbnkgaW5mb3JtYXRpb24gdXNlZCB0b1xuICAgICAqIHVwZGF0ZSBhbiBhcHBsaWNhYmxlIG5vdGlmaWNhdGlvbiByZW1pbmRlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIE5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2V9LCByZXByZXNlbnRpbmcgdGhlIHVwZGF0ZSBub3RpZmljYXRpb24gcmVtaW5kZXIuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyPyh1cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlcklucHV0OiBVcGRhdGVOb3RpZmljYXRpb25SZW1pbmRlcklucHV0KTogUHJvbWlzZTxOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2V0IGFsbCB1c2VycycgZW1haWxzIGFuZCBjdXN0b20gdXNlciBJRHMgZnJvbSBDb2duaXRvLlxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgVXNlckZvck5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2V9LCByZXByZXNlbnRpbmcgZWFjaCBpbmRpdmlkdWFsIHVzZXJzJ1xuICAgICAqIHVzZXIgSUQgYW5kIGVtYWlsIGF0dHJpYnV0ZXMuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldEFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJzPygpOiBQcm9taXNlPFVzZXJGb3JOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2V0IGEgdXNlcidzIGVtYWlsLCBnaXZlbiBjZXJ0YWluIGZpbHRlcnMgdG8gYmUgcGFzc2VkIGluLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1pbGl0YXJ5VmVyaWZpY2F0aW9uTm90aWZpY2F0aW9uVXBkYXRlIHRoZSBtaWxpdGFyeSB2ZXJpZmljYXRpb24gbm90aWZpY2F0aW9uIHVwZGF0ZVxuICAgICAqIG9iamVjdHMsIHVzZWQgdG8gZmlsdGVyIHRocm91Z2ggdGhlIENvZ25pdG8gdXNlciBwb29sLCBpbiBvcmRlciB0byBvYnRhaW4gYSB1c2VyJ3MgZW1haWwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBFbWFpbEZyb21Db2duaXRvUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGUgdXNlcidzIGVtYWlsIG9idGFpbmVkXG4gICAgICogZnJvbSBDb2duaXRvLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRFbWFpbEZvclVzZXI/KG1pbGl0YXJ5VmVyaWZpY2F0aW9uTm90aWZpY2F0aW9uVXBkYXRlOiBNaWxpdGFyeVZlcmlmaWNhdGlvbk5vdGlmaWNhdGlvblVwZGF0ZSk6IFByb21pc2U8RW1haWxGcm9tQ29nbml0b1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2V0IGFsbCB0aGUgb2ZmZXJzLCBnaXZlbiBjZXJ0YWluIGZpbHRlcnMgdG8gYmUgcGFzc2VkIGluLlxuICAgICAqXG4gICAgICogQHBhcmFtIGdldE9mZmVyc0lucHV0IHRoZSBvZmZlcnMgaW5wdXQsIGNvbnRhaW5pbmcgdGhlIGZpbHRlcmluZyBpbmZvcm1hdGlvblxuICAgICAqIHVzZWQgdG8gcmV0cmlldmUgYWxsIHRoZSBhcHBsaWNhYmxlL21hdGNoaW5nIG9mZmVycy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIE9mZmVyc1Jlc3BvbnNlfSByZXByZXNlbnRpbmcgdGhlIG1hdGNoZWQgb2ZmZXJzJyBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0T2ZmZXJzPyhnZXRPZmZlcnNJbnB1dDogR2V0T2ZmZXJzSW5wdXQpOiBQcm9taXNlPE9mZmVyc1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gZ2V0IGFsbCB0aGUgcGh5c2ljYWwgZGV2aWNlcyBhc3NvY2lhdGVkIHdpdGggYSBwYXJ0aWN1bGFyIHVzZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZ2V0RGV2aWNlc0ZvclVzZXJJbnB1dCB0aGUgZGV2aWNlcyBmb3IgdXNlciBpbnB1dCwgY29udGFpbmluZyB0aGUgZmlsdGVyaW5nIGluZm9ybWF0aW9uXG4gICAgICogdXNlZCB0byByZXRyaWV2ZSBhbGwgdGhlIHBoeXNpY2FsIGRldmljZXMgZm9yIGEgcGFydGljdWxhciB1c2VyLlxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgVXNlckRldmljZXNSZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSBtYXRjaGVkIHBoeXNpY2FsIGRldmljZXMnIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXREZXZpY2VzRm9yVXNlcj8oZ2V0RGV2aWNlc0ZvclVzZXJJbnB1dDogR2V0RGV2aWNlc0ZvclVzZXJJbnB1dCk6IFByb21pc2U8VXNlckRldmljZXNSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHNlbmQgYSBtb2JpbGUgcHVzaCBub3RpZmljYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VuZE1vYmlsZVB1c2hOb3RpZmljYXRpb25JbnB1dCB0aGUgbm90aWZpY2F0aW9uIGlucHV0IGRldGFpbHMgdG8gYmUgcGFzc2VkIGluLCBpbiBvcmRlciB0byBzZW5kXG4gICAgICogYSBtb2JpbGUgcHVzaCBub3RpZmljYXRpb25cbiAgICAgKiBAcGFyYW0gbm90aWZpY2F0aW9uVHlwZSB0aGUgdHlwZSBvZiBub3RpZmljYXRpb24gdG8gc2VuZCBtb2JpbGUgcHVzaCBub3RpZmljYXRpb25zIGZvclxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgTm90aWZpY2F0aW9uUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGUgQ291cmllciBub3RpZmljYXRpb24gcmVzcG9uc2VcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgc2VuZE1vYmlsZVB1c2hOb3RpZmljYXRpb24/KHNlbmRNb2JpbGVQdXNoTm90aWZpY2F0aW9uSW5wdXQ6IFNlbmRNb2JpbGVQdXNoTm90aWZpY2F0aW9uSW5wdXQsIG5vdGlmaWNhdGlvblR5cGU6IE5vdGlmaWNhdGlvblR5cGUpOiBQcm9taXNlPE5vdGlmaWNhdGlvblJlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gc2VuZCBhbiBlbWFpbCBub3RpZmljYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VuZEVtYWlsTm90aWZpY2F0aW9uSW5wdXQgdGhlIG5vdGlmaWNhdGlvbiBpbnB1dCBkZXRhaWxzIHRvIGJlIHBhc3NlZCBpbiwgaW4gb3JkZXIgdG8gc2VuZFxuICAgICAqIGFuIGVtYWlsIG5vdGlmaWNhdGlvblxuICAgICAqIEBwYXJhbSBub3RpZmljYXRpb25UeXBlIHRoZSB0eXBlIG9mIG5vdGlmaWNhdGlvbiB0byBzZW5kIGVtYWlsIG5vdGlmaWNhdGlvbnMgZm9yXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBOb3RpZmljYXRpb25SZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSBDb3VyaWVyIG5vdGlmaWNhdGlvbiByZXNwb25zZVxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBzZW5kRW1haWxOb3RpZmljYXRpb24/KHNlbmRFbWFpbE5vdGlmaWNhdGlvbklucHV0OiBTZW5kRW1haWxOb3RpZmljYXRpb25JbnB1dCwgbm90aWZpY2F0aW9uVHlwZTogTm90aWZpY2F0aW9uVHlwZSk6IFByb21pc2U8Tm90aWZpY2F0aW9uUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBjcmVhdGUgYSBub3RpZmljYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY3JlYXRlTm90aWZpY2F0aW9uSW5wdXQgdGhlIG5vdGlmaWNhdGlvbiBkZXRhaWxzIHRvIGJlIHBhc3NlZCBpbiwgaW4gb3JkZXIgdG8gY3JlYXRlIGEgbmV3XG4gICAgICogbm90aWZpY2F0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhIHtAbGluayBDcmVhdGVOb3RpZmljYXRpb25SZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSBuZXdseSBjcmVhdGVkIG5vdGlmaWNhdGlvbiBkYXRhXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNyZWF0ZU5vdGlmaWNhdGlvbj8oY3JlYXRlTm90aWZpY2F0aW9uSW5wdXQ6IENyZWF0ZU5vdGlmaWNhdGlvbklucHV0KTogUHJvbWlzZTxDcmVhdGVOb3RpZmljYXRpb25SZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIGdldCBhbGwgdHJhbnNhY3Rpb25zLCBmb3IgYSBwYXJ0aWN1bGFyIHVzZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZ2V0VHJhbnNhY3Rpb25JbnB1dCB0aGUgdHJhbnNhY3Rpb24gaW5wdXQgb2JqZWN0IHRvIGJlIHBhc3NlZCBpbixcbiAgICAgKiBjb250YWluaW5nIGFsbCB0aGUgbmVjZXNzYXJ5IGZpbHRlcmluZyBmb3IgcmV0cmlldmluZyB0aGUgdHJhbnNhY3Rpb25zIGZvciBhIHBhcnRpY3VsYXIgdXNlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIE1vb25iZWFtVHJhbnNhY3Rpb25zUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGUgdHJhbnNhY3Rpb25hbCBkYXRhLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRUcmFuc2FjdGlvbj8oZ2V0VHJhbnNhY3Rpb25JbnB1dDogR2V0VHJhbnNhY3Rpb25JbnB1dCk6IFByb21pc2U8TW9vbmJlYW1UcmFuc2FjdGlvbnNSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIGdldCBhbGwgdHJhbnNhY3Rpb25zLCBmb3IgYSBwYXJ0aWN1bGFyIHVzZXIsIGZpbHRlcmVkXG4gICAgICogYnkgdGhlaXIgc3RhdHVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGdldFRyYW5zYWN0aW9uQnlTdGF0dXNJbnB1dCB0aGUgdHJhbnNhY3Rpb24gYnkgc3RhdHVzIGlucHV0IG9iamVjdCB0byBiZSBwYXNzZWQgaW4sXG4gICAgICogY29udGFpbmluZyBhbGwgdGhlIG5lY2Vzc2FyeSBmaWx0ZXJpbmcgZm9yIHJldHJpZXZpbmcgdGhlIHRyYW5zYWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIE1vb25iZWFtVHJhbnNhY3Rpb25zQnlTdGF0dXNSZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSB0cmFuc2FjdGlvbmFsIGRhdGEsXG4gICAgICogZmlsdGVyZWQgYnkgc3RhdHVzIHJlc3BvbnNlXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldFRyYW5zYWN0aW9uQnlTdGF0dXM/KGdldFRyYW5zYWN0aW9uQnlTdGF0dXNJbnB1dDogR2V0VHJhbnNhY3Rpb25CeVN0YXR1c0lucHV0KTogUHJvbWlzZTxNb29uYmVhbVRyYW5zYWN0aW9uc0J5U3RhdHVzUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgYW4gZXhpc3RpbmcgdHJhbnNhY3Rpb24ncyBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHVwZGF0ZVRyYW5zYWN0aW9uSW5wdXQgdGhlIHRyYW5zYWN0aW9uIGRldGFpbHMgdG8gYmUgcGFzc2VkIGluLCBpbiBvcmRlciB0byB1cGRhdGVcbiAgICAgKiBhbiBleGlzdGluZyB0cmFuc2FjdGlvblxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB7QGxpbmsgTW9vbmJlYW1VcGRhdGVkVHJhbnNhY3Rpb25SZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSB1cGRhdGVkIHRyYW5zYWN0aW9uXG4gICAgICogZGF0YVxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCB1cGRhdGVUcmFuc2FjdGlvbj8odXBkYXRlVHJhbnNhY3Rpb25JbnB1dDogVXBkYXRlVHJhbnNhY3Rpb25JbnB1dCk6IFByb21pc2U8TW9vbmJlYW1VcGRhdGVkVHJhbnNhY3Rpb25SZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHNlbmQgYSBuZXcgbWlsaXRhcnkgdmVyaWZpY2F0aW9uIHN0YXR1cyBhY2tub3dsZWRnbWVudCwgc28gd2UgY2FuIGtpY2stc3RhcnQgdGhlIG1pbGl0YXJ5IHZlcmlmaWNhdGlvblxuICAgICAqIHN0YXR1cyB1cGRhdGUgbm90aWZpY2F0aW9uIHByb2Nlc3MgdGhyb3VnaCB0aGUgcHJvZHVjZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWlsaXRhcnlWZXJpZmljYXRpb25Ob3RpZmljYXRpb25VcGRhdGUgbWlsaXRhcnkgdmVyaWZpY2F0aW9uIHVwZGF0ZSBvYmplY3RcbiAgICAgKlxuICAgICAqIEByZXR1cm4gYSB7QGxpbmsgUHJvbWlzZX0gb2Yge0BsaW5rIEFQSUdhdGV3YXlQcm94eVJlc3VsdH0gcmVwcmVzZW50aW5nIHRoZSBBUEkgR2F0ZXdheSByZXN1bHRcbiAgICAgKiBzZW50IGJ5IHRoZSBtaWxpdGFyeSB2ZXJpZmljYXRpb24gdXBkYXRlIHByb2R1Y2VyIExhbWJkYSwgdG8gdmFsaWRhdGUgd2hldGhlciB0aGUgbWlsaXRhcnkgdmVyaWZpY2F0aW9uXG4gICAgICogbm90aWZpY2F0aW9uIHVwZGF0ZSBwcm9jZXNzIGtpY2stc3RhcnRlZCBvciBub3RcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgbWlsaXRhcnlWZXJpZmljYXRpb25VcGRhdGVzQWNrbm93bGVkZ21lbnQ/KG1pbGl0YXJ5VmVyaWZpY2F0aW9uTm90aWZpY2F0aW9uVXBkYXRlOiBNaWxpdGFyeVZlcmlmaWNhdGlvbk5vdGlmaWNhdGlvblVwZGF0ZSk6IFByb21pc2U8QVBJR2F0ZXdheVByb3h5UmVzdWx0PjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gc2VuZCBhIG5ldyB0cmFuc2FjdGlvbiBhY2tub3dsZWRnbWVudCwgZm9yIGFuIHVwZGF0ZWQgdHJhbnNhY3Rpb24sIHNvIHdlIGNhbiBraWNrLXN0YXJ0IHRoZVxuICAgICAqIHRyYW5zYWN0aW9uIHByb2Nlc3MgdGhyb3VnaCB0aGUgdHJhbnNhY3Rpb24gcHJvZHVjZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXBkYXRlZFRyYW5zYWN0aW9uRXZlbnQgdXBkYXRlZCB0cmFuc2FjdGlvbiBldmVudCB0byBiZSBwYXNzZWQgaW5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gYSB7QGxpbmsgUHJvbWlzZX0gb2Yge0BsaW5rIEFQSUdhdGV3YXlQcm94eVJlc3VsdH0gcmVwcmVzZW50aW5nIHRoZSBBUEkgR2F0ZXdheSByZXN1bHRcbiAgICAgKiBzZW50IGJ5IHRoZSByZWltYnVyc2VtZW50IHByb2R1Y2VyIExhbWJkYSwgdG8gdmFsaWRhdGUgd2hldGhlciB0aGUgdHJhbnNhY3Rpb25zIHByb2Nlc3Mgd2FzXG4gICAgICoga2ljay1zdGFydGVkIG9yIG5vdC5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdHJhbnNhY3Rpb25zQWNrbm93bGVkZ21lbnQ/KHVwZGF0ZWRUcmFuc2FjdGlvbkV2ZW50OiBVcGRhdGVkVHJhbnNhY3Rpb25FdmVudCk6IFByb21pc2U8QVBJR2F0ZXdheVByb3h5UmVzdWx0PjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gY3JlYXRlIGEgbmV3IHRyYW5zYWN0aW9uIGludGVybmFsbHksIGZyb20gYW4gaW5jb21pbmcgdHJhbnNhY3Rpb25cbiAgICAgKiBvYnRhaW5lZCBmcm9tIHRoZSBTUVMgbWVzc2FnZS9ldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uIHRyYW5zYWN0aW9uIHBhc3NlZCBpbiBmcm9tIHRoZSBTUVMgbWVzc2FnZS9ldmVudFxuICAgICAqXG4gICAgICogQHJldHVybiBhIHtAbGluayBQcm9taXNlfSBvZiB7QGxpbmsgTW9vbmJlYW1UcmFuc2FjdGlvblJlc3BvbnNlfSByZXByZXNlbnRpbmcgdGhlIHRyYW5zYWN0aW9uXG4gICAgICogZGV0YWlscyB0aGF0IHdlcmUgc3RvcmVkIGluIER5bmFtbyBEQlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjcmVhdGVUcmFuc2FjdGlvbj8odHJhbnNhY3Rpb246IE1vb25iZWFtVHJhbnNhY3Rpb24pOiBQcm9taXNlPE1vb25iZWFtVHJhbnNhY3Rpb25SZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHJldHJpZXZlIHRoZSBsaXN0IG9mIGVsaWdpYmxlIGxpbmtlZCB1c2VycywgdG8gYmUgdXNlciBkdXJpbmcgdGhlIHJlaW1idXJzZW1lbnRzXG4gICAgICogcHJvY2Vzcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gYSB7bGluayBQcm9taXNlfSBvZiB7QGxpbmsgRWxpZ2libGVMaW5rZWRVc2Vyc1Jlc3BvbnNlfSByZXByZXNlbnRpbmcgdGhlIGxpc3Qgb2YgZWxpZ2libGVcbiAgICAgKiB1c2Vyc1xuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRFbGlnaWJsZUxpbmtlZFVzZXJzPygpOiBQcm9taXNlPEVsaWdpYmxlTGlua2VkVXNlcnNSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHZlcmlmeSBhbiBpbmRpdmlkdWFscyBtaWxpdGFyeSBzZXJ2aWNlIHN0YXR1cy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gYSB7QGxpbmsgUHJvbWlzZX0gb2Yge0BsaW5rIE1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzVHlwZX0gcmVwcmVzZW50aW5nIHRoZVxuICAgICAqIG1pbGl0YXJ5IHZlcmlmaWNhdGlvbiBzdGF0dXMgb2J0YWluZWQgZnJvbSB0aGUgY2xpZW50IHZlcmlmaWNhdGlvbiBjYWxsXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHZlcmlmeT8oKTogUHJvbWlzZTxNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1c1R5cGU+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBjb21wbGV0ZSB0aGUgbGlua2luZyBvZiBhbiBpbmRpdmlkdWFsJ3MgY2FyZCBvbiB0aGUgcGxhdGZvcm0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXNlcklkIHVuaXF1ZSB1c2VyIElEIG9mIGEgY2FyZCBsaW5raW5nIHVzZXIuXG4gICAgICogQHBhcmFtIGNyZWF0ZWRBdCBjYXJkIGxpbmtlZCBvYmplY3QgY3JlYXRpb24gZGF0ZVxuICAgICAqIEBwYXJhbSB1cGRhdGVkQXQgY2FyZCBsaW5rZWQgb2JqZWN0IHVwZGF0ZSBkYXRlXG4gICAgICogQHBhcmFtIGNhcmQgY2FyZCBpbmZvcm1hdGlvbiB0byBiZSB1c2VkIGR1cmluZyB0aGUgZW5yb2xsbWVudC9saW5raW5nIHByb2Nlc3NcbiAgICAgKlxuICAgICAqIEByZXR1cm4gYSB7QGxpbmsgUHJvbWlzZX0gb2Yge0BsaW5rIENhcmRMaW5rUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGVcbiAgICAgKiBjYXJkIGxpbmsgcmVzcG9uc2Ugb2JqZWN0IG9idGFpbmVkIGZyb20gdGhlIGxpbmtpbmcgY2FsbFxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBsaW5rPyh1c2VySWQ6IHN0cmluZywgY3JlYXRlZEF0OiBzdHJpbmcsIHVwZGF0ZWRBdDogc3RyaW5nLCBjYXJkOiBDYXJkKTogUHJvbWlzZTxDYXJkTGlua1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gYWRkIGEgbmV3IGNhcmQgdG8gYW4gZXhpc3RpbmcgbWVtYmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHVzZXJJZCB1bmlxdWUgdXNlciBJRCBvZiBhIGNhcmQgbGlua2luZyB1c2VyLlxuICAgICAqIEBwYXJhbSBtZW1iZXJJZCBtZW1iZXIgaWQsIHJldHJpZXZlZCBmcm9tIE9saXZlLCB3aGljaCB0aGUgY2FyZCB3aWxsIGJlIGFkZGVkIHRvXG4gICAgICogQHBhcmFtIGNyZWF0ZWRBdCBjYXJkIGxpbmtlZCBvYmplY3QgY3JlYXRpb24gZGF0ZVxuICAgICAqIEBwYXJhbSB1cGRhdGVkQXQgY2FyZCBsaW5rZWQgb2JqZWN0IHVwZGF0ZSBkYXRlXG4gICAgICogQHBhcmFtIGNhcmQgY2FyZCBpbmZvcm1hdGlvbiB0byBiZSB1c2VkIGluIGFkZGluZyBhIG5ldyBjYXJkIHRvIGEgbWVtYmVyXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBDYXJkTGlua1Jlc3BvbnNlfSByZXByZXNlbnRpbmcgdGhlXG4gICAgICogY2FyZCBsaW5rIHJlc3BvbnNlIG9iamVjdCBvYnRhaW5lZCBmcm9tIHRoZSBhZGQgY2FyZCBjYWxsXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFkZENhcmQ/KHVzZXJJZDogc3RyaW5nLCBtZW1iZXJJZDogc3RyaW5nLCBjcmVhdGVkQXQ6IHN0cmluZywgdXBkYXRlZEF0OiBzdHJpbmcsIGNhcmQ6IENhcmQpOiBQcm9taXNlPENhcmRMaW5rUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgYSBtZW1iZXIncyBzdGF0dXMsIHRvIGVpdGhlciBhY3RpdmUgb3IgaW5hY3RpdmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXNlcklkIHVuaXF1ZSB1c2VyIElEIG9mIGEgY2FyZCBsaW5raW5nIHVzZXIuXG4gICAgICogQHBhcmFtIG1lbWJlcklkIG1lbWJlciBpZCwgcmV0cmlldmVkIGZyb20gT2xpdmUsIHdoaWNoIHRoZSBzdGF0dXMgd2lsbCBiZSB1cGRhdGVkIGZvclxuICAgICAqIEBwYXJhbSBtZW1iZXJGbGFnIGZsYWcgdG8gaW5kaWNhdGUgd2hhdCB0aGUgc3RhdHVzIG9mIHRoZSBtZW1iZXIsIHdpbGwgYmUgdXBkYXRlZCB0b1xuICAgICAqIEBwYXJhbSB1cGRhdGVkQXQgY2FyZCBsaW5rZWQgb2JqZWN0IHVwZGF0ZSBkYXRlXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBNZW1iZXJSZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZVxuICAgICAqIG1lbWJlcidzIGNvbnRlbnRzIGFmdGVyIHRoZSB1cGRhdGUgaXMgcGVyZm9ybWVkXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHVwZGF0ZU1lbWJlclN0YXR1cz8odXNlcklkOiBzdHJpbmcsIG1lbWJlcklkOiBzdHJpbmcsIG1lbWJlckZsYWc6IGJvb2xlYW4sIHVwZGF0ZWRBdDogc3RyaW5nKTogUHJvbWlzZTxNZW1iZXJSZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHJlbW92ZS9kZWFjdGl2YXRlIGEgY2FyZCwgZ2l2ZW4gaXRzIElELlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhcmRJZCB0aGUgaWQgb2YgdGhlIGNhcmQgdG8gYmUgcmVtb3ZlZC9kZWxldGVkL2RlYWN0aXZhdGVkXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBSZW1vdmVDYXJkUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGVcbiAgICAgKiBjYXJkIHJlbW92YWwgcmVzcG9uc2UuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJlbW92ZUNhcmQ/KGNhcmRJZDogc3RyaW5nKTogUHJvbWlzZTxSZW1vdmVDYXJkUmVzcG9uc2U+O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byByZXRyaWV2ZSB0aGUgYnJhbmQgZGV0YWlscywgZ2l2ZW4gYSBicmFuZCBJRC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiB0aGUgdHJhbnNhY3Rpb24gb2JqZWN0LCBwb3B1bGF0ZWQgYnkgdGhlIGluaXRpYWwgZGV0YWlsc1xuICAgICAqIHBhc3NlZCBpbiBieSBPbGl2ZS4gVGhpcyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIHNldCBldmVuIG1vcmUgaW5mb3JtYXRpb24gZm9yXG4gICAgICogaXQsIG9idGFpbmVkIGZyb20gdGhpcyBicmFuZCBjYWxsLlxuICAgICAqXG4gICAgICogQHJldHVybiBhIHtAbGluayBQcm9taXNlfSBvZiB7QGxpbmsgVHJhbnNhY3Rpb25SZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZSB0cmFuc2FjdGlvblxuICAgICAqIHdpdGggdGhlIGJyYW5kIGRldGFpbHMgb2J0YWluZWQsIGluY2x1ZGVkIGluIGl0LlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRCcmFuZERldGFpbHM/KHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFByb21pc2U8VHJhbnNhY3Rpb25SZXNwb25zZT47XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHJldHJpZXZlIHRoZSBzdG9yZSBkZXRhaWxzLCBnaXZlbiBhIHN0b3JlIElELlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uIHRoZSB0cmFuc2FjdGlvbiBvYmplY3QsIHBvcHVsYXRlZCBieSB0aGUgaW5pdGlhbCBkZXRhaWxzXG4gICAgICogcGFzc2VkIGluIGJ5IE9saXZlLiBUaGlzIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gc2V0IGV2ZW4gbW9yZSBpbmZvcm1hdGlvbiBmb3JcbiAgICAgKiBpdCwgb2J0YWluZWQgZnJvbSB0aGlzIGJyYW5kIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBUcmFuc2FjdGlvblJlc3BvbnNlfSByZXByZXNlbnRpbmcgdGhlIHRyYW5zYWN0aW9uXG4gICAgICogd2l0aCB0aGUgc3RvcmUgZGV0YWlscyBvYnRhaW5lZCwgaW5jbHVkZWQgaW4gaXQuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldFN0b3JlRGV0YWlscz8odHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUHJvbWlzZTxUcmFuc2FjdGlvblJlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gcmV0cmlldmUgdGhlIG1lbWJlciBkZXRhaWxzLCBzcGVjaWZpY2FsbHkgdGhlIGV4dE1lbWJlcklkLCB3aGljaCBpcyBNb29uYmVhbSdzIHVuaXF1ZSB1c2VyIElEXG4gICAgICogc2V0IGF0IGNyZWF0aW9uIHRpbWUsIGdpdmVuIGEgbWVtYmVyIElELlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lbWJlcklkIG1lbWJlciBJRCBvYnRhaW5lZCBmcm9tIE9saXZlIGF0IGNyZWF0aW9uIHRpbWUsIHVzZWQgdG8gcmV0cmlldmUgdGhlXG4gICAgICogb3RoZXIgbWVtYmVyIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGEge0BsaW5rIFByb21pc2V9IG9mIHtAbGluayBNZW1iZXJEZXRhaWxzUmVzcG9uc2V9IHJlcHJlc2VudGluZyB0aGUgbWVtYmVyIGRldGFpbHNcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0TWVtYmVyRGV0YWlscz8obWVtYmVySWQ6IHN0cmluZyk6IFByb21pc2U8TWVtYmVyRGV0YWlsc1Jlc3BvbnNlPjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gcmV0cmlldmUgdGhlIHRyYW5zYWN0aW9uIGRldGFpbHMsIGdpdmVuIGEgdHJhbnNhY3Rpb24gSURcbiAgICAgKiAodXNlZCBmb3IgdHJhbnNhY3Rpb25hbCBwdXJwb3NlcykuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gdGhlIHRyYW5zYWN0aW9uIG9iamVjdCwgcG9wdWxhdGVkIGJ5IHRoZSBpbml0aWFsIGRldGFpbHNcbiAgICAgKiBwYXNzZWQgaW4gYnkgT2xpdmUuIFRoaXMgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBzZXQgZXZlbiBtb3JlIGluZm9ybWF0aW9uIGZvclxuICAgICAqIGl0LCBvYnRhaW5lZCBmcm9tIHRoaXMgdHJhbnNhY3Rpb24gZGV0YWlscyBjYWxsLlxuICAgICAqXG4gICAgICogQHJldHVybiBhIHtAbGluayBQcm9taXNlfSBvZiB7QGxpbmsgVHJhbnNhY3Rpb25SZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZVxuICAgICAqIHRyYW5zYWN0aW9uIG9iamVjdCwgcG9wdWxhdGVkIHdpdGggdGhlIGFkZGl0aW9uYWwgdHJhbnNhY3Rpb24gZGV0YWlscyB0aGF0XG4gICAgICogd2UgcmV0cmlldmVkLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRUcmFuc2FjdGlvbkRldGFpbHM/KHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFByb21pc2U8VHJhbnNhY3Rpb25SZXNwb25zZT5cblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gcmV0cmlldmUgdGhlIHRyYW5zYWN0aW9uIGRldGFpbHMsIGdpdmVuIGEgdHJhbnNhY3Rpb24gSUQgKHVzZWQgZm9yIHVwZGF0ZWRcbiAgICAgKiB0cmFuc2FjdGlvbmFsIGV2ZW50cyBwdXJwb3NlcykuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXBkYXRlZFRyYW5zYWN0aW9uRXZlbnQgdGhlIHVwZGF0ZWQgdHJhbnNhY3Rpb24gZXZlbnQgb2JqZWN0LCBwb3B1bGF0ZWQgYnkgdGhlXG4gICAgICogaW5pdGlhbCBkZXRhaWxzIHBhc3NlZCBieSBPbGl2ZSBpbiB0aGUgdXBkYXRlZCB3ZWJob29rIGNhbGwuIFRoaXMgb2JqZWN0IHdpbGwgYmUgdXNlZFxuICAgICAqIHRvIHNldCBldmVuIG1vcmUgaW5mb3JtYXRpb24gZm9yIGl0LCBvYnRhaW5lZCBmcm9tIHRoaXMgdHJhbnNhY3Rpb24gZGV0YWlscyBjYWxsLlxuICAgICAqXG4gICAgICogQHJldHVybiBhIHtAbGluayBQcm9taXNlfSBvZiB7QGxpbmsgVXBkYXRlZFRyYW5zYWN0aW9uRXZlbnRSZXNwb25zZX0gcmVwcmVzZW50aW5nIHRoZVxuICAgICAqIHVwZGF0ZWQgdHJhbnNhY3Rpb24gZXZlbnQgb2JqZWN0LCBwb3B1bGF0ZWQgd2l0aCB0aGUgYWRkaXRpb25hbCB0cmFuc2FjdGlvbiBkZXRhaWxzXG4gICAgICogdGhhdCB3ZSByZXRyaWV2ZWRcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0VXBkYXRlZFRyYW5zYWN0aW9uRGV0YWlscz8odXBkYXRlZFRyYW5zYWN0aW9uRXZlbnQ6IFVwZGF0ZWRUcmFuc2FjdGlvbkV2ZW50KTogUHJvbWlzZTxVcGRhdGVkVHJhbnNhY3Rpb25FdmVudFJlc3BvbnNlPlxufVxuIl19