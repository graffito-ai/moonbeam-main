## graphql/TransactionsSchema.graphql
## Transactions Schema File
enum TransactionsErrorType {
    DUPLICATE_OBJECT_FOUND
    NONE_OR_ABSENT
    VALIDATION_ERROR
    UNEXPECTED_ERROR
    UNPROCESSABLE
}

## Defines the types of the statuses for a transaction, during its lifecycle. Although these
## statuses might not match Olive's statuses 1:1, they represent what our customers see in their
## dashboard, and how we translate incoming Olive information, and communicate it to our end
## users.
enum TransactionsStatus {
    PENDING ## pending  = transaction is a qualifying offer, and it is pending merchant approval and funding
    PROCESSED ## processed = transaction is a qualifying offer, and it has been approved and funded by the merchant
    FUNDED ## funded = transaction is a qualifying offer, and it has been approved and funded by the merchant, and its cashback credited back to Moonbeam
    FRONTED ## fronted - transaction is a qualifying offer, and it has been approved and funded by the merchant, and its cashback has not been credited back to Moonbeam, but it has been credited back to the user
    CREDITED ## credited = transaction is a qualifying offer, and it has been approved and funded by the merchant, its cashback credited back to Moonbeam and also credited back to the user
    REJECTED ## rejected = transaction is a qualifying offer, and it has been rejected for some particular reason
}

## Defines the type of transactions that are available, depending on incoming information received
## through the Olive webhooks. The transactions processor, will handle these transaction types and
## determine whether they are offers to be redeemed, round-ups, contributions/matching, etc.
enum TransactionType {
    OFFER_REDEEMED
    ROUNDUP
    CONTRIBUTION
    OLIVE_INELIGIBLE_UNMATCHED ## oliveIneligibleUnmatched = transaction coming from the Olive platform that did not match to an offer.
    OLIVE_INELIGIBLE_MATCHED ### oliveIneligibleMatched = transaction coming from the Olive platform that did match to an offer, but for some reason it did not qualify and has brand/store details associated (think click offers).
}

## For now we only support USD as the currency code type for transactions
enum CurrencyCodeType {
    USD
}

## this type is mainly used to define and/or work with the ineligible Transaction object before it is stored
## in the DB, as obtained from Olive.
type IneligibleTransaction @aws_cognito_user_pools @aws_api_key {
    id: ID ## this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp! ## this represents the timestamp, in a Number epoch based format (for sorting purposes)
    transactionId: ID!
    transactionStatus: TransactionsStatus!
    transactionType: TransactionType!
    createdAt: AWSDateTime! ## this will be the same as the "timestamp" value above, only represented in a date time format
    updatedAt: AWSDateTime
    memberId: ID! ## this will be obtained from Olive (and it is the Olive member id)
    cardId: ID!
    brandId: ID
    storeId: ID
    category: String!
    currencyCode: CurrencyCodeType!,
    rewardAmount: Float,
    totalAmount: Float,
    pendingCashbackAmount: Float ## this amount should be the total reward amount that's pending reimbursement to the customer
    creditedCashbackAmount: Float ## this amount should be the total reward amount that's reimbursed/credited to the customer
    transactionBrandName: String,
    transactionBrandAddress: String,
    transactionBrandLogoUrl: String,
    transactionBrandURLAddress: String,
    transactionIsOnline: Boolean
}

## this type is mainly used to define and/or work with the Transaction object before it is stored
## in the DB, as obtained from Olive.
type Transaction @aws_cognito_user_pools @aws_api_key {
    id: ID ## this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp! ## this represents the timestamp, in a Number epoch based format (for sorting purposes)
    transactionId: ID!
    transactionStatus: TransactionsStatus!
    transactionType: TransactionType!
    createdAt: AWSDateTime! ## this will be the same as the "timestamp" value above, only represented in a date time format
    updatedAt: AWSDateTime
    memberId: ID! ## this will be obtained from Olive (and it is the Olive member id)
    cardId: ID!
    brandId: ID!
    storeId: ID!
    category: String!
    currencyCode: CurrencyCodeType!,
    rewardAmount: Float,
    totalAmount: Float,
    pendingCashbackAmount: Float ## this amount should be the total reward amount that's pending reimbursement to the customer
    creditedCashbackAmount: Float ## this amount should be the total reward amount that's reimbursed/credited to the customer
    transactionBrandName: String,
    transactionBrandAddress: String,
    transactionBrandLogoUrl: String,
    transactionBrandURLAddress: String,
    transactionIsOnline: Boolean
}

## this type is mainly used to define and/or work with the UpdateTransactionEvent object for the updated transaction webhook
type UpdateTransactionEventTransactionData @aws_cognito_user_pools @aws_api_key {
    id: ID!
    rewardAmount: Float!
    cardId: ID!
    amount: Float
    currencyCode: CurrencyCodeType!
    created: AWSDateTime
    storeId: ID
    brandId: ID
    roundedAmount: Float
    matchingAmount: Float
    roundingRuleId: String
    loyaltyProgramId: String
    merchantCategoryCode: String
    moonbeamTransactionStatus: TransactionsStatus
}

## this type is mainly used to define and/or work with the UpdateTransactionEvent object for the updated transaction webhook
type UpdatedTransactionEventData @aws_cognito_user_pools @aws_api_key {
    webhookEventType: String!
    cardId: ID!
    memberId: ID!
    redeemedMatchings: [String]!
    transaction: UpdateTransactionEventTransactionData!
}

## this type is mainly used to define and/or work with the UpdateTransactionEvent object for the updated transaction webhook
type UpdatedTransactionEvent @aws_cognito_user_pools @aws_api_key {
    id: ID!
    subscriptionId: ID!
    timestamp: AWSTimestamp!
    callbackUrl: String!
    topic: String!
    data: UpdatedTransactionEventData!
}

## this type is mainly used to define and/or work with the UpdateTransactionEvent object for the updated transaction webhook
type UpdatedTransactionEventResponse @aws_cognito_user_pools @aws_api_key {
    data: UpdatedTransactionEvent
    errorType: TransactionsErrorType
    errorMessage: String
}

## the details obtained from the Olive transaction details call, after a transaction is stores - used for reimbursement purposes.
type TransactionStatusDetails @aws_cognito_user_pools @aws_api_key {
    totalAmount: Float!,
    rewardAmount: Float!,
    creditedCashbackAmount: Float!,
    pendingCashbackAmount: Float!,
    oliveTransactionStatus: String!
}

## this type is mainly used to define and/or work with the TransactionResponse object before it is stored
## in the DB, as obtained from Olive's get transaction details call - used for transactional purposes.
type TransactionResponse @aws_cognito_user_pools @aws_api_key {
    data: Transaction
    errorType: TransactionsErrorType
    errorMessage: String
}

## this type is mainly used to define and/or work with the IneligibleTransactionResponse object before it is stored
## in the DB, as obtained from Olive's get transaction details call - used for ineligible transactional purposes.
type IneligibleTransactionResponse @aws_cognito_user_pools @aws_api_key {
    data: IneligibleTransaction
    errorType: TransactionsErrorType
    errorMessage: String
}

## this type is mainly used to define and/or work with the TransactionStatusResponse object before it is stored
## in the DB, as obtained from Olive's get transaction details call - used for reimbursement purposes.
type TransactionStatusDetailsResponse @aws_cognito_user_pools @aws_api_key {
    data: TransactionStatusDetails
    errorType: TransactionsErrorType
    errorMessage: String
}

type MemberDetailsResponse @aws_cognito_user_pools @aws_api_key {
    data: String
    errorType: TransactionsErrorType
    errorMessage: String
}

type MoonbeamTransaction @aws_cognito_user_pools @aws_api_key {
    id: ID! ## this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp! ## this represents the timestamp, in a Number epoch based format (for sorting purposes)
    transactionId: ID!
    transactionStatus: TransactionsStatus!
    transactionType: TransactionType!
    createdAt: AWSDateTime! ## this will be the same as the "timestamp" value above, only represented in a date time format
    updatedAt: AWSDateTime!
    memberId: ID! ## this will be obtained from Olive (and it is the Olive member id)
    cardId: ID!
    brandId: ID!
    storeId: ID!
    category: String!
    currencyCode: CurrencyCodeType!,
    rewardAmount: Float!,
    totalAmount: Float!,
    pendingCashbackAmount: Float! ## this amount should be the total reward amount that's pending reimbursement to the customer
    creditedCashbackAmount: Float! ## this amount should be the total reward amount that's reimbursed/credited to the customer
    transactionBrandName: String!,
    transactionBrandAddress: String!,
    transactionBrandLogoUrl: String!,
    transactionBrandURLAddress: String!,
    transactionIsOnline: Boolean!
}

type MoonbeamUpdatedTransaction @aws_cognito_user_pools @aws_api_key {
    id: ID! ## this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp! ## this represents the timestamp, in a Number epoch based format (for sorting purposes)
    transactionId: ID!
    transactionStatus: TransactionsStatus!
    updatedAt: AWSDateTime!
}

type MoonbeamTransactionByStatus @aws_cognito_user_pools @aws_api_key {
    id: ID! ## this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp!
    transactionId: ID!
    transactionStatus: TransactionsStatus!
    creditedCashbackAmount: Float!
    pendingCashbackAmount: Float!
    rewardAmount: Float!
    totalAmount: Float!
}

type MoonbeamTransactionResponse @aws_cognito_user_pools @aws_api_key {
    id: ID ## this represents the userID of the transaction, and the reason we repeat it in the parent response is for the subscription filtering to work properly
    data: MoonbeamTransaction
    errorType: TransactionsErrorType
    errorMessage: String
}

type MoonbeamTransactionsResponse @aws_cognito_user_pools @aws_api_key {
    data: [MoonbeamTransaction]
    errorType: TransactionsErrorType
    errorMessage: String
}

type MoonbeamTransactionsByStatusResponse @aws_cognito_user_pools @aws_api_key {
    data: [MoonbeamTransactionByStatus]
    errorType: TransactionsErrorType
    errorMessage: String
}

type MoonbeamUpdatedTransactionResponse @aws_cognito_user_pools @aws_api_key {
    id: ID ## this represents the userID of the transaction, and the reason we repeat it in the parent response is for the subscription filtering to work properly
    data: MoonbeamUpdatedTransaction
    errorType: TransactionsErrorType
    errorMessage: String
}

type OfferIdResponse @aws_cognito_user_pools @aws_api_key {
    data: ID # this represents the ID of the offer id that was redeemed through the transaction
    errorType: TransactionsErrorType
    errorMessage: String
}

type OfferRedemptionTypeResponse @aws_cognito_user_pools @aws_api_key {
    data: RedemptionType # this represents the redemption type for the offer
    errorType: TransactionsErrorType
    errorMessage: String
}

input GetTransactionInput {
    id: ID! ## this represents the userID which the transactions should be retrieved for
    startDate: AWSDateTime ## the start time to filter transactions for
    endDate: AWSDateTime! ## the end time to filter transactions for
}

input GetTransactionByStatusInput {
    id: ID! ## this represents the userID which the transactions should be retrieved for
    status: TransactionsStatus! ## the transactions status to filter transactions for
}

input UpdateTransactionInput {
    id: ID! ## this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp! ## this represents the timestamp, in a Number epoch based format (for sorting purposes)
    transactionId: ID!
    transactionStatus: TransactionsStatus!
    updatedAt: AWSDateTime
}

input CreateTransactionInput {
    id: ID! ## this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp! ## this represents the timestamp, in a Number epoch based format (for sorting purposes)
    transactionId: ID!
    transactionStatus: TransactionsStatus!
    transactionType: TransactionType!
    createdAt: AWSDateTime! ## this will be the same as the "timestamp" value above, only represented in a date time format
    updatedAt: AWSDateTime!
    memberId: ID! ## this will be obtained from Olive (and it is the Olive member id)
    cardId: ID!
    brandId: ID!
    storeId: ID!
    category: String!
    currencyCode: CurrencyCodeType!,
    rewardAmount: Float!,
    totalAmount: Float!,
    pendingCashbackAmount: Float! ## this amount should be the total reward amount that's pending reimbursement to the customer
    creditedCashbackAmount: Float! ## this amount should be the total reward amount that's reimbursed/credited to the customer
    transactionBrandName: String!,
    transactionBrandAddress: String!,
    transactionBrandLogoUrl: String!,
    transactionBrandURLAddress: String!,
    transactionIsOnline: Boolean!
}
