# graphql/ReimbursementsSchema.graphql
# Reimbursements Schema File
enum ReimbursementsErrorType {
    DUPLICATE_OBJECT_FOUND
    NONE_OR_ABSENT
    VALIDATION_ERROR
    UNEXPECTED_ERROR
    UNPROCESSABLE
}

# Defines the types of the statuses for a reimbursement, during its lifecycle. Although these
# statuses might not match Olive's statuses 1:1, they represent what our customers see in their
# dashboard, and how we translate incoming Olive information, and communicate it to our end
# users.
enum ReimbursementStatus {
    PENDING
    PROCESSED
    FAILED
}

type ReimbursementTransaction @aws_cognito_user_pools @aws_api_key {
    id: ID! # this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp! # this represents the timestamp, in a Number epoch based format (for sorting purposes)
    transactionId: ID!
    transactionStatus: TransactionsStatus!
}

type Reimbursement @aws_cognito_user_pools @aws_api_key {
    id: ID! # this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp! # this represents the timestamp, in a Number epoch based format (for sorting purposes)
    reimbursementId: ID!, # Olive specific
    clientId: ID, # Olive specific
    paymentGatewayId: ID, # Olive specific
    succeeded: Boolean, # this will only be applicable is the status is PROCESSED or FAILED
    processingMessage: String # this will only be applicable is the status is PROCESSED or FAILED so we know why something failed or succeeded
    cardId: ID!,
    reimbursementStatus: ReimbursementStatus!
    pendingCashbackAmount: Float! # this amount should be the total reward amount that's pending reimbursement to the customer
    creditedCashbackAmount: Float! # this amount should be the total reward amount that's reimbursed/credited to the customer
    currencyCode: CurrencyCodeType!,
    transactions:  [ReimbursementTransaction]! # this array associates particular transactions to a reimbursement object, so we know what was reimbursed to customers
    createdAt: AWSDateTime! # this will be the same as the "timestamp" value above, only represented in a date time format
    updatedAt: AWSDateTime!
}

type ReimbursementResponse @aws_cognito_user_pools @aws_api_key {
    id: ID # this represents the userID of the reimbursement, and the reason we repeat it in the parent response is for the subscription filtering to work properly
    data: Reimbursement
    errorType: ReimbursementsErrorType
    errorMessage: String
}

input ReimbursementTransactionInput {
    id: ID! # this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp! # this represents the timestamp, in a Number epoch based format (for sorting purposes)
    transactionId: ID!
    transactionStatus: TransactionsStatus!
}

input CreateReimbursementInput {
    id: ID! # this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp! # this represents the timestamp, in a Number epoch based format (for sorting purposes)
    reimbursementId: ID!, # Olive specific
    clientId: ID, # Olive specific
    paymentGatewayId: ID, # Olive specific
    succeeded: Boolean, # this will only be applicable is the status is PROCESSED or FAILED
    processingMessage: String # this will only be applicable is the status is PROCESSED or FAILED so we know why something failed or succeeded
    cardId: ID!,
    reimbursementStatus: ReimbursementStatus!
    pendingCashbackAmount: Float! # this amount should be the total reward amount that's pending reimbursement to the customer
    creditedCashbackAmount: Float! # this amount should be the total reward amount that's reimbursed/credited to the customer
    currencyCode: CurrencyCodeType!,
    transactions:  [ReimbursementTransactionInput]! # this array associates particular transactions to a reimbursement object, so we know what was reimbursed to customers
    createdAt: AWSDateTime! # this will be the same as the "timestamp" value above, only represented in a date time format
    updatedAt: AWSDateTime!
}

input UpdateReimbursementInput {
    id: ID! # this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp! # this represents the timestamp, in a Number epoch based format (for sorting purposes)
    clientId: ID, # Olive specific
    paymentGatewayId: ID, # Olive specific
    succeeded: Boolean, # this will only be applicable is the status is PROCESSED or FAILED
    processingMessage: String # this will only be applicable is the status is PROCESSED or FAILED so we know why something failed or succeeded
    reimbursementStatus: ReimbursementStatus
    pendingCashbackAmount: Float # this amount should be the total reward amount that's pending reimbursement to the customer
    creditedCashbackAmount: Float # this amount should be the total reward amount that's reimbursed/credited to the customer
    transactions: [ReimbursementTransactionInput] # this array associates particular transactions to a reimbursement object, so we know what was reimbursed to customers
    updatedAt: AWSDateTime
}
