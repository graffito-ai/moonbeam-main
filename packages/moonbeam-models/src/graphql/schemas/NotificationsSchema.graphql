# graphql/NotificationsSchema.graphql
# Notifications Schema File
enum NotificationsErrorType {
    DUPLICATE_OBJECT_FOUND
    NONE_OR_ABSENT
    VALIDATION_ERROR
    UNEXPECTED_ERROR
}

enum NotificationType {
    NEW_USER_SIGNUP
    QUALIFYING_OFFER
    MILITARY_STATUS_CHANGED_PENDING_TO_VERIFIED
    MILITARY_STATUS_CHANGED_PENDING_TO_REJECTED
    EXPIRATION_LINKED_CARD_NOTICE
    EXPIRED_LINKED_CARD
    NEW_QUALIFYING_OFFER_AVAILABLE
    ELIGIBLE_FOR_REIMBURSEMENT
    MARKETING_RELATED
}

enum NotificationChannelType {
    EMAIL
    SMS
    PUSH
}

enum NotificationStatus {
    SENT
    ACKNOWLEDGED
}

type Notification @aws_cognito_user_pools @aws_api_key {
    id: ID! # this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp! # this represents the timestamp, in a Number epoch based format (for sorting purposes)
    notificationId: ID! # representing Courier's request ID, so we can link between our internal system and Courier's (obtained from Courier call)
    emailDestination: String # mostly applicable to email based notifications
    userFullName: String # mostly applicable to email based notifications
    type: NotificationType!
    channelType: NotificationChannelType!
    status: NotificationStatus!
    expoPushTokens: [String] # the push tokens for the user devices that we should send the notification to (applicable only to push notifications)
    pendingCashback: Float, # mostly applicable to push based notifications, representing the pending cashback for a qualifying transactional offer
    merchantName: String # mostly applicable to push based notifications, representing the name of the merchant for a qualifying transactional offer
    actionUrl: String # mostly applicable to push based notifications (to indicate what happens when a user taps on the notification)
    createdAt: AWSDateTime! # this will be the same as the "timestamp" value above, only represented in a date time format
    updatedAt: AWSDateTime!
}

input CreateNotificationInput {
    id: ID! # this represents the userID which the transaction belongs to/was made by
    timestamp: AWSTimestamp # this represents the timestamp, in a Number epoch based format (for sorting purposes)
    notificationId: ID # representing Courier's request ID, so we can link between our internal system and Courier's (obtained from Courier call)
    emailDestination: String # mostly applicable to email based notifications
    userFullName: String # mostly applicable to email based notifications
    type: NotificationType!
    channelType: NotificationChannelType!
    status: NotificationStatus!
    expoPushTokens: [String] # the push tokens for the user devices that we should send the notification to (applicable only to push notifications)
    pendingCashback: Float, # mostly applicable to push based notifications, representing the pending cashback for a qualifying transactional offer
    merchantName: String # mostly applicable to push based notifications, representing the name of the merchant for a qualifying transactional offer
    actionUrl: String # mostly applicable to push based notifications (to indicate what happens when a user taps on the notification)
    createdAt: AWSDateTime # this will be the same as the "timestamp" value above, only represented in a date time format
    updatedAt: AWSDateTime
}

# this input is specific for sending email notifications and will be used solely as an input object, outside of any AppSync related queries and/or mutations
input SendEmailNotificationInput {
    emailDestination: String!
    userFullName: String!
}

# this input is specific for sending mobile push notifications and will be used solely as an input object, outside of any AppSync related queries and/or mutations
input SendMobilePushNotificationInput {
    expoPushTokens: [String]!
    pendingCashback: Float
    merchantName: String
}

# this type is a specific response for sending notifications and will be used solely as an input object, outside of any AppSync related queries and/or mutations
type NotificationResponse @aws_cognito_user_pools @aws_api_key {
    requestId: ID # Courier specific request ID
    errorType: NotificationsErrorType
    errorMessage: String
}

type CreateNotificationResponse @aws_cognito_user_pools @aws_api_key {
    id: ID # this represents the userID of the notification, and the reason we repeat it in the parent response is for the subscription filtering to work properly
    data: Notification
    errorType: NotificationsErrorType
    errorMessage: String
}

# this input is specific for sending email notifications and will be used outside of any AppSync related queries and/or mutations
type EmailFromCognitoResponse @aws_cognito_user_pools @aws_api_key {
    data: String
    errorType: NotificationsErrorType
    errorMessage: String
}
