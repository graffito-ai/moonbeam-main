"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateUserAuthSessionResolver_1 = require("./resolvers/CreateUserAuthSessionResolver");
const GetUserAuthSessionResolver_1 = require("./resolvers/GetUserAuthSessionResolver");
const UpdateUserAuthSessionResolver_1 = require("./resolvers/UpdateUserAuthSessionResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync even to be passed in the handler
 * @returns a {@link Promise} containing a {@link UserAuthSessionResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new User Auth Session event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getUserAuthSession":
            return await (0, GetUserAuthSessionResolver_1.getUserAuthSession)(event.info.fieldName, event.arguments.getUserAuthSessionInput);
        case "createUserAuthSession":
            return await (0, CreateUserAuthSessionResolver_1.createUserAuthSession)(event.info.fieldName, event.arguments.createUserAuthSessionInput);
        case "updateUserAuthSession":
            return await (0, UpdateUserAuthSessionResolver_1.updateUserAuthSession)(event.info.fieldName, event.arguments.updateUserAuthSessionInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.UserAuthSessionErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQU1tQztBQUNuQyw2RkFBZ0Y7QUFDaEYsdUZBQTBFO0FBQzFFLDZGQUFrRjtBQW9CbEY7Ozs7OztHQU1HO0FBQ0gsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBbUIsRUFBb0MsRUFBRTtJQUM5RSxPQUFPLENBQUMsR0FBRyxDQUFDLHVEQUF1RCxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvSSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQzFCLEtBQUssb0JBQW9CO1lBQ3JCLE9BQU8sTUFBTSxJQUFBLCtDQUFrQixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUNuRyxLQUFLLHVCQUF1QjtZQUN4QixPQUFPLE1BQU0sSUFBQSxxREFBcUIsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDekcsS0FBSyx1QkFBdUI7WUFDeEIsT0FBTyxNQUFNLElBQUEscURBQXFCLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ3pHO1lBQ0ksTUFBTSxZQUFZLEdBQUcsMEJBQTBCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxQixPQUFPO2dCQUNILFlBQVksRUFBRSxZQUFZO2dCQUMxQixTQUFTLEVBQUUsMENBQXdCLENBQUMsZUFBZTthQUN0RCxDQUFDO0tBQ1Q7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENyZWF0ZVVzZXJBdXRoU2Vzc2lvbklucHV0LFxuICAgIEdldFVzZXJBdXRoU2Vzc2lvbklucHV0LFxuICAgIFVwZGF0ZVVzZXJBdXRoU2Vzc2lvbklucHV0LFxuICAgIFVzZXJBdXRoU2Vzc2lvbkVycm9yVHlwZSxcbiAgICBVc2VyQXV0aFNlc3Npb25SZXNwb25zZVxufSBmcm9tIFwiQG1vb25iZWFtL21vb25iZWFtLW1vZGVsc1wiO1xuaW1wb3J0IHtjcmVhdGVVc2VyQXV0aFNlc3Npb259IGZyb20gXCIuL3Jlc29sdmVycy9DcmVhdGVVc2VyQXV0aFNlc3Npb25SZXNvbHZlclwiO1xuaW1wb3J0IHtnZXRVc2VyQXV0aFNlc3Npb259IGZyb20gXCIuL3Jlc29sdmVycy9HZXRVc2VyQXV0aFNlc3Npb25SZXNvbHZlclwiO1xuaW1wb3J0IHsgdXBkYXRlVXNlckF1dGhTZXNzaW9uIH0gZnJvbSBcIi4vcmVzb2x2ZXJzL1VwZGF0ZVVzZXJBdXRoU2Vzc2lvblJlc29sdmVyXCI7XG5cbi8qKlxuICogTWFwcGluZyBvdXQgdGhlIEFwcCBTeW5jIGV2ZW50IHR5cGUsIHNvIHdlIGNhbiB1c2UgaXQgYXMgYSB0eXBlIGluIHRoZSBMYW1iZGEgSGFuZGxlclxuICovXG50eXBlIEFwcFN5bmNFdmVudCA9IHtcbiAgICBpbmZvOiB7XG4gICAgICAgIGZpZWxkTmFtZTogc3RyaW5nXG4gICAgfSxcbiAgICBhcmd1bWVudHM6IHtcbiAgICAgICAgY3JlYXRlVXNlckF1dGhTZXNzaW9uSW5wdXQ6IENyZWF0ZVVzZXJBdXRoU2Vzc2lvbklucHV0LFxuICAgICAgICB1cGRhdGVVc2VyQXV0aFNlc3Npb25JbnB1dDogVXBkYXRlVXNlckF1dGhTZXNzaW9uSW5wdXQsXG4gICAgICAgIGdldFVzZXJBdXRoU2Vzc2lvbklucHV0OiBHZXRVc2VyQXV0aFNlc3Npb25JbnB1dFxuICAgIH0sXG4gICAgaWRlbnRpdHk6IHtcbiAgICAgICAgc3ViOiBzdHJpbmc7XG4gICAgICAgIHVzZXJuYW1lOiBzdHJpbmc7XG4gICAgfVxufVxuXG4vKipcbiAqIExhbWJkYSBGdW5jdGlvbiBoYW5kbGVyLCBoYW5kbGluZyBpbmNvbWluZyBldmVudHMsXG4gKiBkZXBlbmRpbmcgb24gdGhlIEFwcFN5bmMgZmllbGQgbmFtZS5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgQXBwU3luYyBldmVuIHRvIGJlIHBhc3NlZCBpbiB0aGUgaGFuZGxlclxuICogQHJldHVybnMgYSB7QGxpbmsgUHJvbWlzZX0gY29udGFpbmluZyBhIHtAbGluayBVc2VyQXV0aFNlc3Npb25SZXNwb25zZX1cbiAqL1xuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBcHBTeW5jRXZlbnQpOiBQcm9taXNlPFVzZXJBdXRoU2Vzc2lvblJlc3BvbnNlPiA9PiB7XG4gICAgY29uc29sZS5sb2coYFJlY2VpdmVkIG5ldyBVc2VyIEF1dGggU2Vzc2lvbiBldmVudCBmb3Igb3BlcmF0aW9uIFske2V2ZW50LmluZm8uZmllbGROYW1lfV0sIHdpdGggYXJndW1lbnRzICR7SlNPTi5zdHJpbmdpZnkoZXZlbnQuYXJndW1lbnRzKX1gKTtcbiAgICBzd2l0Y2ggKGV2ZW50LmluZm8uZmllbGROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJnZXRVc2VyQXV0aFNlc3Npb25cIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRVc2VyQXV0aFNlc3Npb24oZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5nZXRVc2VyQXV0aFNlc3Npb25JbnB1dCk7XG4gICAgICAgIGNhc2UgXCJjcmVhdGVVc2VyQXV0aFNlc3Npb25cIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVVc2VyQXV0aFNlc3Npb24oZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5jcmVhdGVVc2VyQXV0aFNlc3Npb25JbnB1dCk7XG4gICAgICAgIGNhc2UgXCJ1cGRhdGVVc2VyQXV0aFNlc3Npb25cIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB1cGRhdGVVc2VyQXV0aFNlc3Npb24oZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy51cGRhdGVVc2VyQXV0aFNlc3Npb25JbnB1dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgVW5leHBlY3RlZCBmaWVsZCBuYW1lOiAke2V2ZW50LmluZm8uZmllbGROYW1lfWA7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBlcnJvclR5cGU6IFVzZXJBdXRoU2Vzc2lvbkVycm9yVHlwZS5VbmV4cGVjdGVkRXJyb3JcbiAgICAgICAgICAgIH07XG4gICAgfVxufVxuXG4iXX0=