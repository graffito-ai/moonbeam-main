"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateMilitaryVerificationResolver_1 = require("./resolvers/CreateMilitaryVerificationResolver");
const GetMilitaryVerificationStatusResolver_1 = require("./resolvers/GetMilitaryVerificationStatusResolver");
const UpdateMilitaryVerificationStatusResolver_1 = require("./resolvers/UpdateMilitaryVerificationStatusResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 */
exports.handler = async (event) => {
    console.log(`Received new storage event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getMilitaryVerificationStatus":
            return await (0, GetMilitaryVerificationStatusResolver_1.getMilitaryVerificationStatus)(event.arguments.getMilitaryVerificationInput);
        case "updateMilitaryVerificationStatus":
            return await (0, UpdateMilitaryVerificationStatusResolver_1.updateMilitaryVerificationStatus)(event.arguments.updateMilitaryVerificationInput);
        case "createMilitaryVerification":
            return await (0, CreateMilitaryVerificationResolver_1.createMilitaryVerification)(event.arguments.createMilitaryVerificationInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.MilitaryVerificationErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQVFtQztBQUNuQyx1R0FBMEY7QUFDMUYsNkdBQWdHO0FBQ2hHLG1IQUFzRztBQW9CdEc7Ozs7O0dBS0c7QUFDSCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFtQixFQUFzSCxFQUFFO0lBQ2hLLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JJLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDMUIsS0FBSywrQkFBK0I7WUFDaEMsT0FBTyxNQUFNLElBQUEscUVBQTZCLEVBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBQzdGLEtBQUssa0NBQWtDO1lBQ25DLE9BQU8sTUFBTSxJQUFBLDJFQUFnQyxFQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUNuRyxLQUFLLDRCQUE0QjtZQUM3QixPQUFPLE1BQU0sSUFBQSwrREFBMEIsRUFBQyxLQUFLLENBQUMsU0FBUyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDN0Y7WUFDSSxNQUFNLFlBQVksR0FBRywwQkFBMEIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN0RSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE9BQU87Z0JBQ0gsWUFBWSxFQUFFLFlBQVk7Z0JBQzFCLFNBQVMsRUFBRSwrQ0FBNkIsQ0FBQyxlQUFlO2FBQzNELENBQUM7S0FDVDtBQUNMLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dCxcbiAgICBDcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblJlc3BvbnNlLFxuICAgIEdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5wdXQsXG4gICAgR2V0TWlsaXRhcnlWZXJpZmljYXRpb25SZXNwb25zZSxcbiAgICBNaWxpdGFyeVZlcmlmaWNhdGlvbkVycm9yVHlwZSxcbiAgICBVcGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0LFxuICAgIFVwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2Vcbn0gZnJvbSBcIkBtb29uYmVhbS9tb29uYmVhbS1tb2RlbHNcIjtcbmltcG9ydCB7Y3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb259IGZyb20gXCIuL3Jlc29sdmVycy9DcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblJlc29sdmVyXCI7XG5pbXBvcnQge2dldE1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzfSBmcm9tIFwiLi9yZXNvbHZlcnMvR2V0TWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXNSZXNvbHZlclwiO1xuaW1wb3J0IHt1cGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1c30gZnJvbSBcIi4vcmVzb2x2ZXJzL1VwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzUmVzb2x2ZXJcIjtcblxuLyoqXG4gKiBNYXBwaW5nIG91dCB0aGUgQXBwIFN5bmMgZXZlbnQgdHlwZSwgc28gd2UgY2FuIHVzZSBpdCBhcyBhIHR5cGUgaW4gdGhlIExhbWJkYSBIYW5kbGVyXG4gKi9cbnR5cGUgQXBwU3luY0V2ZW50ID0ge1xuICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmdcbiAgICB9LFxuICAgIGFyZ3VtZW50czoge1xuICAgICAgICBnZXRNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0OiBHZXRNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0LFxuICAgICAgICB1cGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0OiBVcGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0XG4gICAgICAgIGNyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5wdXQ6IENyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5wdXRcbiAgICB9LFxuICAgIGlkZW50aXR5OiB7XG4gICAgICAgIHN1YiA6IHN0cmluZztcbiAgICAgICAgdXNlcm5hbWUgOiBzdHJpbmc7XG4gICAgfVxufVxuXG4vKipcbiAqIExhbWJkYSBGdW5jdGlvbiBoYW5kbGVyLCBoYW5kbGluZyBpbmNvbWluZyBldmVudHMsXG4gKiBkZXBlbmRpbmcgb24gdGhlIEFwcFN5bmMgZmllbGQgbmFtZS5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgQXBwU3luYyBldmVudCB0byBiZSBwYXNzZWQgaW4gdGhlIGhhbmRsZXJcbiAqL1xuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBcHBTeW5jRXZlbnQpOiBQcm9taXNlPENyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2UgfCBHZXRNaWxpdGFyeVZlcmlmaWNhdGlvblJlc3BvbnNlIHwgVXBkYXRlTWlsaXRhcnlWZXJpZmljYXRpb25SZXNwb25zZT4gPT4ge1xuICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCBuZXcgc3RvcmFnZSBldmVudCBmb3Igb3BlcmF0aW9uIFske2V2ZW50LmluZm8uZmllbGROYW1lfV0sIHdpdGggYXJndW1lbnRzICR7SlNPTi5zdHJpbmdpZnkoZXZlbnQuYXJndW1lbnRzKX1gKTtcbiAgICBzd2l0Y2ggKGV2ZW50LmluZm8uZmllbGROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJnZXRNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1c1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzKGV2ZW50LmFyZ3VtZW50cy5nZXRNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0KTtcbiAgICAgICAgY2FzZSBcInVwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdXBkYXRlTWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXMoZXZlbnQuYXJndW1lbnRzLnVwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5wdXQpO1xuICAgICAgICBjYXNlIFwiY3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbihldmVudC5hcmd1bWVudHMuY3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgVW5leHBlY3RlZCBmaWVsZCBuYW1lOiAke2V2ZW50LmluZm8uZmllbGROYW1lfWA7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBlcnJvclR5cGU6IE1pbGl0YXJ5VmVyaWZpY2F0aW9uRXJyb3JUeXBlLlVuZXhwZWN0ZWRFcnJvclxuICAgICAgICAgICAgfTtcbiAgICB9XG59XG5cbiJdfQ==