"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateMilitaryVerificationResolver_1 = require("./resolvers/CreateMilitaryVerificationResolver");
const GetMilitaryVerificationInformationResolver_1 = require("./resolvers/GetMilitaryVerificationInformationResolver");
const GetMilitaryVerificationStatusResolver_1 = require("./resolvers/GetMilitaryVerificationStatusResolver");
const UpdateMilitaryVerificationStatusResolver_1 = require("./resolvers/UpdateMilitaryVerificationStatusResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 *
 * @returns a {@link Promise} containing a {@link CreateMilitaryVerificationResponse}, or {@link GetMilitaryVerificationResponse},
 * or {@link UpdateMilitaryVerificationResponse}, or {@link MilitaryVerificationReportingInformationResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new storage event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getMilitaryVerificationInformation":
            return await (0, GetMilitaryVerificationInformationResolver_1.getMilitaryVerificationInformation)(event.info.fieldName, event.arguments.getMilitaryVerificationInformationInput);
        case "getMilitaryVerificationStatus":
            return await (0, GetMilitaryVerificationStatusResolver_1.getMilitaryVerificationStatus)(event.info.fieldName, event.arguments.getMilitaryVerificationInput);
        case "updateMilitaryVerificationStatus":
            return await (0, UpdateMilitaryVerificationStatusResolver_1.updateMilitaryVerificationStatus)(event.info.fieldName, event.arguments.updateMilitaryVerificationInput);
        case "createMilitaryVerification":
            return await (0, CreateMilitaryVerificationResolver_1.createMilitaryVerification)(event.info.fieldName, event.arguments.createMilitaryVerificationInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.MilitaryVerificationErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQVFtQztBQUNuQyx1R0FBMEY7QUFDMUYsdUhBQTBHO0FBQzFHLDZHQUFnRztBQUNoRyxtSEFBc0c7QUEwQnRHOzs7Ozs7OztHQVFHO0FBQ0gsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBbUIsRUFBeUssRUFBRTtJQUNuTixPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNySSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQzFCLEtBQUssb0NBQW9DO1lBQ3JDLE9BQU8sTUFBTSxJQUFBLCtFQUFrQyxFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsdUNBQXVDLENBQUMsQ0FBQztRQUNuSSxLQUFLLCtCQUErQjtZQUNoQyxPQUFPLE1BQU0sSUFBQSxxRUFBNkIsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDbkgsS0FBSyxrQ0FBa0M7WUFDbkMsT0FBTyxNQUFNLElBQUEsMkVBQWdDLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ3pILEtBQUssNEJBQTRCO1lBQzdCLE9BQU8sTUFBTSxJQUFBLCtEQUEwQixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsK0JBQTBFLENBQUMsQ0FBQztRQUM5SjtZQUNJLE1BQU0sWUFBWSxHQUFHLDBCQUEwQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTztnQkFDSCxZQUFZLEVBQUUsWUFBWTtnQkFDMUIsU0FBUyxFQUFFLCtDQUE2QixDQUFDLGVBQWU7YUFDM0QsQ0FBQztLQUNUO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0LFxuICAgIENyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2UsIEdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5mb3JtYXRpb25JbnB1dCxcbiAgICBHZXRNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0LFxuICAgIEdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2UsXG4gICAgTWlsaXRhcnlWZXJpZmljYXRpb25FcnJvclR5cGUsIE1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVwb3J0aW5nSW5mb3JtYXRpb25SZXNwb25zZSxcbiAgICBVcGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0LFxuICAgIFVwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2Vcbn0gZnJvbSBcIkBtb29uYmVhbS9tb29uYmVhbS1tb2RlbHNcIjtcbmltcG9ydCB7Y3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb259IGZyb20gXCIuL3Jlc29sdmVycy9DcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblJlc29sdmVyXCI7XG5pbXBvcnQge2dldE1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5mb3JtYXRpb259IGZyb20gXCIuL3Jlc29sdmVycy9HZXRNaWxpdGFyeVZlcmlmaWNhdGlvbkluZm9ybWF0aW9uUmVzb2x2ZXJcIjtcbmltcG9ydCB7Z2V0TWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXN9IGZyb20gXCIuL3Jlc29sdmVycy9HZXRNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1c1Jlc29sdmVyXCI7XG5pbXBvcnQge3VwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzfSBmcm9tIFwiLi9yZXNvbHZlcnMvVXBkYXRlTWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXNSZXNvbHZlclwiO1xuXG4vKipcbiAqIE1hcHBpbmcgb3V0IHRoZSBBcHAgU3luYyBldmVudCB0eXBlLCBzbyB3ZSBjYW4gdXNlIGl0IGFzIGEgdHlwZSBpbiB0aGUgTGFtYmRhIEhhbmRsZXJcbiAqL1xudHlwZSBBcHBTeW5jRXZlbnQgPSB7XG4gICAgaW5mbzoge1xuICAgICAgICBmaWVsZE5hbWU6IHN0cmluZ1xuICAgIH0sXG4gICAgYXJndW1lbnRzOiB7XG4gICAgICAgIGdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5mb3JtYXRpb25JbnB1dDogR2V0TWlsaXRhcnlWZXJpZmljYXRpb25JbmZvcm1hdGlvbklucHV0LFxuICAgICAgICBnZXRNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0OiBHZXRNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0LFxuICAgICAgICB1cGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0OiBVcGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0XG4gICAgICAgIGNyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5wdXQ6IENyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5wdXRcbiAgICB9LFxuICAgIGlkZW50aXR5OiB7XG4gICAgICAgIHN1Yjogc3RyaW5nO1xuICAgICAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgIH1cbn1cblxuLyoqXG4gKiBPbWl0IHRoZSBwZXJzb25hbCBpZGVudGlmaWVyIGZyb20gdGhlIGNyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5wdXQgb2JqZWN0LCBmb3IgbG9nZ2luZyBwdXJwb3Nlc1xuICovXG50eXBlIEZpbHRlcmVkQ3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dCA9IE9taXQ8Q3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dCwgJ3BlcnNvbmFsSWRlbnRpZmllcic+O1xuXG4vKipcbiAqIExhbWJkYSBGdW5jdGlvbiBoYW5kbGVyLCBoYW5kbGluZyBpbmNvbWluZyBldmVudHMsXG4gKiBkZXBlbmRpbmcgb24gdGhlIEFwcFN5bmMgZmllbGQgbmFtZS5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgQXBwU3luYyBldmVudCB0byBiZSBwYXNzZWQgaW4gdGhlIGhhbmRsZXJcbiAqXG4gKiBAcmV0dXJucyBhIHtAbGluayBQcm9taXNlfSBjb250YWluaW5nIGEge0BsaW5rIENyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2V9LCBvciB7QGxpbmsgR2V0TWlsaXRhcnlWZXJpZmljYXRpb25SZXNwb25zZX0sXG4gKiBvciB7QGxpbmsgVXBkYXRlTWlsaXRhcnlWZXJpZmljYXRpb25SZXNwb25zZX0sIG9yIHtAbGluayBNaWxpdGFyeVZlcmlmaWNhdGlvblJlcG9ydGluZ0luZm9ybWF0aW9uUmVzcG9uc2V9XG4gKi9cbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudDogQXBwU3luY0V2ZW50KTogUHJvbWlzZTxDcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblJlc3BvbnNlIHwgR2V0TWlsaXRhcnlWZXJpZmljYXRpb25SZXNwb25zZSB8IFVwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2UgfCBNaWxpdGFyeVZlcmlmaWNhdGlvblJlcG9ydGluZ0luZm9ybWF0aW9uUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgbmV3IHN0b3JhZ2UgZXZlbnQgZm9yIG9wZXJhdGlvbiBbJHtldmVudC5pbmZvLmZpZWxkTmFtZX1dLCB3aXRoIGFyZ3VtZW50cyAke0pTT04uc3RyaW5naWZ5KGV2ZW50LmFyZ3VtZW50cyl9YCk7XG4gICAgc3dpdGNoIChldmVudC5pbmZvLmZpZWxkTmFtZSkge1xuICAgICAgICBjYXNlIFwiZ2V0TWlsaXRhcnlWZXJpZmljYXRpb25JbmZvcm1hdGlvblwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5mb3JtYXRpb24oZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5nZXRNaWxpdGFyeVZlcmlmaWNhdGlvbkluZm9ybWF0aW9uSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0TWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXNcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1cyhldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5wdXQpO1xuICAgICAgICBjYXNlIFwidXBkYXRlTWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXNcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB1cGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1cyhldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLnVwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5wdXQpO1xuICAgICAgICBjYXNlIFwiY3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbihldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmNyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5wdXQgYXMgRmlsdGVyZWRDcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6ICR7ZXZlbnQuaW5mby5maWVsZE5hbWV9YDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgIGVycm9yVHlwZTogTWlsaXRhcnlWZXJpZmljYXRpb25FcnJvclR5cGUuVW5leHBlY3RlZEVycm9yXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cblxuIl19