"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateMilitaryVerificationResolver_1 = require("./resolvers/CreateMilitaryVerificationResolver");
const GetMilitaryVerificationStatusResolver_1 = require("./resolvers/GetMilitaryVerificationStatusResolver");
const UpdateMilitaryVerificationStatusResolver_1 = require("./resolvers/UpdateMilitaryVerificationStatusResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 */
exports.handler = async (event) => {
    console.log(`Received new storage event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getMilitaryVerificationStatus":
            return await (0, GetMilitaryVerificationStatusResolver_1.getMilitaryVerificationStatus)(event.arguments.getMilitaryVerificationInput);
        case "updateMilitaryVerificationStatus":
            return await (0, UpdateMilitaryVerificationStatusResolver_1.updateMilitaryVerificationStatus)(event.arguments.updateMilitaryVerificationInput);
        case "createMilitaryVerification":
            return await (0, CreateMilitaryVerificationResolver_1.createMilitaryVerification)(event.arguments.createMilitaryVerificationInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.MilitaryVerificationErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQU9tQztBQUNuQyx1R0FBMEY7QUFDMUYsNkdBQWdHO0FBQ2hHLG1IQUFzRztBQW9CdEc7Ozs7O0dBS0c7QUFDSCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFtQixFQUFxRixFQUFFO0lBQy9ILE9BQU8sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JJLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDMUIsS0FBSywrQkFBK0I7WUFDaEMsT0FBTyxNQUFNLElBQUEscUVBQTZCLEVBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBQzdGLEtBQUssa0NBQWtDO1lBQ25DLE9BQU8sTUFBTSxJQUFBLDJFQUFnQyxFQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUNuRyxLQUFLLDRCQUE0QjtZQUM3QixPQUFPLE1BQU0sSUFBQSwrREFBMEIsRUFBQyxLQUFLLENBQUMsU0FBUyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDN0Y7WUFDSSxNQUFNLFlBQVksR0FBRywwQkFBMEIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN0RSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE9BQU87Z0JBQ0gsWUFBWSxFQUFFLFlBQVk7Z0JBQzFCLFNBQVMsRUFBRSwrQ0FBNkIsQ0FBQyxlQUFlO2FBQzNELENBQUM7S0FDVDtBQUNMLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dCxcbiAgICBDcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblJlc3BvbnNlLFxuICAgIEdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5wdXQsXG4gICAgTWlsaXRhcnlWZXJpZmljYXRpb25FcnJvclR5cGUsXG4gICAgTWlsaXRhcnlWZXJpZmljYXRpb25SZXNwb25zZSxcbiAgICBVcGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0XG59IGZyb20gXCJAbW9vbmJlYW0vbW9vbmJlYW0tbW9kZWxzXCI7XG5pbXBvcnQge2NyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9ufSBmcm9tIFwiLi9yZXNvbHZlcnMvQ3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb25SZXNvbHZlclwiO1xuaW1wb3J0IHtnZXRNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1c30gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldE1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzUmVzb2x2ZXJcIjtcbmltcG9ydCB7dXBkYXRlTWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXN9IGZyb20gXCIuL3Jlc29sdmVycy9VcGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1c1Jlc29sdmVyXCI7XG5cbi8qKlxuICogTWFwcGluZyBvdXQgdGhlIEFwcCBTeW5jIGV2ZW50IHR5cGUsIHNvIHdlIGNhbiB1c2UgaXQgYXMgYSB0eXBlIGluIHRoZSBMYW1iZGEgSGFuZGxlclxuICovXG50eXBlIEFwcFN5bmNFdmVudCA9IHtcbiAgICBpbmZvOiB7XG4gICAgICAgIGZpZWxkTmFtZTogc3RyaW5nXG4gICAgfSxcbiAgICBhcmd1bWVudHM6IHtcbiAgICAgICAgZ2V0TWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dDogR2V0TWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dCxcbiAgICAgICAgdXBkYXRlTWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dDogVXBkYXRlTWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dFxuICAgICAgICBjcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0OiBDcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0XG4gICAgfSxcbiAgICBpZGVudGl0eToge1xuICAgICAgICBzdWIgOiBzdHJpbmc7XG4gICAgICAgIHVzZXJuYW1lIDogc3RyaW5nO1xuICAgIH1cbn1cblxuLyoqXG4gKiBMYW1iZGEgRnVuY3Rpb24gaGFuZGxlciwgaGFuZGxpbmcgaW5jb21pbmcgZXZlbnRzLFxuICogZGVwZW5kaW5nIG9uIHRoZSBBcHBTeW5jIGZpZWxkIG5hbWUuXG4gKlxuICogQHBhcmFtIGV2ZW50IEFwcFN5bmMgZXZlbnQgdG8gYmUgcGFzc2VkIGluIHRoZSBoYW5kbGVyXG4gKi9cbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudDogQXBwU3luY0V2ZW50KTogUHJvbWlzZTxDcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblJlc3BvbnNlIHwgTWlsaXRhcnlWZXJpZmljYXRpb25SZXNwb25zZSB8IG51bGw+ID0+IHtcbiAgICBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgbmV3IHN0b3JhZ2UgZXZlbnQgZm9yIG9wZXJhdGlvbiBbJHtldmVudC5pbmZvLmZpZWxkTmFtZX1dLCB3aXRoIGFyZ3VtZW50cyAke0pTT04uc3RyaW5naWZ5KGV2ZW50LmFyZ3VtZW50cyl9YCk7XG4gICAgc3dpdGNoIChldmVudC5pbmZvLmZpZWxkTmFtZSkge1xuICAgICAgICBjYXNlIFwiZ2V0TWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXNcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1cyhldmVudC5hcmd1bWVudHMuZ2V0TWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dCk7XG4gICAgICAgIGNhc2UgXCJ1cGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1c1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHVwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzKGV2ZW50LmFyZ3VtZW50cy51cGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0KTtcbiAgICAgICAgY2FzZSBcImNyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb24oZXZlbnQuYXJndW1lbnRzLmNyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5wdXQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYFVuZXhwZWN0ZWQgZmllbGQgbmFtZTogJHtldmVudC5pbmZvLmZpZWxkTmFtZX1gO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgZXJyb3JUeXBlOiBNaWxpdGFyeVZlcmlmaWNhdGlvbkVycm9yVHlwZS5VbmV4cGVjdGVkRXJyb3JcbiAgICAgICAgICAgIH07XG4gICAgfVxufVxuXG4iXX0=