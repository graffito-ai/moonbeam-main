"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateMilitaryVerificationResolver_1 = require("./resolvers/CreateMilitaryVerificationResolver");
const GetMilitaryVerificationInformationResolver_1 = require("./resolvers/GetMilitaryVerificationInformationResolver");
const GetMilitaryVerificationStatusResolver_1 = require("./resolvers/GetMilitaryVerificationStatusResolver");
const UpdateMilitaryVerificationStatusResolver_1 = require("./resolvers/UpdateMilitaryVerificationStatusResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 *
 * @returns a {@link Promise} containing a {@link CreateMilitaryVerificationResponse}, or {@link GetMilitaryVerificationResponse},
 * or {@link UpdateMilitaryVerificationResponse}, or {@link MilitaryVerificationReportingInformationResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new storage event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getMilitaryVerificationInformation":
            return await (0, GetMilitaryVerificationInformationResolver_1.getMilitaryVerificationInformation)(event.info.fieldName, event.arguments.getMilitaryVerificationInformationInput);
        case "getMilitaryVerificationStatus":
            return await (0, GetMilitaryVerificationStatusResolver_1.getMilitaryVerificationStatus)(event.info.fieldName, event.arguments.getMilitaryVerificationInput);
        case "updateMilitaryVerificationStatus":
            return await (0, UpdateMilitaryVerificationStatusResolver_1.updateMilitaryVerificationStatus)(event.info.fieldName, event.arguments.updateMilitaryVerificationInput);
        case "createMilitaryVerification":
            return await (0, CreateMilitaryVerificationResolver_1.createMilitaryVerification)(event.info.fieldName, event.arguments.createMilitaryVerificationInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.MilitaryVerificationErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQVFtQztBQUNuQyx1R0FBMEY7QUFDMUYsdUhBQTJHO0FBQzNHLDZHQUFnRztBQUNoRyxtSEFBc0c7QUFxQnRHOzs7Ozs7OztHQVFHO0FBQ0gsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBbUIsRUFBeUssRUFBRTtJQUNuTixPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNySSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQzFCLEtBQUssb0NBQW9DO1lBQ3JDLE9BQU8sTUFBTSxJQUFBLCtFQUFrQyxFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsdUNBQXVDLENBQUMsQ0FBQztRQUNuSSxLQUFLLCtCQUErQjtZQUNoQyxPQUFPLE1BQU0sSUFBQSxxRUFBNkIsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDbkgsS0FBSyxrQ0FBa0M7WUFDbkMsT0FBTyxNQUFNLElBQUEsMkVBQWdDLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ3pILEtBQUssNEJBQTRCO1lBQzdCLE9BQU8sTUFBTSxJQUFBLCtEQUEwQixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUNuSDtZQUNJLE1BQU0sWUFBWSxHQUFHLDBCQUEwQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTztnQkFDSCxZQUFZLEVBQUUsWUFBWTtnQkFDMUIsU0FBUyxFQUFFLCtDQUE2QixDQUFDLGVBQWU7YUFDM0QsQ0FBQztLQUNUO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0LFxuICAgIENyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2UsIEdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5mb3JtYXRpb25JbnB1dCxcbiAgICBHZXRNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0LFxuICAgIEdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2UsXG4gICAgTWlsaXRhcnlWZXJpZmljYXRpb25FcnJvclR5cGUsIE1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVwb3J0aW5nSW5mb3JtYXRpb25SZXNwb25zZSxcbiAgICBVcGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0LFxuICAgIFVwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2Vcbn0gZnJvbSBcIkBtb29uYmVhbS9tb29uYmVhbS1tb2RlbHNcIjtcbmltcG9ydCB7Y3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb259IGZyb20gXCIuL3Jlc29sdmVycy9DcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblJlc29sdmVyXCI7XG5pbXBvcnQge2dldE1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5mb3JtYXRpb24gfSBmcm9tIFwiLi9yZXNvbHZlcnMvR2V0TWlsaXRhcnlWZXJpZmljYXRpb25JbmZvcm1hdGlvblJlc29sdmVyXCI7XG5pbXBvcnQge2dldE1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzfSBmcm9tIFwiLi9yZXNvbHZlcnMvR2V0TWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXNSZXNvbHZlclwiO1xuaW1wb3J0IHt1cGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblN0YXR1c30gZnJvbSBcIi4vcmVzb2x2ZXJzL1VwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzUmVzb2x2ZXJcIjtcblxuLyoqXG4gKiBNYXBwaW5nIG91dCB0aGUgQXBwIFN5bmMgZXZlbnQgdHlwZSwgc28gd2UgY2FuIHVzZSBpdCBhcyBhIHR5cGUgaW4gdGhlIExhbWJkYSBIYW5kbGVyXG4gKi9cbnR5cGUgQXBwU3luY0V2ZW50ID0ge1xuICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmdcbiAgICB9LFxuICAgIGFyZ3VtZW50czoge1xuICAgICAgICBnZXRNaWxpdGFyeVZlcmlmaWNhdGlvbkluZm9ybWF0aW9uSW5wdXQ6IEdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5mb3JtYXRpb25JbnB1dCxcbiAgICAgICAgZ2V0TWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dDogR2V0TWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dCxcbiAgICAgICAgdXBkYXRlTWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dDogVXBkYXRlTWlsaXRhcnlWZXJpZmljYXRpb25JbnB1dFxuICAgICAgICBjcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0OiBDcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0XG4gICAgfSxcbiAgICBpZGVudGl0eToge1xuICAgICAgICBzdWIgOiBzdHJpbmc7XG4gICAgICAgIHVzZXJuYW1lIDogc3RyaW5nO1xuICAgIH1cbn1cblxuLyoqXG4gKiBMYW1iZGEgRnVuY3Rpb24gaGFuZGxlciwgaGFuZGxpbmcgaW5jb21pbmcgZXZlbnRzLFxuICogZGVwZW5kaW5nIG9uIHRoZSBBcHBTeW5jIGZpZWxkIG5hbWUuXG4gKlxuICogQHBhcmFtIGV2ZW50IEFwcFN5bmMgZXZlbnQgdG8gYmUgcGFzc2VkIGluIHRoZSBoYW5kbGVyXG4gKlxuICogQHJldHVybnMgYSB7QGxpbmsgUHJvbWlzZX0gY29udGFpbmluZyBhIHtAbGluayBDcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblJlc3BvbnNlfSwgb3Ige0BsaW5rIEdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2V9LFxuICogb3Ige0BsaW5rIFVwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2V9LCBvciB7QGxpbmsgTWlsaXRhcnlWZXJpZmljYXRpb25SZXBvcnRpbmdJbmZvcm1hdGlvblJlc3BvbnNlfVxuICovXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFwcFN5bmNFdmVudCk6IFByb21pc2U8Q3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb25SZXNwb25zZSB8IEdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uUmVzcG9uc2UgfCBVcGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvblJlc3BvbnNlIHwgTWlsaXRhcnlWZXJpZmljYXRpb25SZXBvcnRpbmdJbmZvcm1hdGlvblJlc3BvbnNlPiA9PiB7XG4gICAgY29uc29sZS5sb2coYFJlY2VpdmVkIG5ldyBzdG9yYWdlIGV2ZW50IGZvciBvcGVyYXRpb24gWyR7ZXZlbnQuaW5mby5maWVsZE5hbWV9XSwgd2l0aCBhcmd1bWVudHMgJHtKU09OLnN0cmluZ2lmeShldmVudC5hcmd1bWVudHMpfWApO1xuICAgIHN3aXRjaCAoZXZlbnQuaW5mby5maWVsZE5hbWUpIHtcbiAgICAgICAgY2FzZSBcImdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uSW5mb3JtYXRpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRNaWxpdGFyeVZlcmlmaWNhdGlvbkluZm9ybWF0aW9uKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMuZ2V0TWlsaXRhcnlWZXJpZmljYXRpb25JbmZvcm1hdGlvbklucHV0KTtcbiAgICAgICAgY2FzZSBcImdldE1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0TWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXMoZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5nZXRNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0KTtcbiAgICAgICAgY2FzZSBcInVwZGF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uU3RhdHVzXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdXBkYXRlTWlsaXRhcnlWZXJpZmljYXRpb25TdGF0dXMoZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy51cGRhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0KTtcbiAgICAgICAgY2FzZSBcImNyZWF0ZU1pbGl0YXJ5VmVyaWZpY2F0aW9uXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlTWlsaXRhcnlWZXJpZmljYXRpb24oZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5jcmVhdGVNaWxpdGFyeVZlcmlmaWNhdGlvbklucHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6ICR7ZXZlbnQuaW5mby5maWVsZE5hbWV9YDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgIGVycm9yVHlwZTogTWlsaXRhcnlWZXJpZmljYXRpb25FcnJvclR5cGUuVW5leHBlY3RlZEVycm9yXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cblxuIl19