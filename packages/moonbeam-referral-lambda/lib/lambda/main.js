"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateReferralResolver_1 = require("./resolvers/CreateReferralResolver");
const GetReferralsByStatusResolver_1 = require("./resolvers/GetReferralsByStatusResolver");
const GetUserFromReferralResolver_1 = require("./resolvers/GetUserFromReferralResolver");
const UpdateReferralResolver_1 = require("./resolvers/UpdateReferralResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync even to be passed in the handler
 * @returns a {@link Promise} containing a {@link ReferralResponse} or {@link UserFromReferralResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new Referral event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getReferralsByStatus":
            return await (0, GetReferralsByStatusResolver_1.getReferralsByStatus)(event.info.fieldName, event.arguments.getReferralsByStatusInput);
        case "getUserFromReferral":
            return await (0, GetUserFromReferralResolver_1.getUserFromReferral)(event.info.fieldName, event.arguments.userFromReferralInput);
        case "createReferral":
            return await (0, CreateReferralResolver_1.createReferral)(event.info.fieldName, event.arguments.createReferralInput);
        case "updateReferral":
            return await (0, UpdateReferralResolver_1.updateReferral)(event.info.fieldName, event.arguments.updateReferralInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.ReferralErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQVFtQztBQUNuQywrRUFBb0U7QUFDcEUsMkZBQThFO0FBQzlFLHlGQUE0RTtBQUM1RSwrRUFBa0U7QUFxQmxFOzs7Ozs7R0FNRztBQUNILE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQW1CLEVBQXdELEVBQUU7SUFDbEcsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEksUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUMxQixLQUFLLHNCQUFzQjtZQUN2QixPQUFPLE1BQU0sSUFBQSxtREFBb0IsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDdkcsS0FBSyxxQkFBcUI7WUFDdEIsT0FBTyxNQUFNLElBQUEsaURBQW1CLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ2xHLEtBQUssZ0JBQWdCO1lBQ2pCLE9BQU8sTUFBTSxJQUFBLHVDQUFjLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzNGLEtBQUssZ0JBQWdCO1lBQ2pCLE9BQU8sTUFBTSxJQUFBLHVDQUFjLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzNGO1lBQ0ksTUFBTSxZQUFZLEdBQUcsMEJBQTBCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxQixPQUFPO2dCQUNILFlBQVksRUFBRSxZQUFZO2dCQUMxQixTQUFTLEVBQUUsbUNBQWlCLENBQUMsZUFBZTthQUMvQyxDQUFDO0tBQ1Q7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENyZWF0ZVJlZmVycmFsSW5wdXQsXG4gICAgR2V0UmVmZXJyYWxzQnlTdGF0dXNJbnB1dCxcbiAgICBSZWZlcnJhbEVycm9yVHlwZSxcbiAgICBSZWZlcnJhbFJlc3BvbnNlLFxuICAgIFVwZGF0ZVJlZmVycmFsSW5wdXQsXG4gICAgVXNlckZyb21SZWZlcnJhbElucHV0LFxuICAgIFVzZXJGcm9tUmVmZXJyYWxSZXNwb25zZVxufSBmcm9tIFwiQG1vb25iZWFtL21vb25iZWFtLW1vZGVsc1wiO1xuaW1wb3J0IHsgY3JlYXRlUmVmZXJyYWwgfSBmcm9tIFwiLi9yZXNvbHZlcnMvQ3JlYXRlUmVmZXJyYWxSZXNvbHZlclwiO1xuaW1wb3J0IHtnZXRSZWZlcnJhbHNCeVN0YXR1c30gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldFJlZmVycmFsc0J5U3RhdHVzUmVzb2x2ZXJcIjtcbmltcG9ydCB7Z2V0VXNlckZyb21SZWZlcnJhbH0gZnJvbSBcIi4vcmVzb2x2ZXJzL0dldFVzZXJGcm9tUmVmZXJyYWxSZXNvbHZlclwiO1xuaW1wb3J0IHt1cGRhdGVSZWZlcnJhbH0gZnJvbSBcIi4vcmVzb2x2ZXJzL1VwZGF0ZVJlZmVycmFsUmVzb2x2ZXJcIjtcblxuLyoqXG4gKiBNYXBwaW5nIG91dCB0aGUgQXBwIFN5bmMgZXZlbnQgdHlwZSwgc28gd2UgY2FuIHVzZSBpdCBhcyBhIHR5cGUgaW4gdGhlIExhbWJkYSBIYW5kbGVyXG4gKi9cbnR5cGUgQXBwU3luY0V2ZW50ID0ge1xuICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmdcbiAgICB9LFxuICAgIGFyZ3VtZW50czoge1xuICAgICAgICBnZXRSZWZlcnJhbHNCeVN0YXR1c0lucHV0OiBHZXRSZWZlcnJhbHNCeVN0YXR1c0lucHV0LFxuICAgICAgICB1c2VyRnJvbVJlZmVycmFsSW5wdXQ6IFVzZXJGcm9tUmVmZXJyYWxJbnB1dCxcbiAgICAgICAgY3JlYXRlUmVmZXJyYWxJbnB1dDogQ3JlYXRlUmVmZXJyYWxJbnB1dCxcbiAgICAgICAgdXBkYXRlUmVmZXJyYWxJbnB1dDogVXBkYXRlUmVmZXJyYWxJbnB1dFxuICAgIH0sXG4gICAgaWRlbnRpdHk6IHtcbiAgICAgICAgc3ViOiBzdHJpbmc7XG4gICAgICAgIHVzZXJuYW1lOiBzdHJpbmc7XG4gICAgfVxufVxuXG4vKipcbiAqIExhbWJkYSBGdW5jdGlvbiBoYW5kbGVyLCBoYW5kbGluZyBpbmNvbWluZyBldmVudHMsXG4gKiBkZXBlbmRpbmcgb24gdGhlIEFwcFN5bmMgZmllbGQgbmFtZS5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgQXBwU3luYyBldmVuIHRvIGJlIHBhc3NlZCBpbiB0aGUgaGFuZGxlclxuICogQHJldHVybnMgYSB7QGxpbmsgUHJvbWlzZX0gY29udGFpbmluZyBhIHtAbGluayBSZWZlcnJhbFJlc3BvbnNlfSBvciB7QGxpbmsgVXNlckZyb21SZWZlcnJhbFJlc3BvbnNlfVxuICovXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFwcFN5bmNFdmVudCk6IFByb21pc2U8UmVmZXJyYWxSZXNwb25zZSB8IFVzZXJGcm9tUmVmZXJyYWxSZXNwb25zZT4gPT4ge1xuICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCBuZXcgUmVmZXJyYWwgZXZlbnQgZm9yIG9wZXJhdGlvbiBbJHtldmVudC5pbmZvLmZpZWxkTmFtZX1dLCB3aXRoIGFyZ3VtZW50cyAke0pTT04uc3RyaW5naWZ5KGV2ZW50LmFyZ3VtZW50cyl9YCk7XG4gICAgc3dpdGNoIChldmVudC5pbmZvLmZpZWxkTmFtZSkge1xuICAgICAgICBjYXNlIFwiZ2V0UmVmZXJyYWxzQnlTdGF0dXNcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRSZWZlcnJhbHNCeVN0YXR1cyhldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmdldFJlZmVycmFsc0J5U3RhdHVzSW5wdXQpO1xuICAgICAgICBjYXNlIFwiZ2V0VXNlckZyb21SZWZlcnJhbFwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldFVzZXJGcm9tUmVmZXJyYWwoZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy51c2VyRnJvbVJlZmVycmFsSW5wdXQpO1xuICAgICAgICBjYXNlIFwiY3JlYXRlUmVmZXJyYWxcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVSZWZlcnJhbChldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmNyZWF0ZVJlZmVycmFsSW5wdXQpO1xuICAgICAgICBjYXNlIFwidXBkYXRlUmVmZXJyYWxcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB1cGRhdGVSZWZlcnJhbChldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLnVwZGF0ZVJlZmVycmFsSW5wdXQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYFVuZXhwZWN0ZWQgZmllbGQgbmFtZTogJHtldmVudC5pbmZvLmZpZWxkTmFtZX1gO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgZXJyb3JUeXBlOiBSZWZlcnJhbEVycm9yVHlwZS5VbmV4cGVjdGVkRXJyb3JcbiAgICAgICAgICAgIH07XG4gICAgfVxufVxuXG4iXX0=