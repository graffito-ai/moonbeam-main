"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const listReferrals_1 = require("./resolvers/listReferrals");
const getReferral_1 = require("./resolvers/getReferral");
const createReferral_1 = require("./resolvers/createReferral");
const updateReferral_1 = require("./resolvers/updateReferral");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync even to be passed in the handler
 */
exports.handler = async (event) => {
    console.log(`Received new referral event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getReferral":
            return await (0, getReferral_1.getReferral)(event.arguments.id);
        case "listReferrals":
            return await (0, listReferrals_1.listReferrals)(event.arguments.filter);
        case "createReferral":
            return await (0, createReferral_1.createReferral)(event.arguments.createInput);
        case "updateReferral":
            return await (0, updateReferral_1.updateReferral)(event.arguments.updateInput);
        default:
            console.log(`Unexpected field name: {}`, event.info.fieldName);
            return {
                errorMessage: `Unexpected field name: ${event.info.fieldName}`,
                errorType: moonbeam_models_1.ReferralErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQU1tQztBQUNuQyw2REFBd0Q7QUFDeEQseURBQW9EO0FBQ3BELCtEQUEwRDtBQUMxRCwrREFBMEQ7QUFxQjFEOzs7OztHQUtHO0FBQ0gsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBbUIsRUFBNkIsRUFBRTtJQUN2RSxPQUFPLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0SSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQzFCLEtBQUssYUFBYTtZQUNkLE9BQU8sTUFBTSxJQUFBLHlCQUFXLEVBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNqRCxLQUFLLGVBQWU7WUFDaEIsT0FBTyxNQUFNLElBQUEsNkJBQWEsRUFBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZELEtBQUssZ0JBQWdCO1lBQ2pCLE9BQU8sTUFBTSxJQUFBLCtCQUFjLEVBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3RCxLQUFLLGdCQUFnQjtZQUNqQixPQUFPLE1BQU0sSUFBQSwrQkFBYyxFQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDN0Q7WUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDL0QsT0FBTztnQkFDSCxZQUFZLEVBQUUsMEJBQTBCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUM5RCxTQUFTLEVBQUUsbUNBQWlCLENBQUMsZUFBZTthQUMvQyxDQUFDO0tBQ1Q7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENyZWF0ZVJlZmVycmFsSW5wdXQsXG4gICAgTGlzdFJlZmVycmFsSW5wdXQsXG4gICAgUmVmZXJyYWxFcnJvclR5cGUsXG4gICAgUmVmZXJyYWxSZXNwb25zZSxcbiAgICBVcGRhdGVSZWZlcnJhbElucHV0XG59IGZyb20gXCJAbW9vbmJlYW0vbW9vbmJlYW0tbW9kZWxzXCI7XG5pbXBvcnQge2xpc3RSZWZlcnJhbHN9IGZyb20gXCIuL3Jlc29sdmVycy9saXN0UmVmZXJyYWxzXCI7XG5pbXBvcnQge2dldFJlZmVycmFsfSBmcm9tIFwiLi9yZXNvbHZlcnMvZ2V0UmVmZXJyYWxcIjtcbmltcG9ydCB7Y3JlYXRlUmVmZXJyYWx9IGZyb20gXCIuL3Jlc29sdmVycy9jcmVhdGVSZWZlcnJhbFwiO1xuaW1wb3J0IHt1cGRhdGVSZWZlcnJhbH0gZnJvbSBcIi4vcmVzb2x2ZXJzL3VwZGF0ZVJlZmVycmFsXCI7XG5cbi8qKlxuICogTWFwcGluZyBvdXQgdGhlIEFwcCBTeW5jIGV2ZW50IHR5cGUsIHNvIHdlIGNhbiB1c2UgaXQgYXMgYSB0eXBlIGluIHRoZSBMYW1iZGEgSGFuZGxlclxuICovXG50eXBlIEFwcFN5bmNFdmVudCA9IHtcbiAgICBpbmZvOiB7XG4gICAgICAgIGZpZWxkTmFtZTogc3RyaW5nXG4gICAgfSxcbiAgICBhcmd1bWVudHM6IHtcbiAgICAgICAgaWQ6IHN0cmluZyxcbiAgICAgICAgZmlsdGVyOiBMaXN0UmVmZXJyYWxJbnB1dFxuICAgICAgICBjcmVhdGVJbnB1dDogQ3JlYXRlUmVmZXJyYWxJbnB1dFxuICAgICAgICB1cGRhdGVJbnB1dDogVXBkYXRlUmVmZXJyYWxJbnB1dFxuICAgIH0sXG4gICAgaWRlbnRpdHk6IHtcbiAgICAgICAgc3ViIDogc3RyaW5nO1xuICAgICAgICB1c2VybmFtZSA6IHN0cmluZztcbiAgICB9XG59XG5cbi8qKlxuICogTGFtYmRhIEZ1bmN0aW9uIGhhbmRsZXIsIGhhbmRsaW5nIGluY29taW5nIGV2ZW50cyxcbiAqIGRlcGVuZGluZyBvbiB0aGUgQXBwU3luYyBmaWVsZCBuYW1lLlxuICpcbiAqIEBwYXJhbSBldmVudCBBcHBTeW5jIGV2ZW4gdG8gYmUgcGFzc2VkIGluIHRoZSBoYW5kbGVyXG4gKi9cbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudDogQXBwU3luY0V2ZW50KTogUHJvbWlzZTxSZWZlcnJhbFJlc3BvbnNlPiA9PiB7XG4gICAgY29uc29sZS5sb2coYFJlY2VpdmVkIG5ldyByZWZlcnJhbCBldmVudCBmb3Igb3BlcmF0aW9uIFske2V2ZW50LmluZm8uZmllbGROYW1lfV0sIHdpdGggYXJndW1lbnRzICR7SlNPTi5zdHJpbmdpZnkoZXZlbnQuYXJndW1lbnRzKX1gKTtcbiAgICBzd2l0Y2ggKGV2ZW50LmluZm8uZmllbGROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJnZXRSZWZlcnJhbFwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldFJlZmVycmFsKGV2ZW50LmFyZ3VtZW50cy5pZCk7XG4gICAgICAgIGNhc2UgXCJsaXN0UmVmZXJyYWxzXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgbGlzdFJlZmVycmFscyhldmVudC5hcmd1bWVudHMuZmlsdGVyKTtcbiAgICAgICAgY2FzZSBcImNyZWF0ZVJlZmVycmFsXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlUmVmZXJyYWwoZXZlbnQuYXJndW1lbnRzLmNyZWF0ZUlucHV0KTtcbiAgICAgICAgY2FzZSBcInVwZGF0ZVJlZmVycmFsXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdXBkYXRlUmVmZXJyYWwoZXZlbnQuYXJndW1lbnRzLnVwZGF0ZUlucHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6IHt9YCwgZXZlbnQuaW5mby5maWVsZE5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6ICR7ZXZlbnQuaW5mby5maWVsZE5hbWV9YCxcbiAgICAgICAgICAgICAgICBlcnJvclR5cGU6IFJlZmVycmFsRXJyb3JUeXBlLlVuZXhwZWN0ZWRFcnJvclxuICAgICAgICAgICAgfTtcbiAgICB9XG59XG5cbiJdfQ==