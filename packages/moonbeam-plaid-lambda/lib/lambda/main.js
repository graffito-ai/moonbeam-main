"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const createAccountLink_1 = require("./resolvers/createAccountLink");
const updateAccountLink_1 = require("./resolvers/updateAccountLink");
const getAccountLink_1 = require("./resolvers/getAccountLink");
const listAccounts_1 = require("./resolvers/listAccounts");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync even to be passed in the handler
 */
exports.handler = async (event) => {
    console.log(`Received new referral event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getAccountLink":
            return await (0, getAccountLink_1.getAccountLink)(event.arguments.id);
        case "listAccounts":
            return await (0, listAccounts_1.listAccounts)(event.arguments.filter);
        case "createAccountLink":
            return await (0, createAccountLink_1.createAccountLink)(event.arguments.createAccountLinkInput);
        case "updateAccountLink":
            return await (0, updateAccountLink_1.updateAccountLink)(event.arguments.updateAccountLinkInput);
        default:
            console.log(`Unexpected field name: {}`, event.info.fieldName);
            return {
                errorMessage: `Unexpected field name: ${event.info.fieldName}`,
                errorType: moonbeam_models_1.LinkErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUttQztBQUNuQyxxRUFBZ0U7QUFDaEUscUVBQWdFO0FBQ2hFLCtEQUEwRDtBQUMxRCwyREFBc0Q7QUFxQnREOzs7OztHQUtHO0FBQ0gsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBbUIsRUFBa0QsRUFBRTtJQUM1RixPQUFPLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0SSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQzFCLEtBQUssZ0JBQWdCO1lBQ2pCLE9BQU8sTUFBTSxJQUFBLCtCQUFjLEVBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNwRCxLQUFLLGNBQWM7WUFDZixPQUFPLE1BQU0sSUFBQSwyQkFBWSxFQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsS0FBSyxtQkFBbUI7WUFDcEIsT0FBTyxNQUFNLElBQUEscUNBQWlCLEVBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQzNFLEtBQUssbUJBQW1CO1lBQ3BCLE9BQU8sTUFBTSxJQUFBLHFDQUFpQixFQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUMzRTtZQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMvRCxPQUFPO2dCQUNILFlBQVksRUFBRSwwQkFBMEIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQzlELFNBQVMsRUFBRSwrQkFBYSxDQUFDLGVBQWU7YUFDM0MsQ0FBQztLQUNUO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBY2NvdW50TGlua1Jlc3BvbnNlLCBBY2NvdW50UmVzcG9uc2UsXG4gICAgQ3JlYXRlQWNjb3VudExpbmtJbnB1dCxcbiAgICBMaW5rRXJyb3JUeXBlLCBMaXN0QWNjb3VudHNJbnB1dCxcbiAgICBVcGRhdGVBY2NvdW50TGlua0lucHV0XG59IGZyb20gXCJAbW9vbmJlYW0vbW9vbmJlYW0tbW9kZWxzXCI7XG5pbXBvcnQge2NyZWF0ZUFjY291bnRMaW5rfSBmcm9tIFwiLi9yZXNvbHZlcnMvY3JlYXRlQWNjb3VudExpbmtcIjtcbmltcG9ydCB7dXBkYXRlQWNjb3VudExpbmt9IGZyb20gXCIuL3Jlc29sdmVycy91cGRhdGVBY2NvdW50TGlua1wiO1xuaW1wb3J0IHtnZXRBY2NvdW50TGlua30gZnJvbSBcIi4vcmVzb2x2ZXJzL2dldEFjY291bnRMaW5rXCI7XG5pbXBvcnQge2xpc3RBY2NvdW50c30gZnJvbSBcIi4vcmVzb2x2ZXJzL2xpc3RBY2NvdW50c1wiO1xuXG4vKipcbiAqIE1hcHBpbmcgb3V0IHRoZSBBcHAgU3luYyBldmVudCB0eXBlLCBzbyB3ZSBjYW4gdXNlIGl0IGFzIGEgdHlwZSBpbiB0aGUgTGFtYmRhIEhhbmRsZXJcbiAqL1xudHlwZSBBcHBTeW5jRXZlbnQgPSB7XG4gICAgaW5mbzoge1xuICAgICAgICBmaWVsZE5hbWU6IHN0cmluZ1xuICAgIH0sXG4gICAgYXJndW1lbnRzOiB7XG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgICAgIGZpbHRlcjogTGlzdEFjY291bnRzSW5wdXQsXG4gICAgICAgIGNyZWF0ZUFjY291bnRMaW5rSW5wdXQ6IENyZWF0ZUFjY291bnRMaW5rSW5wdXQsXG4gICAgICAgIHVwZGF0ZUFjY291bnRMaW5rSW5wdXQ6IFVwZGF0ZUFjY291bnRMaW5rSW5wdXRcbiAgICB9LFxuICAgIGlkZW50aXR5OiB7XG4gICAgICAgIHN1YiA6IHN0cmluZztcbiAgICAgICAgdXNlcm5hbWUgOiBzdHJpbmc7XG4gICAgfVxufVxuXG4vKipcbiAqIExhbWJkYSBGdW5jdGlvbiBoYW5kbGVyLCBoYW5kbGluZyBpbmNvbWluZyBldmVudHMsXG4gKiBkZXBlbmRpbmcgb24gdGhlIEFwcFN5bmMgZmllbGQgbmFtZS5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgQXBwU3luYyBldmVuIHRvIGJlIHBhc3NlZCBpbiB0aGUgaGFuZGxlclxuICovXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFwcFN5bmNFdmVudCk6IFByb21pc2U8QWNjb3VudExpbmtSZXNwb25zZSB8IEFjY291bnRSZXNwb25zZT4gPT4ge1xuICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCBuZXcgcmVmZXJyYWwgZXZlbnQgZm9yIG9wZXJhdGlvbiBbJHtldmVudC5pbmZvLmZpZWxkTmFtZX1dLCB3aXRoIGFyZ3VtZW50cyAke0pTT04uc3RyaW5naWZ5KGV2ZW50LmFyZ3VtZW50cyl9YCk7XG4gICAgc3dpdGNoIChldmVudC5pbmZvLmZpZWxkTmFtZSkge1xuICAgICAgICBjYXNlIFwiZ2V0QWNjb3VudExpbmtcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRBY2NvdW50TGluayhldmVudC5hcmd1bWVudHMuaWQpO1xuICAgICAgICBjYXNlIFwibGlzdEFjY291bnRzXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgbGlzdEFjY291bnRzKGV2ZW50LmFyZ3VtZW50cy5maWx0ZXIpO1xuICAgICAgICBjYXNlIFwiY3JlYXRlQWNjb3VudExpbmtcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVBY2NvdW50TGluayhldmVudC5hcmd1bWVudHMuY3JlYXRlQWNjb3VudExpbmtJbnB1dCk7XG4gICAgICAgIGNhc2UgXCJ1cGRhdGVBY2NvdW50TGlua1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHVwZGF0ZUFjY291bnRMaW5rKGV2ZW50LmFyZ3VtZW50cy51cGRhdGVBY2NvdW50TGlua0lucHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6IHt9YCwgZXZlbnQuaW5mby5maWVsZE5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6ICR7ZXZlbnQuaW5mby5maWVsZE5hbWV9YCxcbiAgICAgICAgICAgICAgICBlcnJvclR5cGU6IExpbmtFcnJvclR5cGUuVW5leHBlY3RlZEVycm9yXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cblxuIl19