"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const createAccountLink_1 = require("./resolvers/createAccountLink");
const updateAccountLink_1 = require("./resolvers/updateAccountLink");
const getAccountLink_1 = require("./resolvers/getAccountLink");
const listAccounts_1 = require("./resolvers/listAccounts");
const deleteAccount_1 = require("./resolvers/deleteAccount");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync even to be passed in the handler
 */
exports.handler = async (event) => {
    console.log(`Received new Plaid link event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getAccountLink":
            return await (0, getAccountLink_1.getAccountLink)(event.arguments.id);
        case "listAccounts":
            return await (0, listAccounts_1.listAccounts)(event.arguments.filter);
        case "createAccountLink":
            return await (0, createAccountLink_1.createAccountLink)(event.arguments.createAccountLinkInput);
        case "updateAccountLink":
            return await (0, updateAccountLink_1.updateAccountLink)(event.arguments.updateAccountLinkInput);
        case "deleteAccount":
            return await (0, deleteAccount_1.deleteAccount)(event.arguments.deleteAccountInput);
        default:
            console.log(`Unexpected field name: {}`, event.info.fieldName);
            return {
                errorMessage: `Unexpected field name: ${event.info.fieldName}`,
                errorType: moonbeam_models_1.LinkErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUttQztBQUNuQyxxRUFBZ0U7QUFDaEUscUVBQWdFO0FBQ2hFLCtEQUEwRDtBQUMxRCwyREFBc0Q7QUFDdEQsNkRBQXdEO0FBc0J4RDs7Ozs7R0FLRztBQUNILE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQW1CLEVBQWtELEVBQUU7SUFDNUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnREFBZ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEksUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUMxQixLQUFLLGdCQUFnQjtZQUNqQixPQUFPLE1BQU0sSUFBQSwrQkFBYyxFQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEQsS0FBSyxjQUFjO1lBQ2YsT0FBTyxNQUFNLElBQUEsMkJBQVksRUFBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELEtBQUssbUJBQW1CO1lBQ3BCLE9BQU8sTUFBTSxJQUFBLHFDQUFpQixFQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUMzRSxLQUFLLG1CQUFtQjtZQUNwQixPQUFPLE1BQU0sSUFBQSxxQ0FBaUIsRUFBQyxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDM0UsS0FBSyxlQUFlO1lBQ2hCLE9BQU8sTUFBTSxJQUFBLDZCQUFhLEVBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ25FO1lBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQy9ELE9BQU87Z0JBQ0gsWUFBWSxFQUFFLDBCQUEwQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDOUQsU0FBUyxFQUFFLCtCQUFhLENBQUMsZUFBZTthQUMzQyxDQUFDO0tBQ1Q7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFjY291bnRMaW5rUmVzcG9uc2UsIEFjY291bnRSZXNwb25zZSxcbiAgICBDcmVhdGVBY2NvdW50TGlua0lucHV0LCBEZWxldGVBY2NvdW50SW5wdXQsXG4gICAgTGlua0Vycm9yVHlwZSwgTGlzdEFjY291bnRzSW5wdXQsXG4gICAgVXBkYXRlQWNjb3VudExpbmtJbnB1dFxufSBmcm9tIFwiQG1vb25iZWFtL21vb25iZWFtLW1vZGVsc1wiO1xuaW1wb3J0IHtjcmVhdGVBY2NvdW50TGlua30gZnJvbSBcIi4vcmVzb2x2ZXJzL2NyZWF0ZUFjY291bnRMaW5rXCI7XG5pbXBvcnQge3VwZGF0ZUFjY291bnRMaW5rfSBmcm9tIFwiLi9yZXNvbHZlcnMvdXBkYXRlQWNjb3VudExpbmtcIjtcbmltcG9ydCB7Z2V0QWNjb3VudExpbmt9IGZyb20gXCIuL3Jlc29sdmVycy9nZXRBY2NvdW50TGlua1wiO1xuaW1wb3J0IHtsaXN0QWNjb3VudHN9IGZyb20gXCIuL3Jlc29sdmVycy9saXN0QWNjb3VudHNcIjtcbmltcG9ydCB7ZGVsZXRlQWNjb3VudH0gZnJvbSBcIi4vcmVzb2x2ZXJzL2RlbGV0ZUFjY291bnRcIjtcblxuLyoqXG4gKiBNYXBwaW5nIG91dCB0aGUgQXBwIFN5bmMgZXZlbnQgdHlwZSwgc28gd2UgY2FuIHVzZSBpdCBhcyBhIHR5cGUgaW4gdGhlIExhbWJkYSBIYW5kbGVyXG4gKi9cbnR5cGUgQXBwU3luY0V2ZW50ID0ge1xuICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmdcbiAgICB9LFxuICAgIGFyZ3VtZW50czoge1xuICAgICAgICBpZDogc3RyaW5nLFxuICAgICAgICBmaWx0ZXI6IExpc3RBY2NvdW50c0lucHV0LFxuICAgICAgICBjcmVhdGVBY2NvdW50TGlua0lucHV0OiBDcmVhdGVBY2NvdW50TGlua0lucHV0LFxuICAgICAgICB1cGRhdGVBY2NvdW50TGlua0lucHV0OiBVcGRhdGVBY2NvdW50TGlua0lucHV0LFxuICAgICAgICBkZWxldGVBY2NvdW50SW5wdXQ6IERlbGV0ZUFjY291bnRJbnB1dFxuICAgIH0sXG4gICAgaWRlbnRpdHk6IHtcbiAgICAgICAgc3ViIDogc3RyaW5nO1xuICAgICAgICB1c2VybmFtZSA6IHN0cmluZztcbiAgICB9XG59XG5cbi8qKlxuICogTGFtYmRhIEZ1bmN0aW9uIGhhbmRsZXIsIGhhbmRsaW5nIGluY29taW5nIGV2ZW50cyxcbiAqIGRlcGVuZGluZyBvbiB0aGUgQXBwU3luYyBmaWVsZCBuYW1lLlxuICpcbiAqIEBwYXJhbSBldmVudCBBcHBTeW5jIGV2ZW4gdG8gYmUgcGFzc2VkIGluIHRoZSBoYW5kbGVyXG4gKi9cbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudDogQXBwU3luY0V2ZW50KTogUHJvbWlzZTxBY2NvdW50TGlua1Jlc3BvbnNlIHwgQWNjb3VudFJlc3BvbnNlPiA9PiB7XG4gICAgY29uc29sZS5sb2coYFJlY2VpdmVkIG5ldyBQbGFpZCBsaW5rIGV2ZW50IGZvciBvcGVyYXRpb24gWyR7ZXZlbnQuaW5mby5maWVsZE5hbWV9XSwgd2l0aCBhcmd1bWVudHMgJHtKU09OLnN0cmluZ2lmeShldmVudC5hcmd1bWVudHMpfWApO1xuICAgIHN3aXRjaCAoZXZlbnQuaW5mby5maWVsZE5hbWUpIHtcbiAgICAgICAgY2FzZSBcImdldEFjY291bnRMaW5rXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0QWNjb3VudExpbmsoZXZlbnQuYXJndW1lbnRzLmlkKTtcbiAgICAgICAgY2FzZSBcImxpc3RBY2NvdW50c1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGxpc3RBY2NvdW50cyhldmVudC5hcmd1bWVudHMuZmlsdGVyKTtcbiAgICAgICAgY2FzZSBcImNyZWF0ZUFjY291bnRMaW5rXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlQWNjb3VudExpbmsoZXZlbnQuYXJndW1lbnRzLmNyZWF0ZUFjY291bnRMaW5rSW5wdXQpO1xuICAgICAgICBjYXNlIFwidXBkYXRlQWNjb3VudExpbmtcIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB1cGRhdGVBY2NvdW50TGluayhldmVudC5hcmd1bWVudHMudXBkYXRlQWNjb3VudExpbmtJbnB1dCk7XG4gICAgICAgIGNhc2UgXCJkZWxldGVBY2NvdW50XCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZGVsZXRlQWNjb3VudChldmVudC5hcmd1bWVudHMuZGVsZXRlQWNjb3VudElucHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6IHt9YCwgZXZlbnQuaW5mby5maWVsZE5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6ICR7ZXZlbnQuaW5mby5maWVsZE5hbWV9YCxcbiAgICAgICAgICAgICAgICBlcnJvclR5cGU6IExpbmtFcnJvclR5cGUuVW5leHBlY3RlZEVycm9yXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cblxuIl19