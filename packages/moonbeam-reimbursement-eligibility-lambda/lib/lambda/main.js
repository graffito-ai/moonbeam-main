"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateReimbursementEligibilityResolver_1 = require("./resolvers/CreateReimbursementEligibilityResolver");
const UpdateReimbursementEligibilityResolver_1 = require("./resolvers/UpdateReimbursementEligibilityResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 * @returns a {@link Promise} containing a {@link ReimbursementEligibilityResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new reimbursement eligibility event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "createReimbursementEligibility":
            return await (0, CreateReimbursementEligibilityResolver_1.createReimbursementEligibility)(event.info.fieldName, event.arguments.createReimbursementEligibilityInput);
        case "updateReimbursementEligibility":
            return await (0, UpdateReimbursementEligibilityResolver_1.updateReimbursementEligibility)(event.info.fieldName, event.arguments.updateReimbursementEligibilityInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.ReimbursementsErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUttQztBQUNuQywrR0FBa0c7QUFDbEcsK0dBQWtHO0FBbUJsRzs7Ozs7O0dBTUc7QUFDSCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFtQixFQUE2QyxFQUFFO0lBQ3ZGLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0RBQStELEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZKLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDMUIsS0FBSyxnQ0FBZ0M7WUFDakMsT0FBTyxNQUFNLElBQUEsdUVBQThCLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1FBQzNILEtBQUssZ0NBQWdDO1lBQ2pDLE9BQU8sTUFBTSxJQUFBLHVFQUE4QixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUMzSDtZQUNJLE1BQU0sWUFBWSxHQUFHLDBCQUEwQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTztnQkFDSCxZQUFZLEVBQUUsWUFBWTtnQkFDMUIsU0FBUyxFQUFFLHlDQUF1QixDQUFDLGVBQWU7YUFDckQsQ0FBQztLQUNUO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDcmVhdGVSZWltYnVyc2VtZW50RWxpZ2liaWxpdHlJbnB1dCxcbiAgICBSZWltYnVyc2VtZW50RWxpZ2liaWxpdHlSZXNwb25zZSxcbiAgICBSZWltYnVyc2VtZW50c0Vycm9yVHlwZSxcbiAgICBVcGRhdGVSZWltYnVyc2VtZW50RWxpZ2liaWxpdHlJbnB1dFxufSBmcm9tIFwiQG1vb25iZWFtL21vb25iZWFtLW1vZGVsc1wiO1xuaW1wb3J0IHtjcmVhdGVSZWltYnVyc2VtZW50RWxpZ2liaWxpdHl9IGZyb20gXCIuL3Jlc29sdmVycy9DcmVhdGVSZWltYnVyc2VtZW50RWxpZ2liaWxpdHlSZXNvbHZlclwiO1xuaW1wb3J0IHt1cGRhdGVSZWltYnVyc2VtZW50RWxpZ2liaWxpdHl9IGZyb20gXCIuL3Jlc29sdmVycy9VcGRhdGVSZWltYnVyc2VtZW50RWxpZ2liaWxpdHlSZXNvbHZlclwiO1xuXG4vKipcbiAqIE1hcHBpbmcgb3V0IHRoZSBBcHAgU3luYyBldmVudCB0eXBlLCBzbyB3ZSBjYW4gdXNlIGl0IGFzIGEgdHlwZSBpbiB0aGUgTGFtYmRhIEhhbmRsZXJcbiAqL1xudHlwZSBBcHBTeW5jRXZlbnQgPSB7XG4gICAgaW5mbzoge1xuICAgICAgICBmaWVsZE5hbWU6IHN0cmluZ1xuICAgIH0sXG4gICAgYXJndW1lbnRzOiB7XG4gICAgICAgIGNyZWF0ZVJlaW1idXJzZW1lbnRFbGlnaWJpbGl0eUlucHV0OiBDcmVhdGVSZWltYnVyc2VtZW50RWxpZ2liaWxpdHlJbnB1dCxcbiAgICAgICAgdXBkYXRlUmVpbWJ1cnNlbWVudEVsaWdpYmlsaXR5SW5wdXQ6IFVwZGF0ZVJlaW1idXJzZW1lbnRFbGlnaWJpbGl0eUlucHV0XG4gICAgfSxcbiAgICBpZGVudGl0eToge1xuICAgICAgICBzdWI6IHN0cmluZztcbiAgICAgICAgdXNlcm5hbWU6IHN0cmluZztcbiAgICB9XG59XG5cbi8qKlxuICogTGFtYmRhIEZ1bmN0aW9uIGhhbmRsZXIsIGhhbmRsaW5nIGluY29taW5nIGV2ZW50cyxcbiAqIGRlcGVuZGluZyBvbiB0aGUgQXBwU3luYyBmaWVsZCBuYW1lLlxuICpcbiAqIEBwYXJhbSBldmVudCBBcHBTeW5jIGV2ZW50IHRvIGJlIHBhc3NlZCBpbiB0aGUgaGFuZGxlclxuICogQHJldHVybnMgYSB7QGxpbmsgUHJvbWlzZX0gY29udGFpbmluZyBhIHtAbGluayBSZWltYnVyc2VtZW50RWxpZ2liaWxpdHlSZXNwb25zZX1cbiAqL1xuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBcHBTeW5jRXZlbnQpOiBQcm9taXNlPFJlaW1idXJzZW1lbnRFbGlnaWJpbGl0eVJlc3BvbnNlPiA9PiB7XG4gICAgY29uc29sZS5sb2coYFJlY2VpdmVkIG5ldyByZWltYnVyc2VtZW50IGVsaWdpYmlsaXR5IGV2ZW50IGZvciBvcGVyYXRpb24gWyR7ZXZlbnQuaW5mby5maWVsZE5hbWV9XSwgd2l0aCBhcmd1bWVudHMgJHtKU09OLnN0cmluZ2lmeShldmVudC5hcmd1bWVudHMpfWApO1xuICAgIHN3aXRjaCAoZXZlbnQuaW5mby5maWVsZE5hbWUpIHtcbiAgICAgICAgY2FzZSBcImNyZWF0ZVJlaW1idXJzZW1lbnRFbGlnaWJpbGl0eVwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGNyZWF0ZVJlaW1idXJzZW1lbnRFbGlnaWJpbGl0eShldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmNyZWF0ZVJlaW1idXJzZW1lbnRFbGlnaWJpbGl0eUlucHV0KTtcbiAgICAgICAgY2FzZSBcInVwZGF0ZVJlaW1idXJzZW1lbnRFbGlnaWJpbGl0eVwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHVwZGF0ZVJlaW1idXJzZW1lbnRFbGlnaWJpbGl0eShldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLnVwZGF0ZVJlaW1idXJzZW1lbnRFbGlnaWJpbGl0eUlucHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6ICR7ZXZlbnQuaW5mby5maWVsZE5hbWV9YDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgIGVycm9yVHlwZTogUmVpbWJ1cnNlbWVudHNFcnJvclR5cGUuVW5leHBlY3RlZEVycm9yXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cblxuIl19