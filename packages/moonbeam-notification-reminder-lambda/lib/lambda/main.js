"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const CreateNotificationReminderResolver_1 = require("./resolvers/CreateNotificationReminderResolver");
const GetAllUsersForNotificationRemindersResolver_1 = require("./resolvers/GetAllUsersForNotificationRemindersResolver");
const GetNotificationReminderResolver_1 = require("./resolvers/GetNotificationReminderResolver");
const UpdateNotificationReminderResolver_1 = require("./resolvers/UpdateNotificationReminderResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync even to be passed in the handler
 * @returns a {@link Promise} containing a {@link NotificationReminderResponse} or {@link UserForNotificationReminderResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new Notification Reminder event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "getNotificationReminders":
            return await (0, GetNotificationReminderResolver_1.getNotificationReminders)(event.info.fieldName);
        case 'getAllUsersForNotificationReminders':
            return await (0, GetAllUsersForNotificationRemindersResolver_1.getAllUsersForNotificationReminders)(event.info.fieldName);
        case "createNotificationReminder":
            return await (0, CreateNotificationReminderResolver_1.createNotificationReminder)(event.info.fieldName, event.arguments.createNotificationReminderInput);
        case "updateNotificationReminder":
            return await (0, UpdateNotificationReminderResolver_1.updateNotificationReminder)(event.info.fieldName, event.arguments.updateNotificationReminderInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.NotificationReminderErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUltQztBQUNuQyx1R0FBMEY7QUFDMUYseUhBQThHO0FBQzlHLGlHQUFxRjtBQUNyRix1R0FBNEY7QUFtQjVGOzs7Ozs7R0FNRztBQUNILE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQW1CLEVBQStFLEVBQUU7SUFDekgsT0FBTyxDQUFDLEdBQUcsQ0FBQywyREFBMkQsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLHFCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkosUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUMxQixLQUFLLDBCQUEwQjtZQUMzQixPQUFPLE1BQU0sSUFBQSwwREFBd0IsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2hFLEtBQUsscUNBQXFDO1lBQ3RDLE9BQU8sTUFBTSxJQUFBLGlGQUFtQyxFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0UsS0FBSyw0QkFBNEI7WUFDN0IsT0FBTyxNQUFNLElBQUEsK0RBQTBCLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ25ILEtBQUssNEJBQTRCO1lBQzdCLE9BQU8sTUFBTSxJQUFBLCtEQUEwQixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUNuSDtZQUNJLE1BQU0sWUFBWSxHQUFHLDBCQUEwQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTztnQkFDSCxZQUFZLEVBQUUsWUFBWTtnQkFDMUIsU0FBUyxFQUFFLCtDQUE2QixDQUFDLGVBQWU7YUFDM0QsQ0FBQztLQUNUO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDcmVhdGVOb3RpZmljYXRpb25SZW1pbmRlcklucHV0LFxuICAgIE5vdGlmaWNhdGlvblJlbWluZGVyRXJyb3JUeXBlLFxuICAgIE5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UsIFVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVySW5wdXQsIFVzZXJGb3JOb3RpZmljYXRpb25SZW1pbmRlclJlc3BvbnNlXG59IGZyb20gXCJAbW9vbmJlYW0vbW9vbmJlYW0tbW9kZWxzXCI7XG5pbXBvcnQge2NyZWF0ZU5vdGlmaWNhdGlvblJlbWluZGVyfSBmcm9tIFwiLi9yZXNvbHZlcnMvQ3JlYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNvbHZlclwiO1xuaW1wb3J0IHsgZ2V0QWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlcnMgfSBmcm9tIFwiLi9yZXNvbHZlcnMvR2V0QWxsVXNlcnNGb3JOb3RpZmljYXRpb25SZW1pbmRlcnNSZXNvbHZlclwiO1xuaW1wb3J0IHtnZXROb3RpZmljYXRpb25SZW1pbmRlcnN9IGZyb20gXCIuL3Jlc29sdmVycy9HZXROb3RpZmljYXRpb25SZW1pbmRlclJlc29sdmVyXCI7XG5pbXBvcnQgeyB1cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlciB9IGZyb20gXCIuL3Jlc29sdmVycy9VcGRhdGVOb3RpZmljYXRpb25SZW1pbmRlclJlc29sdmVyXCI7XG5cbi8qKlxuICogTWFwcGluZyBvdXQgdGhlIEFwcCBTeW5jIGV2ZW50IHR5cGUsIHNvIHdlIGNhbiB1c2UgaXQgYXMgYSB0eXBlIGluIHRoZSBMYW1iZGEgSGFuZGxlclxuICovXG50eXBlIEFwcFN5bmNFdmVudCA9IHtcbiAgICBpbmZvOiB7XG4gICAgICAgIGZpZWxkTmFtZTogc3RyaW5nXG4gICAgfSxcbiAgICBhcmd1bWVudHM6IHtcbiAgICAgICAgY3JlYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJJbnB1dDogQ3JlYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJJbnB1dFxuICAgICAgICB1cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlcklucHV0OiBVcGRhdGVOb3RpZmljYXRpb25SZW1pbmRlcklucHV0XG4gICAgfSxcbiAgICBpZGVudGl0eToge1xuICAgICAgICBzdWI6IHN0cmluZztcbiAgICAgICAgdXNlcm5hbWU6IHN0cmluZztcbiAgICB9XG59XG5cbi8qKlxuICogTGFtYmRhIEZ1bmN0aW9uIGhhbmRsZXIsIGhhbmRsaW5nIGluY29taW5nIGV2ZW50cyxcbiAqIGRlcGVuZGluZyBvbiB0aGUgQXBwU3luYyBmaWVsZCBuYW1lLlxuICpcbiAqIEBwYXJhbSBldmVudCBBcHBTeW5jIGV2ZW4gdG8gYmUgcGFzc2VkIGluIHRoZSBoYW5kbGVyXG4gKiBAcmV0dXJucyBhIHtAbGluayBQcm9taXNlfSBjb250YWluaW5nIGEge0BsaW5rIE5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2V9IG9yIHtAbGluayBVc2VyRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZX1cbiAqL1xuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBcHBTeW5jRXZlbnQpOiBQcm9taXNlPE5vdGlmaWNhdGlvblJlbWluZGVyUmVzcG9uc2UgfCBVc2VyRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJSZXNwb25zZT4gPT4ge1xuICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCBuZXcgTm90aWZpY2F0aW9uIFJlbWluZGVyIGV2ZW50IGZvciBvcGVyYXRpb24gWyR7ZXZlbnQuaW5mby5maWVsZE5hbWV9XSwgd2l0aCBhcmd1bWVudHMgJHtKU09OLnN0cmluZ2lmeShldmVudC5hcmd1bWVudHMpfWApO1xuICAgIHN3aXRjaCAoZXZlbnQuaW5mby5maWVsZE5hbWUpIHtcbiAgICAgICAgY2FzZSBcImdldE5vdGlmaWNhdGlvblJlbWluZGVyc1wiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldE5vdGlmaWNhdGlvblJlbWluZGVycyhldmVudC5pbmZvLmZpZWxkTmFtZSk7XG4gICAgICAgIGNhc2UgJ2dldEFsbFVzZXJzRm9yTm90aWZpY2F0aW9uUmVtaW5kZXJzJzpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRBbGxVc2Vyc0Zvck5vdGlmaWNhdGlvblJlbWluZGVycyhldmVudC5pbmZvLmZpZWxkTmFtZSk7XG4gICAgICAgIGNhc2UgXCJjcmVhdGVOb3RpZmljYXRpb25SZW1pbmRlclwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGNyZWF0ZU5vdGlmaWNhdGlvblJlbWluZGVyKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMuY3JlYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJJbnB1dCk7XG4gICAgICAgIGNhc2UgXCJ1cGRhdGVOb3RpZmljYXRpb25SZW1pbmRlclwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHVwZGF0ZU5vdGlmaWNhdGlvblJlbWluZGVyKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMudXBkYXRlTm90aWZpY2F0aW9uUmVtaW5kZXJJbnB1dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgVW5leHBlY3RlZCBmaWVsZCBuYW1lOiAke2V2ZW50LmluZm8uZmllbGROYW1lfWA7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBlcnJvclR5cGU6IE5vdGlmaWNhdGlvblJlbWluZGVyRXJyb3JUeXBlLlVuZXhwZWN0ZWRFcnJvclxuICAgICAgICAgICAgfTtcbiAgICB9XG59XG5cbiJdfQ==