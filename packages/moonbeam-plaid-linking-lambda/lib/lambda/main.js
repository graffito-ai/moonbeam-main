"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CreatePlaidLinkingSessionResolver_1 = require("./resolvers/CreatePlaidLinkingSessionResolver");
const UpdatePlaidLinkingSessionResolver_1 = require("./resolvers/UpdatePlaidLinkingSessionResolver");
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 * @returns a {@link Promise} containing a {@link PlaidLinkingSessionResponse} or {@link UpdatePlaidLinkingSessionResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new Plaid Linking event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "createPlaidLinkingSession":
            return await (0, CreatePlaidLinkingSessionResolver_1.createPlaidLinkingSession)(event.info.fieldName, event.arguments.createPlaidLinkingSessionInput);
        case "updatePlaidLinkingSession":
            return await (0, UpdatePlaidLinkingSessionResolver_1.updatePlaidLinkingSession)(event.info.fieldName, event.arguments.updatePlaidLinkingSessionInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.PlaidLinkingErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFHQUF3RjtBQUN4RixxR0FBd0Y7QUFDeEYsK0RBS21DO0FBbUJuQzs7Ozs7O0dBTUc7QUFDSCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFtQixFQUE0RSxFQUFFO0lBQ3RILE9BQU8sQ0FBQyxHQUFHLENBQUMsbURBQW1ELEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNJLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDMUIsS0FBSywyQkFBMkI7WUFDNUIsT0FBTyxNQUFNLElBQUEsNkRBQXlCLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQ2pILEtBQUssMkJBQTJCO1lBQzVCLE9BQU8sTUFBTSxJQUFBLDZEQUF5QixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUNqSDtZQUNJLE1BQU0sWUFBWSxHQUFHLDBCQUEwQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTztnQkFDSCxZQUFZLEVBQUUsWUFBWTtnQkFDMUIsU0FBUyxFQUFFLHVDQUFxQixDQUFDLGVBQWU7YUFDbkQsQ0FBQztLQUNUO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjcmVhdGVQbGFpZExpbmtpbmdTZXNzaW9ufSBmcm9tIFwiLi9yZXNvbHZlcnMvQ3JlYXRlUGxhaWRMaW5raW5nU2Vzc2lvblJlc29sdmVyXCI7XG5pbXBvcnQge3VwZGF0ZVBsYWlkTGlua2luZ1Nlc3Npb259IGZyb20gXCIuL3Jlc29sdmVycy9VcGRhdGVQbGFpZExpbmtpbmdTZXNzaW9uUmVzb2x2ZXJcIjtcbmltcG9ydCB7XG4gICAgQ3JlYXRlUGxhaWRMaW5raW5nU2Vzc2lvbklucHV0LFxuICAgIFBsYWlkTGlua2luZ0Vycm9yVHlwZSxcbiAgICBQbGFpZExpbmtpbmdTZXNzaW9uUmVzcG9uc2UsXG4gICAgVXBkYXRlUGxhaWRMaW5raW5nU2Vzc2lvbklucHV0LCBVcGRhdGVQbGFpZExpbmtpbmdTZXNzaW9uUmVzcG9uc2Vcbn0gZnJvbSBcIkBtb29uYmVhbS9tb29uYmVhbS1tb2RlbHNcIjtcblxuLyoqXG4gKiBNYXBwaW5nIG91dCB0aGUgQXBwIFN5bmMgZXZlbnQgdHlwZSwgc28gd2UgY2FuIHVzZSBpdCBhcyBhIHR5cGUgaW4gdGhlIExhbWJkYSBIYW5kbGVyXG4gKi9cbnR5cGUgQXBwU3luY0V2ZW50ID0ge1xuICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmdcbiAgICB9LFxuICAgIGFyZ3VtZW50czoge1xuICAgICAgICBjcmVhdGVQbGFpZExpbmtpbmdTZXNzaW9uSW5wdXQ6IENyZWF0ZVBsYWlkTGlua2luZ1Nlc3Npb25JbnB1dCxcbiAgICAgICAgdXBkYXRlUGxhaWRMaW5raW5nU2Vzc2lvbklucHV0OiBVcGRhdGVQbGFpZExpbmtpbmdTZXNzaW9uSW5wdXRcbiAgICB9LFxuICAgIGlkZW50aXR5OiB7XG4gICAgICAgIHN1Yjogc3RyaW5nO1xuICAgICAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgIH1cbn1cblxuLyoqXG4gKiBMYW1iZGEgRnVuY3Rpb24gaGFuZGxlciwgaGFuZGxpbmcgaW5jb21pbmcgZXZlbnRzLFxuICogZGVwZW5kaW5nIG9uIHRoZSBBcHBTeW5jIGZpZWxkIG5hbWUuXG4gKlxuICogQHBhcmFtIGV2ZW50IEFwcFN5bmMgZXZlbnQgdG8gYmUgcGFzc2VkIGluIHRoZSBoYW5kbGVyXG4gKiBAcmV0dXJucyBhIHtAbGluayBQcm9taXNlfSBjb250YWluaW5nIGEge0BsaW5rIFBsYWlkTGlua2luZ1Nlc3Npb25SZXNwb25zZX0gb3Ige0BsaW5rIFVwZGF0ZVBsYWlkTGlua2luZ1Nlc3Npb25SZXNwb25zZX1cbiAqL1xuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBcHBTeW5jRXZlbnQpOiBQcm9taXNlPFBsYWlkTGlua2luZ1Nlc3Npb25SZXNwb25zZSB8IFVwZGF0ZVBsYWlkTGlua2luZ1Nlc3Npb25SZXNwb25zZT4gPT4ge1xuICAgIGNvbnNvbGUubG9nKGBSZWNlaXZlZCBuZXcgUGxhaWQgTGlua2luZyBldmVudCBmb3Igb3BlcmF0aW9uIFske2V2ZW50LmluZm8uZmllbGROYW1lfV0sIHdpdGggYXJndW1lbnRzICR7SlNPTi5zdHJpbmdpZnkoZXZlbnQuYXJndW1lbnRzKX1gKTtcbiAgICBzd2l0Y2ggKGV2ZW50LmluZm8uZmllbGROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJjcmVhdGVQbGFpZExpbmtpbmdTZXNzaW9uXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlUGxhaWRMaW5raW5nU2Vzc2lvbihldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmNyZWF0ZVBsYWlkTGlua2luZ1Nlc3Npb25JbnB1dCk7XG4gICAgICAgIGNhc2UgXCJ1cGRhdGVQbGFpZExpbmtpbmdTZXNzaW9uXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdXBkYXRlUGxhaWRMaW5raW5nU2Vzc2lvbihldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLnVwZGF0ZVBsYWlkTGlua2luZ1Nlc3Npb25JbnB1dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgVW5leHBlY3RlZCBmaWVsZCBuYW1lOiAke2V2ZW50LmluZm8uZmllbGROYW1lfWA7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBlcnJvclR5cGU6IFBsYWlkTGlua2luZ0Vycm9yVHlwZS5VbmV4cGVjdGVkRXJyb3JcbiAgICAgICAgICAgIH07XG4gICAgfVxufVxuXG4iXX0=