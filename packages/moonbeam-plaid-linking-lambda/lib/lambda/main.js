"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CreatePlaidLinkingSessionResolver_1 = require("./resolvers/CreatePlaidLinkingSessionResolver");
const UpdatePlaidLinkingSessionResolver_1 = require("./resolvers/UpdatePlaidLinkingSessionResolver");
const moonbeam_models_1 = require("@moonbeam/moonbeam-models");
const GetPlaidLinkingSessionByTokenResolver_1 = require("./resolvers/GetPlaidLinkingSessionByTokenResolver");
const CreateBankingItemResolver_1 = require("./resolvers/CreateBankingItemResolver");
const GetBankingItemByTokenResolver_1 = require("./resolvers/GetBankingItemByTokenResolver");
/**
 * Lambda Function handler, handling incoming events,
 * depending on the AppSync field name.
 *
 * @param event AppSync event to be passed in the handler
 * @returns a {@link Promise} containing a {@link PlaidLinkingSessionResponse}, {@link UpdatePlaidLinkingSessionResponse} or {@link BankingItemResponse}
 */
exports.handler = async (event) => {
    console.log(`Received new Plaid Linking event for operation [${event.info.fieldName}], with arguments ${JSON.stringify(event.arguments)}`);
    switch (event.info.fieldName) {
        case "createBankingItem":
            return await (0, CreateBankingItemResolver_1.createBankingItem)(event.info.fieldName, event.arguments.createBankingItemInput);
        case "getBankingItemByToken":
            return await (0, GetBankingItemByTokenResolver_1.getBankingItemByToken)(event.info.fieldName, event.arguments.getBankingItemByTokenInput);
        // case "updateBankingItem":
        //     return await updateBankingItem(event.info.fieldName, event.arguments.updateBankingItemInput);
        case "createPlaidLinkingSession":
            return await (0, CreatePlaidLinkingSessionResolver_1.createPlaidLinkingSession)(event.info.fieldName, event.arguments.createPlaidLinkingSessionInput);
        case "updatePlaidLinkingSession":
            return await (0, UpdatePlaidLinkingSessionResolver_1.updatePlaidLinkingSession)(event.info.fieldName, event.arguments.updatePlaidLinkingSessionInput);
        case "getPlaidLinkingSessionByToken":
            return await (0, GetPlaidLinkingSessionByTokenResolver_1.getPlaidLinkingSessionByToken)(event.info.fieldName, event.arguments.getPlaidLinkingSessionByTokenInput);
        default:
            const errorMessage = `Unexpected field name: ${event.info.fieldName}`;
            console.log(errorMessage);
            return {
                errorMessage: errorMessage,
                errorType: moonbeam_models_1.PlaidLinkingErrorType.UnexpectedError
            };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFHQUF3RjtBQUN4RixxR0FBd0Y7QUFDeEYsK0RBT21DO0FBQ25DLDZHQUFrRztBQUNsRyxxRkFBMEU7QUFDMUUsNkZBQWtGO0FBdUJsRjs7Ozs7O0dBTUc7QUFDSCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFtQixFQUFrRyxFQUFFO0lBQzVJLE9BQU8sQ0FBQyxHQUFHLENBQUMsbURBQW1ELEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNJLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDMUIsS0FBSyxtQkFBbUI7WUFDcEIsT0FBTyxNQUFNLElBQUEsNkNBQWlCLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ2pHLEtBQUssdUJBQXVCO1lBQ3hCLE9BQU8sTUFBTSxJQUFBLHFEQUFxQixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUN6Ryw0QkFBNEI7UUFDNUIsb0dBQW9HO1FBQ3BHLEtBQUssMkJBQTJCO1lBQzVCLE9BQU8sTUFBTSxJQUFBLDZEQUF5QixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUNqSCxLQUFLLDJCQUEyQjtZQUM1QixPQUFPLE1BQU0sSUFBQSw2REFBeUIsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFDakgsS0FBSywrQkFBK0I7WUFDaEMsT0FBTyxNQUFNLElBQUEscUVBQTZCLEVBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQ3pIO1lBQ0ksTUFBTSxZQUFZLEdBQUcsMEJBQTBCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxQixPQUFPO2dCQUNILFlBQVksRUFBRSxZQUFZO2dCQUMxQixTQUFTLEVBQUUsdUNBQXFCLENBQUMsZUFBZTthQUNuRCxDQUFDO0tBQ1Q7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NyZWF0ZVBsYWlkTGlua2luZ1Nlc3Npb259IGZyb20gXCIuL3Jlc29sdmVycy9DcmVhdGVQbGFpZExpbmtpbmdTZXNzaW9uUmVzb2x2ZXJcIjtcbmltcG9ydCB7dXBkYXRlUGxhaWRMaW5raW5nU2Vzc2lvbn0gZnJvbSBcIi4vcmVzb2x2ZXJzL1VwZGF0ZVBsYWlkTGlua2luZ1Nlc3Npb25SZXNvbHZlclwiO1xuaW1wb3J0IHtcbiAgICBCYW5raW5nSXRlbVJlc3BvbnNlLFxuICAgIENyZWF0ZUJhbmtpbmdJdGVtSW5wdXQsXG4gICAgQ3JlYXRlUGxhaWRMaW5raW5nU2Vzc2lvbklucHV0LCBHZXRCYW5raW5nSXRlbUJ5VG9rZW5JbnB1dCwgR2V0UGxhaWRMaW5raW5nU2Vzc2lvbkJ5VG9rZW5JbnB1dCxcbiAgICBQbGFpZExpbmtpbmdFcnJvclR5cGUsXG4gICAgUGxhaWRMaW5raW5nU2Vzc2lvblJlc3BvbnNlLCBVcGRhdGVCYW5raW5nSXRlbUlucHV0LFxuICAgIFVwZGF0ZVBsYWlkTGlua2luZ1Nlc3Npb25JbnB1dCwgVXBkYXRlUGxhaWRMaW5raW5nU2Vzc2lvblJlc3BvbnNlXG59IGZyb20gXCJAbW9vbmJlYW0vbW9vbmJlYW0tbW9kZWxzXCI7XG5pbXBvcnQgeyBnZXRQbGFpZExpbmtpbmdTZXNzaW9uQnlUb2tlbiB9IGZyb20gXCIuL3Jlc29sdmVycy9HZXRQbGFpZExpbmtpbmdTZXNzaW9uQnlUb2tlblJlc29sdmVyXCI7XG5pbXBvcnQgeyBjcmVhdGVCYW5raW5nSXRlbSB9IGZyb20gXCIuL3Jlc29sdmVycy9DcmVhdGVCYW5raW5nSXRlbVJlc29sdmVyXCI7XG5pbXBvcnQgeyBnZXRCYW5raW5nSXRlbUJ5VG9rZW4gfSBmcm9tIFwiLi9yZXNvbHZlcnMvR2V0QmFua2luZ0l0ZW1CeVRva2VuUmVzb2x2ZXJcIjtcblxuLyoqXG4gKiBNYXBwaW5nIG91dCB0aGUgQXBwIFN5bmMgZXZlbnQgdHlwZSwgc28gd2UgY2FuIHVzZSBpdCBhcyBhIHR5cGUgaW4gdGhlIExhbWJkYSBIYW5kbGVyXG4gKi9cbnR5cGUgQXBwU3luY0V2ZW50ID0ge1xuICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmdcbiAgICB9LFxuICAgIGFyZ3VtZW50czoge1xuICAgICAgICBjcmVhdGVCYW5raW5nSXRlbUlucHV0OiBDcmVhdGVCYW5raW5nSXRlbUlucHV0LFxuICAgICAgICB1cGRhdGVCYW5raW5nSXRlbUlucHV0OiBVcGRhdGVCYW5raW5nSXRlbUlucHV0LFxuICAgICAgICBnZXRCYW5raW5nSXRlbUJ5VG9rZW5JbnB1dDogR2V0QmFua2luZ0l0ZW1CeVRva2VuSW5wdXQsXG4gICAgICAgIGNyZWF0ZVBsYWlkTGlua2luZ1Nlc3Npb25JbnB1dDogQ3JlYXRlUGxhaWRMaW5raW5nU2Vzc2lvbklucHV0LFxuICAgICAgICB1cGRhdGVQbGFpZExpbmtpbmdTZXNzaW9uSW5wdXQ6IFVwZGF0ZVBsYWlkTGlua2luZ1Nlc3Npb25JbnB1dCxcbiAgICAgICAgZ2V0UGxhaWRMaW5raW5nU2Vzc2lvbkJ5VG9rZW5JbnB1dDogR2V0UGxhaWRMaW5raW5nU2Vzc2lvbkJ5VG9rZW5JbnB1dFxuICAgIH0sXG4gICAgaWRlbnRpdHk6IHtcbiAgICAgICAgc3ViOiBzdHJpbmc7XG4gICAgICAgIHVzZXJuYW1lOiBzdHJpbmc7XG4gICAgfVxufVxuXG4vKipcbiAqIExhbWJkYSBGdW5jdGlvbiBoYW5kbGVyLCBoYW5kbGluZyBpbmNvbWluZyBldmVudHMsXG4gKiBkZXBlbmRpbmcgb24gdGhlIEFwcFN5bmMgZmllbGQgbmFtZS5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgQXBwU3luYyBldmVudCB0byBiZSBwYXNzZWQgaW4gdGhlIGhhbmRsZXJcbiAqIEByZXR1cm5zIGEge0BsaW5rIFByb21pc2V9IGNvbnRhaW5pbmcgYSB7QGxpbmsgUGxhaWRMaW5raW5nU2Vzc2lvblJlc3BvbnNlfSwge0BsaW5rIFVwZGF0ZVBsYWlkTGlua2luZ1Nlc3Npb25SZXNwb25zZX0gb3Ige0BsaW5rIEJhbmtpbmdJdGVtUmVzcG9uc2V9XG4gKi9cbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudDogQXBwU3luY0V2ZW50KTogUHJvbWlzZTxQbGFpZExpbmtpbmdTZXNzaW9uUmVzcG9uc2UgfCBVcGRhdGVQbGFpZExpbmtpbmdTZXNzaW9uUmVzcG9uc2UgfCBCYW5raW5nSXRlbVJlc3BvbnNlPiA9PiB7XG4gICAgY29uc29sZS5sb2coYFJlY2VpdmVkIG5ldyBQbGFpZCBMaW5raW5nIGV2ZW50IGZvciBvcGVyYXRpb24gWyR7ZXZlbnQuaW5mby5maWVsZE5hbWV9XSwgd2l0aCBhcmd1bWVudHMgJHtKU09OLnN0cmluZ2lmeShldmVudC5hcmd1bWVudHMpfWApO1xuICAgIHN3aXRjaCAoZXZlbnQuaW5mby5maWVsZE5hbWUpIHtcbiAgICAgICAgY2FzZSBcImNyZWF0ZUJhbmtpbmdJdGVtXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlQmFua2luZ0l0ZW0oZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5jcmVhdGVCYW5raW5nSXRlbUlucHV0KTtcbiAgICAgICAgY2FzZSBcImdldEJhbmtpbmdJdGVtQnlUb2tlblwiOlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldEJhbmtpbmdJdGVtQnlUb2tlbihldmVudC5pbmZvLmZpZWxkTmFtZSwgZXZlbnQuYXJndW1lbnRzLmdldEJhbmtpbmdJdGVtQnlUb2tlbklucHV0KTtcbiAgICAgICAgLy8gY2FzZSBcInVwZGF0ZUJhbmtpbmdJdGVtXCI6XG4gICAgICAgIC8vICAgICByZXR1cm4gYXdhaXQgdXBkYXRlQmFua2luZ0l0ZW0oZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy51cGRhdGVCYW5raW5nSXRlbUlucHV0KTtcbiAgICAgICAgY2FzZSBcImNyZWF0ZVBsYWlkTGlua2luZ1Nlc3Npb25cIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVQbGFpZExpbmtpbmdTZXNzaW9uKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMuY3JlYXRlUGxhaWRMaW5raW5nU2Vzc2lvbklucHV0KTtcbiAgICAgICAgY2FzZSBcInVwZGF0ZVBsYWlkTGlua2luZ1Nlc3Npb25cIjpcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB1cGRhdGVQbGFpZExpbmtpbmdTZXNzaW9uKGV2ZW50LmluZm8uZmllbGROYW1lLCBldmVudC5hcmd1bWVudHMudXBkYXRlUGxhaWRMaW5raW5nU2Vzc2lvbklucHV0KTtcbiAgICAgICAgY2FzZSBcImdldFBsYWlkTGlua2luZ1Nlc3Npb25CeVRva2VuXCI6XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0UGxhaWRMaW5raW5nU2Vzc2lvbkJ5VG9rZW4oZXZlbnQuaW5mby5maWVsZE5hbWUsIGV2ZW50LmFyZ3VtZW50cy5nZXRQbGFpZExpbmtpbmdTZXNzaW9uQnlUb2tlbklucHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBVbmV4cGVjdGVkIGZpZWxkIG5hbWU6ICR7ZXZlbnQuaW5mby5maWVsZE5hbWV9YDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgIGVycm9yVHlwZTogUGxhaWRMaW5raW5nRXJyb3JUeXBlLlVuZXhwZWN0ZWRFcnJvclxuICAgICAgICAgICAgfTtcbiAgICB9XG59XG5cbiJdfQ==